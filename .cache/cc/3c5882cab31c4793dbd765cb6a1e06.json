{"id":"node_modules/argparse/lib/action/append.js","dependencies":[{"name":"/Users/zach/Code/brooklyn-js-tensorflow/package.json","includedInParent":true,"mtime":1574314359001},{"name":"/Users/zach/Code/brooklyn-js-tensorflow/.babelrc","includedInParent":true,"mtime":1574222996221},{"name":"/Users/zach/Code/brooklyn-js-tensorflow/node_modules/argparse/package.json","includedInParent":true,"mtime":1574223218973},{"name":"util","loc":{"line":12,"column":19},"parent":"/Users/zach/Code/brooklyn-js-tensorflow/node_modules/argparse/lib/action/append.js","resolved":"/Users/zach/Code/brooklyn-js-tensorflow/node_modules/util/util.js"},{"name":"../action","loc":{"line":14,"column":21},"parent":"/Users/zach/Code/brooklyn-js-tensorflow/node_modules/argparse/lib/action/append.js","resolved":"/Users/zach/Code/brooklyn-js-tensorflow/node_modules/argparse/lib/action.js"},{"name":"../const","loc":{"line":17,"column":16},"parent":"/Users/zach/Code/brooklyn-js-tensorflow/node_modules/argparse/lib/action/append.js","resolved":"/Users/zach/Code/brooklyn-js-tensorflow/node_modules/argparse/lib/const.js"}],"generated":{"js":"/*:nodoc:*\n * class ActionAppend\n *\n * This action stores a list, and appends each argument value to the list.\n * This is useful to allow an option to be specified multiple times.\n * This class inherided from [[Action]]\n *\n **/\n\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n/*:nodoc:*\n * new ActionAppend(options)\n * - options (object): options hash see [[Action.new]]\n *\n * Note: options.nargs should be optional for constants\n * and more then zero for other\n **/\nvar ActionAppend = module.exports = function ActionAppend(options) {\n  options = options || {};\n  if (this.nargs <= 0) {\n    throw new Error('nargs for append actions must be > 0; if arg ' +\n        'strings are not supplying the value to append, ' +\n        'the append const action may be more appropriate');\n  }\n  if (!!this.constant && this.nargs !== c.OPTIONAL) {\n    throw new Error('nargs must be OPTIONAL to supply const');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionAppend, Action);\n\n/*:nodoc:*\n * ActionAppend#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionAppend.prototype.call = function (parser, namespace, values) {\n  var items = (namespace[this.dest] || []).slice();\n  items.push(values);\n  namespace.set(this.dest, items);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/argparse/lib/action/append.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/argparse/lib/action/append.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules/argparse/lib/action/append.js":"/*:nodoc:*\n * class ActionAppend\n *\n * This action stores a list, and appends each argument value to the list.\n * This is useful to allow an option to be specified multiple times.\n * This class inherided from [[Action]]\n *\n **/\n\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n/*:nodoc:*\n * new ActionAppend(options)\n * - options (object): options hash see [[Action.new]]\n *\n * Note: options.nargs should be optional for constants\n * and more then zero for other\n **/\nvar ActionAppend = module.exports = function ActionAppend(options) {\n  options = options || {};\n  if (this.nargs <= 0) {\n    throw new Error('nargs for append actions must be > 0; if arg ' +\n        'strings are not supplying the value to append, ' +\n        'the append const action may be more appropriate');\n  }\n  if (!!this.constant && this.nargs !== c.OPTIONAL) {\n    throw new Error('nargs must be OPTIONAL to supply const');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionAppend, Action);\n\n/*:nodoc:*\n * ActionAppend#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionAppend.prototype.call = function (parser, namespace, values) {\n  var items = (namespace[this.dest] || []).slice();\n  items.push(values);\n  namespace.set(this.dest, items);\n};\n"},"lineCount":54}},"error":null,"hash":"9c1145cad9c5323f91a830e213c437e1","cacheData":{"env":{}}}