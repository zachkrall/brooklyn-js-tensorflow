## BrooklynJS Talk Submission

**Talk Title:**
Manipulating the DOM in Real Time using Audio Signal Data


**Talk Description:**

Utilizing the Web Audio API, this project aims to generate real-time changes to the DOM based on the frequency analysis of an incoming audio signal.  Designed with the pairing of a  synthesizer or other direct input of an electronic device in mind, the Web Audio API (with assistance of the Wad.js library), analyzes the frequency (pitch) of an audio signal and returns the frequency (as a number) and note name (as a string).  These values are then assigned to different parameters of the DOM and styles, such as background color, image source retrieval, and others; and with these updates being done in very short time frames (<20 milliseconds), the effect is real-time rendering of visual elements synchronized to the music of the performer.


**Name**:
Daniel McKemie

**Pronouns**:
He/Him

**Twitter Handle (optional)**:
N/A

**Website (optional):**
https://www.danielmckemie.com
https://github.com/daniel-mckemie/audio-dom-manipulation (project discussed here)

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
September
November
January

,## BrooklynJS Talk Submission

**Talk Title:** Ejecting create-react-app: "There is no undo", and Other Lies I've Been Told.

**Talk Description:**  This investigative talk walks through the source code of react-scripts (the vehicle behind create-react-app's npm commands) in order to uncover the technical details of what exactly happens when you `npm run eject`. We'll conclude with a round-up of risks involved and possible failsafes of ejecting a CRA, and incidentally learn some advanced features of npm/node's architecture along the way.

After previously speaking at BrooklynJS in 2016, I'm excited to submit another talk for your consideration!

**Name**: Nick Palenchar

**Pronouns**: He/Him

**Twitter Handle (optional)** [palencharizard](https://twitter.com/palencharizard)

**Website (optional):** nickpalenchar.com

**Months Available to Speak:** September | October | November
,## BrooklynJS Talk Submission

**Talk Title:** define: 2016 - 2019.

**Talk Description:** this talk strays from my usual: instead of technical lessons and takeaways, I'll be talking about my personal journey as an independent creator of dataviz.  I'll be talking about past projects that have defined my data visualization styles, and future projects I'm excited about.

**Name**:  Shirley Wu

**Pronouns**: She/Her

**Twitter Handle (optional)**: @sxywu

**Website (optional):** sxywu.com

**Months Available to Speak:** September
,## BrooklynJS Talk Submission

**Talk Title:** A Lot of Languages are Pretty Much the Same

**Talk Description:** Ok, maybe not _all_ of them, and maybe not _basically_ the same, but there are a lot of features in common! Let's explore them using _General Language Syntax (GLS)_, a cute little experimental language that compiles a code description syntax into the equivalent language-specific code in C#, Java, JavaScript, Python, Ruby, and TypeScript.  

This talk will give an overview of how languages can seem the same on the surface but behave subtly differently on the inside.

Relevant repositories:
* [GLS](https://github.com/general-language-syntax/GLS)
* [GLS-Web-Client](https://github.com/general-language-syntax/GLS-Web-Client)
* [gls-cli](https://github.com/general-language-syntax/gls-cli)
* [CS-GLS](https://github.com/general-language-syntax/CS-GLS)
* [TS-GLS](https://github.com/general-language-syntax/TS-GLS)
* [NGLS](https://github.com/general-language-syntax/NGLS)

**Name**: Josh Goldberg

**Pronouns**: he/him

**Twitter Handle (optional)**: [JoshuaKGoldberg](https://twitter.com/JoshuaKGoldberg)

**Website (optional):** https://joshuakgoldberg.com/

**Months Available to Speak:** 
* September _(preferred)_
* October
* November,## BrooklynJS Talk Submission

**Talk Title:**
Please, everyone, put your entire development environment in Github

**Talk Description:**
I don't know about you, but I'm seriously tired of having to run through 15 README steps to setup a project only to find out that I have the wrong version of Python. Also, WHY DO I EVEN NEED PYTHON?!?

This is what it's like to setup a new project or framework. Developers have been stuck on this carousel of insanity for far too long. It's time to shut it off. Let's never configure another development environment ever again. Instead, lets put the entire thing in Github. I know that sounds like sarcasm, but it's actually for real. All you need is two text files. I'll show you how.

**Name**:
Burke Holland

**Twitter Handle (optional)**:
burkeholland

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

October 
,## BrooklynJS Talk Submission

**Talk Title:**
Server-sent Notifications using Stateful Serverless Functions

**Talk Description:**
HTTP is stateless. This is by design and that is what makes serverless great for modern day HTTP APIs. There's always a grey area -- imagine setting up a timer on your server to send a calendar notification after x number of days. At that point you want your HTTP request to _remember_ what time the notification should be sent out. Durable Serverless Functions are a new type of serverless functions that gives you the tools you need to make your APIs stateful.

**Name**:
Christian Nwamba

**Pronouns**:
He/Him

**Twitter Handle (optional)**:
@codebeast

**Website (optional):**
https://codebeast.xyz

**Months Available to Speak:** 
September
,## BrooklynJS Talk Submission

**Talk Title:**
Das I18n:  Performant, rich translation in React (To launch [Lemonade  🍋](https://www.lemonade.com/)  in 🇩🇪)

**Talk Description:**
At Lemonade, we wanted our new German users to have a delightful experience - but more importantly, a German one. To achieve this, we needed to create a translation mechanism that allowed us to mix plaintext translations with richer content like links or any other `JSX` components. Additionally, creating these dynamic translations on the fly can be expensive, so we took some steps to reduce performance pitfalls, and avoid `dangerouslySetInnerHTML`.

**Name**:
Itamar Kestenbaum

**Pronouns**:
he/him

**Twitter Handle (optional)**:
[@itamarok](https://twitter.com/itamarok)

**Website (optional):**

**Months Available to Speak:** 
August
,## BrooklynJS Talk Submission

**Talk Title**: Developing An Uncensorable Chat App/Intro to Blockchain

**Talk Description**: I'd like to share my experiences developing on the Ethereum blockchain network featuring an app that provides a platform, for individuals with less freedom of speech than ours, to communicate anonymously and without restrictions by utilizing blockchain's immutable properties.

**Name**: Alex Mok

**Pronouns**: He/Him

**Twitter Handle (optional)**:

**Website (optional):**

**Months Available to Speak:** August, September
,## BrooklynJS Talk Submission

**Talk Title:** React Hooks On A Presidential Website

**Talk Description:** We started using React Hooks for elizabethwarren.com when they were still in an alpha stage. I’d like to share our experience using hooks in production and give a brief introduction to how it changes the way you develop React components.

**Name**: Joe Kent

**Pronouns**: he/him

**Twitter Handle (optional)**: @itsjoekent

**Website (optional):** https://joekent.nyc

**Months Available to Speak:** August (Can’t commit to later months yet due to political cycle)
,**Talk Title:**

Lesson learned from localizing Todoist

**Talk Description:**

At [Doist](https://doist.com/), making our product available to the global audiences has always been a core mission as a global remote company.

So we have been localizing our product, [Todoist](https://todoist.com), since very early on, and it is now available in 18 languages. In this talk, we will share with you some lessons we learned when working with localization.

**Name**:
Steven Kao

**Pronouns**:
He/Him

**Months Available to Speak:** 
August,## BrooklynJS Talk Submission

**Talk Title:**
Building HOTLINE BLING with AWS

**Talk Description:**
This Drake-themed talk will go over the three AWS services used to build my IVR (Interactive Voice Response), what I learned along the way, takeaways, and a few other AWS services used at New York Times. This talk was inspired by NYT's new automated phone system for customer service that my team and I built this year. Many people are familiar with S3 cloud storage, but AWS offers a lot of software and services that power things like Slack, Alexa, messenger bots, etc.

Following the same process of building 1-800-NYTIMES customer service phone line, I will go over how I built an IVR where you call a number and have to complete the lyrics to Drake's Hotline Bling song to continue to the next prompt in the call flow. If all goes right with audio setup, I can demo it by calling the number.

![image](https://user-images.githubusercontent.com/8339031/61486614-dca96b80-a971-11e9-909f-0af10775ba41.png)

**Name**:
Jessie Wu
**Pronouns**:
She/her
**Twitter Handle (optional)**:
@jessie__wu
**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
Sept, Oct, Feb

,## BrooklynJS Talk Submission

**Talk Title:**
Accessibility beyond aria-label

**Talk Description:**
It's common knowledge that accessibility matters but when looking for content on how to build accessible web apps, it often gets restricted to things such as adding `aria-label` and `aria-hidden` to elements when in reality, we are building interfaces that are much more complex. In this talk, I present a few common UI elements and how to make them more accessible with proper semantics and some less known aria attributes.

**Name**:
Maria Clara

**Pronouns**:
she/her

**Twitter Handle (optional)**:
@olarclara

**Website (optional):**

**Months Available to Speak:**
Jul,## BrooklynJS Talk Submission

**Talk Title:**
Do search engines make good recommendations? 

**Talk Description:**
90% of your day is searching for information: how to get home, how to get to work, what podcast to listen to, who to curate into your twitter feed. If you are building a product that offers content, and your users need to find specific content, then you need to build a search engine.

But building an effective search engine that meets your users’ needs is not easy. When we search for something, we have expectations that the engine will help us find things that we want easily or help us stumble upon things that we like and didn’t know existed. 

I want to change the narrative of content discovery. I will enumerate problems search engines solve - and don’t solve - based on your content and users. I will discuss my personal experiences with search engines being abused as databases and used in contexts where curation would have yielded better results for users with lower engineering costs. You will learn how to develop product hypotheses when you don’t have insights into your users just yet.

**Name**:
Hannah Mimi

**Pronouns**:
she/her

**Twitter Handle (optional)**:
@hannahmimipark

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time! july, august, september
,## BrooklynJS Talk Submission

**Talk Title:**
Applying the Unix Philosophy: How to Write Code That Lasts in 2019

**Talk Description:**
How can we continue to apply the Unix philosophy of writing programs that do one thing well when we make APIs and SPAs with dozens of features? We identify the most reusable and composable aspects of our tools. We'll look at code that stands the test of time and give you tips to write some too.

The Unix philosophy of writing programs that do one thing well and are composable has left a lasting mark on computer science. Most of us use the command line every day. We try to write code that is modular, reusable, and simple. We understand that simple does not equal easy. We know that foundational components of the machines we use every day were written decades ago.

And yet: web development in the last fifteen years or so may feel to some like a possessed carousel spinning so fast that before you get familiar with one JS framework, it's getting thrown off the side in favor of the next.

I'll argue understanding essential JS, your code in general, and some of its strongest and most useful components will also help you create small and light pieces that compose and customize to your needs. Understanding a bit of the history of the command line tools we use every day will cement the understanding of how valuable these tenets are, and will give you a stronger appreciation of the gurus from the days of punchcards and room-sized mainframes that held less data than your watch. Let's learn some of their lessons, adapted for our modern age.

**Name**:
Marilyn C. Cole

**Pronouns**:
she/her/y'all

**Twitter Handle (optional)**:
[mmmarilyn](https://twitter.com/mmmarilyn)

**Website (optional):**
[https://mmmarilyn.net/](https://mmmarilyn.net/)

**Months Available to Speak:** 
July, August, September
,## BrooklynJS Talk Submission

**Talk Title:**
Double Your Salary With This One Simple Trick

**Talk Description:**
Five minutes, that’s how long the average salary negotiation lasts. This five minutes have an outsized impact on everything in your life from what you’re eating for dinner to where your kids go to college. In this talk, we’ll cover important tips and tricks for negotiating your salary at a new job. We’ll also cover some fundamentals about stock options and venture funding.

**Name**:
Matthew Gerstman

**Pronouns**:
he/him

**Twitter Handle (optional)**:
@MatthewGerstman

**Website (optional):**
matthewgerstman.com

**Months Available to Speak:** 
Jul, Aug, Sep
,## BrooklynJS Talk Submission

**Talk Title:**
Dynamic Positioning of React Components

**Talk Description:**
Would be a talk about the content in this article.
https://www.freecodecamp.org/news/self-positioning-react-components-2/
- This is a re-post from here --> https://hackernoon.com/self-positioning-react-components-7e5d99e9349f
**Name**:
Benjamin Schachter
**Pronouns**:
he/him
**Twitter Handle (optional)**:
benschac
**Website (optional):**
benjaminschachter.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
- I'm around whenever is best for y'all
,## BrooklynJS Talk Submission

**Talk Title:**
Dynamic Positioning of React Components

**Talk Description:**
Would be a talk about the content in this article.
https://www.freecodecamp.org/news/self-positioning-react-components-2/
- This is a re-post from here --> https://hackernoon.com/self-positioning-react-components-7e5d99e9349f
**Name**:
Benjamin Schachter
**Pronouns**:
he/him
**Twitter Handle (optional)**:
benschac
**Website (optional):**
benjaminschachter.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
- I'm around whenever is best for y'all
,## BrooklynJS Talk Submission

![spongebob](https://user-images.githubusercontent.com/7584833/59001913-765ff380-87de-11e9-8c51-4de46da16f53.jpg)

**Talk Title:** uSe THe PLaTfORm yOu cOWarDs

**Talk Description:** The Web is an imperfect and ever-evolving platform, and has been heavily influenced by frameworks like Dojo, MooTools, and jQuery. Frameworks can fill in the gaps where Web APIs fall short, and sometimes even point us toward the future of Web.

`document.querySelectorAll` was born out of jQuery, CSS Grid has a long lineage with roots in Microsoft Silverlight, and #smooshGate demonstrated how the advancement of Web APIs is inextricably linked to legacy frameworks deployed years ago.

Should we [build React into the browser?](https://twitter.com/seldo/status/1135150260425318400) Let’s explore the interplay between Web frameworks of today and Web APIs of tomorrow, and use the Web's history to make some predictions about how modern frameworks will make their way into the Web ~3.0~, ~4.0~, which version is this?

**Name**: Tara Vancil

**Pronouns**: she/her

**Twitter Handle (optional)**: [twitter.com/taravancil](https://twitter.com/taravancil)

**Website (optional):** [taravancil.com](https://taravancil.com)

**Months Available to Speak:** June, July, August,## BrooklynJS Talk Submission

**Talk Title**: p5.js - Creative coding with kids

**Talk Description**: I want to share with the collaboration between the NYC Dept of Ed and Processing Foundation has yielded in the #CSforAll program in Brooklyn and beyond.

**Name**: Saber Khan

**Pronouns**: he/him they/them

**Twitter Handle (optional)**: @ed_saber

**Website (optional):** edsaber.info

**Months Available to Speak:** June, July, August.
,## BrooklynJS Talk Submission

**Hot Reload... for your entire stack**

**Talk Description**
One of js's key strengths is velocity. It's easy to hit save and see the page update. This is so important that new tools that make js more powerful and complicated also have to keep reload quick (webpack, typescript, babel).

But what if your backend isn't js? Or what if you update `package.json`, but forget to run `npm install`? Or what if you use containers and fast compiles are swamped by slow image builds?

You deserve Hot Reload for your entire stack. And it's possible.

I'll show Hot Reload in all the components of a demo app that includes js in the browser, a python frontend, and a go backend.

**Name**
Dan Bentley

**Pronouns**
He/Him

**Twitter Handle (optional)**:
@dbentley

**Months Available to Speak:**
June, July, August,## BrooklynJS Talk Submission

**Talk Title:**

ezeerust: Assembly in WebAssembly in the browser

**Talk Description:**

[Zeerust] is an emulator for the [Z80] I wrote in Rust while at Recurse center. After I finished it, I realised that probably nobody was ever going to run it again, some random rust binary. But if I made it a webapp, maybe I could get people to play with it!

Rust can compile to WebAssembly, so I set out to make a frontend for it. I found a project called [yew], which let me write a React-style frontend entirely in Rust, making communication with my emulator easy! The finished emulator lives at [zeerust.stillinbeta.com,ezeerust].

In this talk, I'll discuss the trials of doing pure-web assembly development, how I went about deploying it, and what the development loop likes with in Rust. 

[zeerust]: https://github.com/stillinbeta/zeerust
[Z80]: https://en.wikipedia.org/wiki/Zilog_Z80
[yew]: https://docs.rs/yew/0.6.0/yew/index.html
[ezeerust]: https://zeerust.stillinbeta.com

**Name**: Liz Frost

**Pronouns**: she/her

**Twitter Handle (optional)**: [@stillinbeta](https://stillinbeta.com)

**Website (optional):** [stillinbeta.com](https://stillinbeta.com)

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
June, July, August,## BrooklynJS Talk Submission

**Talk Title:**
Getting Out of The Tar Pit

**Talk Description:**
In this talk I will present brief overview of chapters 1-7 of a seminal paper by Moseley and Marks "Out of The Tar Pit" (2006).
Every day we, as software developers, deal with code which can he hard to maintain, prone to bugs, and difficult to reason about. As an embedded software developer I faced exactly those problems, maybe even more exagerrated by the specifics of firmware engineering.

For me reading "Out of The Tar Pit" proved to be an eye opening experience and allowed me to become a better developer, who is conscious about many faces of code complexities and effective maintenance of stateful code.
This paper gave names to things my gut feeling was telling me were wrong, classified them, explained why they are bad, and provided guidance on how to keep them in check.

**Name**:
Wojciech Migda

**Pronouns**:
He/him/his

**Twitter Handle (optional)**:

**Website (optional):**
www.linkedin.com/in/WojciechMigda
www.github.com/WojciechMigda

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
July, August
(slight preferrence towards August due to jetlag)
,## BrooklynJS Talk Submission

**Talk Title:** blokdots – A New Hardware Prototyping Tool

**Talk Description:** Nowadays, products with electronic features are being used in every part of our lives. Like all products, these need to be tested as well. When designing them, this is where it comes to electrical engineering and programming – skills not all designers and product developers possess. However, especially in the early stages of product development, it is important to test if an idea works. 

[blokdots](http://blokdots.com) is solving this problem by providing a professional but at the same time easy-to-use tool for physical prototyping, that supports designers during all stages of development.

**Name**: Olivier Brückner

**Pronouns**: He / him / his

**Twitter Handle (optional)**: @olivierbrcknr

**Website (optional):** https://olivierbrueckner.de/ — https://blokdots.com/

**Months Available to Speak:** In NY from the 15th to the 21st of June, so only this would work for me,## BrooklynJS Talk Submission

**Talk Title: Test Flakiness - Methods for identifying and dealing with flaky tests**

**Talk Description: Understand what test flakiness is, the impact it has, and how to overcome it.**

**Name**: Jason Palmer

**Pronouns**: He/him

**Twitter Handle (optional)**: palmerj3

**Website (optional):**

**Months Available to Speak:** June, July, August.
,## BrooklynJS Talk Submission

**Talk Title:**
Intuitive APIs with TypeScript

**Talk Description:**
TypeScript is great for writing safe code, but honestly who wants to write a bunch of boilerplate type code in like every other file. There's gotta be a way to get nice autocomplete and type info WITHOUT totally changing how we write code, right?? (spoiler alert: yes) This talk will explore how we can use TypeScript features like [intersections](https://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types) and [generics](https://www.typescriptlang.org/docs/handbook/generics.html) alongside more general programming patterns to make really nifty APIs ✨.

**Name**:
Jake Lazaroff

**Pronouns**:
he/him

**Twitter Handle (optional)**:
jlazaroff

**Website (optional):**
[jake.nyc](https://jake.nyc)

**Months Available to Speak:**
June/July/August
,## BrooklynJS Talk Submission

**Talk Title:** Networking: What you don't need to know as a developer, but probably should.

**Talk Description:** As frontend (and even backend) developers, we really only need to concern ourselves with the Application Layer (layer 7 of the OSI model and where HTTP resides). But what goes on at the lower layers, particularly those involved with routing and transport is fascinating and helps us have a greater understanding of how the web works. It's how we're able to serve a website to the world, hit an API, and even pair program with our boss.

**Major topics:**
- What's a network?
- Routing
- MAC addresses and IP addresses
- DNS
- TCP vs UDP
- Ping

**Minor, fun topics:**

- Duplexing

**Name**: Jacob Haff

**Pronouns**: He, Him, His

**Twitter Handle (optional)**:

**Website (optional):**

**Months Available to Speak:** May, June,## BrooklynJS Talk Submission

**Talk Title:**
Mentoring the way to a diverse and inclusive workplace

**Talk Description:**
Often, the endeavors of hiring and mentoring junior engineers and of bolstering diversity and inclusion efforts are seen as “nice to haves” at best and “extraneous” (or even “impossible”!) at worst. But in reality, building diversity and inclusivity and fostering the ability to incorporate junior engineers go hand-in-hand. Engineering teams should approach each of these efforts in service of the other.

Together, we'll articulate the value of investing in mentorship efforts in terms of their impact on the ability to attract and retain diversity. You will walk away with a clearer understanding of the connection between the two efforts, and ideas for incorporating mentorship and D&I processes at your place of work.

**Name**:
Alex Millatmal

**Pronouns**:
she/her

**Twitter Handle (optional)**:
[@halfghaninNE](https://twitter.com/halfghaninNE)

**Website (optional):**
[alexandramillatmal.com](https://www.alexandramillatmal.com/)

**Months Available to Speak:** May and July, '19 (May preferred).
,## BrooklynJS Talk Submission

**Talk Title:**
_Learning from the Perspective of a Teacher and Engineer_

**Talk Description:**
The saying, “Those who can, do; those who can't, teach”, is pretty off. Great developers are able to understand concepts well enough to share their knowledge with others effectively. The Web is an ever-expanding piece of technology, and we will have to adapt by learning more and more new tools that can enhance experiences for users. We will constantly be living between feeling like we know nothing and feeling like we know everything there is to know. However, every so often we will come across tools that we have been able to master. Along with a feeling of accomplishment, we may want to share that knowledge with others. This talk will explain the science around learning, tools for getting the most out of our learning, and how we can empower others to learn from and with us.

**Name**: Prince Wilson

**Pronouns**: He/Him

**Twitter Handle (optional)**: @maxcell

~**Website (optional):**~

**Months Available to Speak:** May,## BrooklynJS Talk Submission

**Talk Title:** The Future of Open Source

**Talk Description:** Just 20 years ago, the term "open source" didn't even exist. The majority of industry software was sold in binary form, and the idea of building a business by giving away source code for free was inconceivable when the richest man in the world, Bill Gates, had built his business, Microsoft, on selling proprietary software. But 20 years later, "[open,1] [source,2] [has,3] [won,4]": the majority of the tech industry runs on open source software, and even Microsoft has joined the movement, [acquiring,5] and contributing to the largest open source development platform in the world!

[1]: https://www.wired.com/2016/08/open-source-won-now/
[2]: https://www.computerworld.com/article/3144063/open-source-has-won-and-microsoft-has-surrendered.html
[3]: https://www.zdnet.com/article/linux-and-open-source-have-won-get-over-it/
[4]: https://osjournal.com/open-source-has-won-now-it-needs-to-remain-vigilant-299/
[5]: https://blogs.microsoft.com/blog/2018/06/04/microsoft-github-empowering-developers/

But if open source has won, do we still need an open source movement? How can we, as a community, grapple with the challenges of sustainable development practices and ethical use of freely released software? In this talk, I'll ponder some of these questions, and propose a vision for the future of the open source software community.

Note: I am a Director on the Open Source Initiative's Board. However, this talk is proposed in a personal capacity, and I do not speak on behalf of the OSI.

**Name**: Elana Hashman

**Pronouns**: she/her

**Twitter Handle (optional)**: @ehashdn

**Website (optional):** https://hashman.ca

**Months Available to Speak:** May 2019,## BrooklynJS Talk Submission

**Talk Title:**
Writing Javascript in Haskell!

**Talk Description:**
Haskellers can be pretty smug about our language of choice, but this quickly stops when you ask us how we write applications for a web browser. In fact, there's a page on the Haskell wiki imaginatively titled [The JavaScript Problem](https://wiki.haskell.org/The_JavaScript_Problem) that catalogues different approaches. Ideally we would be able to write Haskell, magic would happen, and it would run on the browser with no further effort from us.

In this talk I'll discuss the good (and bad) reasons we have for wanting this, some of the progress we've made towards this goal, and what we have to look forward to!

**Name**:
Vaibhav Sagar

**Pronouns**:
he/him

**Twitter Handle (optional)**:
vbhvsgr

**Website (optional):**
https://vaibhavsagar.com

**Months Available to Speak:**
June, July, August, onwards :smile: ,## BrooklynJS Talk Submission

**Talk Title:** 
Songmap: exploring a star map of songs

**Talk Description:** 
What would it be like to traverse a star map of songs? Clusters of stars could signify genres, or similar artists or albums. Directions could beckon you towards  more energetic, danceable music, or slower, calmer tracks; depth could take you across genre. This is a problem that inspired me to start coding years ago, and I've recently returned to it and [built a prototype](http://thesongmap.herokuapp.com) using the **Spotify API** and **three.js**. 

In this talk, I will demo the songmap, and introduce attendees to three.js, working with the Spotify API, and designing a creative UX to visualize and explore music listening preferences. I'll also emphasize the journey and failures in building this, and the iterative steps that took me from a wanna-be coder to the final product.

**Name**: 
Max Pekarsky

**Pronouns**: 
he/him

**Twitter Handle (optional)**: 
maxverse

**Website (optional):**
https://www.maximpekarsky.com
You can see a prototype at http://thesongmap.herokuapp.com/ (**NOTE:** _you'll need a premium Spotify subscription to access this. First, open your Spotify desktop app and play any track. Then, Songmap will be able to play songs through your app_ )

**Months Available to Speak:** May, June, July '19,## BrooklynJS Talk Submission

**Talk Title:**
Painless End To End Testing with Cypress

**Talk Description:**
Testing is hard! But it could be fun! 
End to end testing could help us to test applications with the way users will interact. But there are challenges making it's hard to implement in practical development cycle:  1) it's complicated to setup, configure and integrate to CI/CD 2) Tests are flaky and painful to debug or maintain. 3) it takes long time to run all tests, etc. Fortunately, we now have Cypress, a faster, easier and reliable testing framework. By using Cypress, E2E testing can reduce time from 1 hour to 4 minutes and it's easy to integrated into CI/CD. 
In this talk, I will talk about good features/ limitations of Cypress and some tricks to make it faster and robust. 

**Name**: 
Yuanyuan Li

**Pronouns**:
She/Her

**Twitter Handle (optional)**:
@yl2577

**Website (optional):**
https://yuanyuanli.net/

**Months Available to Speak:**
May/July/Aug,## BrooklynJS Talk Submission

**Talk Title:**
Game Development with Phaser

**Talk Description:**
My experience with simple game development using the JavaScript framework Phaser: implementing simple physics and a level/room rendering and design system.
Here's the basic game prototype I made a while ago which I would soup up for the talk if I was chosen: https://mattconn.dev/phaser-js-game/

**Name**:
Matthew Connelly

**Pronouns**:
He/Him

**Twitter Handle (optional)**:
mattconndev

**Website (optional):**
https://mattconn.dev/

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
April, May, June
,## BrooklynJS Talk Submission

**Talk Title:**
Using audio for making habitats

**Talk Description:**
Architecture has often been used as a background for creating and experiencing music. This project looks to invert that relationship by using audio to create virtual 3D environments. Using VR these environments can be experienced as if one was inhabiting the environment.
The process of going from audio signals to a 3D environment involves deconstructing the audio into numbers which can be used as an input into parametric algorithms for creating 3D forms. Often the inspiration for such designs has been to express a relationship between an environment and other abstract concepts, supported by engineering and design to make the environments habitable and functional.
The ephermal medium of virtual environments remove the shackles of real world and allow for more experimental habitats and enjoyable experiences. The demo application explores a few such concepts by exposing parametric relationships established in architectural design but augmenting them to react to music in real time creating a dynamic music driven world.
Demo: [http://lotusaudio.herokuapp.com/](http://lotusaudio.herokuapp.com/)

**Name**:
Amit Nambiar

**Pronouns**:
He/Him

**Twitter Handle (optional)**:

**Website (optional):**
[https://amitnambiar.com](https://amitnambiar.com)
[http://lotusaudio.herokuapp.com/](http://lotusaudio.herokuapp.com/)

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
April/May,## BrooklynJS Talk Submission

**Talk Title:** TBD (ideas below)

- The Magic of Generative Testing
- Let The System Write The Tests: Property Testing Basics

**Talk Description:** Property testing, aka generative testing, is an alternative to unit testing. Instead of manually specifying input and output cases, the developer specifies laws (aka properties) that should hold for _all_ expected input types. The system then **generates** many random inputs, **verifies** if the property holds in all cases, and **simplifies** failing inputs to find error boundaries. This talk will demonstrate the power, ease, and flexibility of property testing in JS.

**Name**: Gabriel Lebec

**Pronouns**: he/him

**Twitter Handle (optional)**: g_lebec

**Website (optional):** https://github.com/glebec

**Months Available to Speak:** April, May, June (or later)
,## BrooklynJS Talk Submission

**Talk Title:**
You can program Quantum Computers in JavaScript!

**Talk Description:**
In a few labs around the world, the next generation of computers - based on qubits - are being designed and connected to the internet. If it's connected to the internet, we must be able to program it in JavaScript! I'm not a physicist, so I'll do a high-level overview of what quantum computers might be useful for, then present [Quail](https://github.com/mapmeld/quantum-quail#quantum-quail), a TypeScript module which I've written to generate quantum assembly code for the three leading quantum cloud services: IBM, Rigetti, and Microsoft. Demo will send code to a real quantum computer.

**Name**:
Nick Doiron

**Pronouns**:
He/him

**Twitter Handle (optional)**:
@mapmeld

**Months Available to Speak:**

April, and after that I will be out of NYC for a while :(,## BrooklynJS Talk Submission

**Talk Title:**
Let's code a Virtual DOM library from scratch!!

**Talk Description:**
The virtual DOM is the beating heart of many modern frontend frameworks today. While the concept of how it works is straightforward, the only way to understand it is to build one! During this talk, I will live code a tiny lightweight VDOM library from scratch and explore the idea and concepts behind is.

**Name**:
Nir Kaufman

**Pronouns**:

**Twitter Handle (optional)**:
@nirkaufman

**Website (optional):**

**Months Available to Speak:** 
March, April, Most of June,## BrooklynJS Talk Submission

**Talk Title:**
Building your own Snapshot Testing Suite

**Talk Description:**
Snapshot testing is one of the best ways to ensure that your UI doesn't change unexpectedly but is often considered only as an afterthought. Complaints of its difficultly to implement, manage, and maintain abound, despite its usefulness in ensuring that unrelated updates don't inadvertently change the UI. Despite its benefits, most people ignore snapshot testing completely and the few who don't simply outsource it. In this talk I'll go over how to build your own snapshot testing suite that can easily be integrated into your CI/CD pipeline.

**Name**:
Samuel Bernheim 

**Pronouns**:
He/Him

**Twitter Handle (optional)**:
N/A

**Website (optional):**
[sambernheim.tech](sambernheim.tech)

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
April, May,## BrooklynJS Talk Submission

**Talk Title:**
This Is Your Code On Concerns :fried_egg:

**Talk Description:**
Microservices architectures are ridiculous until they're not. Teams grow; repos expand; dependencies multiply; contracts blur---at a certain point, the need to do one thing in several places becomes both too valuable and too expensive for copy-paste coding. What's worse, the evolution of tooling beyond `npm link` keeps bringing that point closer and closer to `git init`.

Through a discussion of two React/Redux codebases and a live coding example, I'd like to talk about the messiest part of adopting microservices: making judgment calls about the boundaries between concerns. I'd like to describe the product-oriented approach my team evolved for divvying up the responsibilities of our libraries and services, and how componentization with React and modularization with Webpack and Node made it possible to move past concerning ourselves with the stack.

Rachael Leigh Cook's fabulous 1997 _This Is Your Brain On Drugs_ PSA furnishes a title and a framing device. If accepted, you have my solemn promise that my talk will not involve wreckin' up the joint.

**Name**:
Daniel P. Shannon

**Pronouns**:
He/Him

**Twitter Handle (optional)**:
[`@phyllisstein`](https://twitter.com/phyllisstein)

**Website (optional):**
TK

**Months Available to Speak:**
April/May/June,## BrooklynJS Talk Submission

**Talk Title:**

onClick={wat}

**Talk Description:**

What actually happens (under the hood) when you assign a an event handler to a component in React? A breakdown of Native vs Synthetic events and why/when that even matters.

**Name**:

Drew Wyatt

**Pronouns**:

he/him

**Twitter Handle (optional)**:

[@djwyatt](https://twitter.com/djwyatt)

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

March/April/May
,## BrooklynJS Talk Submission

**Talk Title:**  Dreaming To Doing: How to Level up  in Life & Tech 

**Talk Description:**   From S.M.A.R.T. Goals to productive hacks.
The same way we build systems at work is how we should think about achieving the goals we have in or hobbies we have.   The process is more important than the goal and we should look at how building good habits will make you 1% better each day. In this talk I'll talk about how creating better systems for ourselves will allow you to focus on improving skills that result in you becoming who you want in life and tech. 

**Name**: Rushaine McBean

**Twitter Handle (optional)**: @copasetickid  

**Months Available to Speak:** March, May

_We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!_
,## BrooklynJS Talk Submission

**Talk Title:**
2FA, TOTP, WTF?!

**Talk Description:**
You may recognize Two-factor Authentication (2FA) as an additional safeguard for protecting accounts, but do you really know how it works? This talk will show you how to implement Time-based One Time Passwords (TOTP) and explain what's happening under the hood of those expiring tokens. You'll learn the different approaches to implementing 2FA and have a better understanding of what's right for your application.

**Name**:
Kelley Robinson

**Pronouns**:
she/her/hers

**Twitter Handle (optional)**:
[@kelleyrobinson](https://twitter.com/kelleyrobinson)

**Website (optional):**
https://www.krobinson.me/

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
March, April
,## BrooklynJS Talk Submission

**Talk Title:**
Keeping 100% Lighthouse score around the world

**Talk Description:**
Performance is crucial to designing a delightful user experience. Yet even products with a 100% Lighthouse score often fall short in some regions of the world. You can determine your performance worldwide by measuring field data with Real User Monitoring (RUM) via Perfume.js. In this talk we’ll study how we use Perfume.js at Coinbase to maximize our performance around the globe.  

**Name**:
Leonardo Zizzamia

**Pronouns**:
He/Him

**Twitter Handle (optional)**:
https://twitter.com/zizzamia

**Website (optional):**
https://medium.com/@zizzamia

**Months Available to Speak:**
I'll be visiting NYC in April between the 14th and 18th :-) 
,## BrooklynJS Talk Submission

**Talk Title:**
Getting Hooked on React

**Talk Description:**
In this talk we will get a quick look at one of React's newest feature React Hooks! 

**Name**:
Philllip Troutman
**Pronouns**:
he 
**Twitter Handle (optional)**:
_Troutman_
**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
-February (following months are TBD),## BrooklynJS Talk Submission

**Talk Title:**
GraphQL: To Apollo or Not

**Talk Description:**
The basic advantages of using GraphQL are plain to see. But how do you move an existing application across and what decisions are made?

Our company builds a widely used customer facing website. We have made the decision to migrate to a GraphQL interface. We shall present a case study of our initial migration, the decisions, the discoveries and arguments for and against GraphQL. When you have an existing revenue generating product you have to justify technology change. We will present our case and describe what technologies we choose and why.

**Name**:
Karan Vohra
Glenn Hinks

**Months Available to Speak:** 
All,## BrooklynJS Talk Submission

**Talk Title:** React Hooks for React Users

**Talk Description:**

React Hooks, which have generated a ton of excitement and conversation on Twitter the past few weeks/months, are here, in 16.8, out today! So I guess it's time I went out and learned what they are, and started understanding how to use them.

I plan to cover an introduction to Hooks, particularly from the point of view of someone who's familiar with existing react paradigms, and how you might start using them, replace existing tools, or what potentially new things they'd enable that existing options for things like lifecycle and state management didn't.

**Name**: James Socol

**Pronouns**: he/him

**Twitter Handle (optional)**: [@jamessocol](https://twitter.com/jamessocol)

**Website (optional):** https://jamessocol.com

**Months Available to Speak:** February, March, April
,## BrooklynJS Talk Submission

**Talk Title:** Will you be writing code in your browser in the future?

**Talk Description:**

A new generation of online developer tools aims to replace your IDE with a web app. Are they succeeding? Will these tools be "VSCode in your browser," or will a more diverse set of tools emerge? We will compare specialized and general-purpose development environments in the browser for use today, and look at upcoming libraries and browser technology that might make these tools better in the future. I will also preview some of my work to build a more diverse set of coding tools in the browser.

**Name**: Wylie Conlon

**Pronouns**: He/Him

**Twitter Handle (optional)**: wylieconlon

**Website (optional):** [wylie.su](http://wylie.su)

**Months Available to Speak:** February/March/April,## BrooklynJS Talk Submission

**Talk Title:**
Data Visualization in React that doesn't require D3.js (React-Vis and Chart.js)

**Talk Description:**

It's no secret that React and D3.js don't play well together when you're looking for user interaction and animation in your data visualization. I want to give a talk about how to easily do your first data visualization based on using React-Vis and Chart.js.

I understand that Tanner stopped by last year to give a talk on Chart.js based on the suggested PR that popped up when I wrote this. I would be giving more of a practitioner perspective of issues I faced rendering charts using 3rd party API's, building a full stack application and alternatives to using React lifecycle methods to re-render charts if you're working with real-time data or want users to change charts inside of a single-page app.

**Name**:

Jay Bhagat

**Pronouns**:

He/Him

**Twitter Handle (optional)**:

@JayBhagat24

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

February and March
,## BrooklynJS Talk Submission

**Talk Title:** : The Weekender: Unofficial HD Remaster

**Talk Description:**  Originally released in 2011, the Weekender website is one of the MTA's few official works using the iconic Massimo Vignelli map from the 1970s, and a brilliant digital adaptation of the subway system's classic wayfinding sign system, but it's now showing its age as technologies have evolved quickly and users' expectations of digital experiences become ever more sophisticated. In this unofficial "HD remaster," civic technologist Lou Huang shows how a digital product can stay relevant, useful, and beautiful with steady refinement and upgrades to adapt to changing requirements over long periods of time.

**Name**: Lou Huang

**Pronouns**: he/him

**Twitter Handle (optional)**: saikofish (optional)

**Website (optional):** https://weekender.netlify.com/

**Months Available to Speak:** February but also possibly flexible,## BrooklynJS Talk Submission

**Talk Title:**
Santa Tracker showcase 🎅🎯

**Talk Description:**
Every year, Google's Web DevRel team builds and releases Santa Tracker, a holiday-themed experience for all of Dec, and which primarily features tracking Santa on the 24th. This talk will showcase some history, how we build it, interesting learnings, and where Santa is going in the future (maybe... to your house to deliver presents!).

Santa is a huge single-page application built with Web Components, with heaps of historic HTML/JS, served to millions+ of users, and is going through [a tricky rewrite](https://dev.to/chromiumdev/the-gift-of-giving-up-1lgl). 

**Name**:
Sam Thorogoood

**Pronouns**:
He / Him

**Twitter Handle (optional)**:
@samthor

**Website (optional):**
https://whistlr.info

**Months Available to Speak:**
Jan 17th only
,## BrooklynJS Talk Submission

**Talk Title:**
Using the Web Audio API to Augment Live Performance

**Talk Description:**
Based on an article I wrote and published on Medium, I would like to describe and demonstrate my work on building a digital, browser based replica of a Tape Delay Feedback System; all written in JavaScript, using the Web Audio and Web MIDI APIs.

**Name**: 
Daniel McKemie

**Pronouns**:
He/Him

**Twitter Handle (optional)**:

**Website (optional):**
https://www.danielmckemie.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
January, February, March, April
,## BrooklynJS Talk Submission

**Talk Title:**
How to Perform Better Code Reviews

**Talk Description:**
Linus' Law states that "given enough eyeballs, all bugs are shallow".  But what happens when those eyeballs don't know what to look for?  Akin to a chain being only as strong as the weakest link, a development team is only as effective as their weakest reviewer.
 
We've all had less than ideal reviews on our code.  Some reviewers only focus on nitpicking formatting and syntax.  Others will point out problems without any explanation or suggested alternatives.  And of course, we all know that one developer who will always give a good to go, regardless of the quality of the code.  
 
In this talk, we will collectively perform a code review together.   Moving beyond easy to catch nits around as formatting nits and variable naming, we will take a rigorous look to understand how the code can be improved on a deeper level.  We will analyze the tests to ensure that they are sufficient while looking for ways to improve their quality, look for opportunities to refactor, and scan for edge cases and logical errors.  While doing all of this, we will manners in which to effectively communicate questions and feedback.

**Name**:
Shaun Carland

**Preferred Pronouns**:
He/Him/His

**Twitter Handle (optional)**:

**Website (optional):**
shauncarland.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
February/March/April
,## BrooklynJS Talk Submission

**Talk Title:**
Return of the Script Tag

**Talk Description:**
For the last decade we've been fighting the use of script tags, bundling our code to reduce the number of assets we need to download from the server, hoping all the while to avoid the dreaded limit of 6 simultaneous downloads from a single domain. But times have changed and with the widespread adoption of HTTP/2 and native ES6 browser modules it's time we re-embraced our script tags, load all our source files individually giving us the freedom to cast off those fragile front end build systems and really leverage browser caching to it's fullest.

**Name**:
Paul Heasley / @phdesign

**Preferred Pronouns**:
He / Him

**Twitter Handle (optional)**:
[@pheasley](https://twitter.com/@pheasley)

**Website (optional):**
http://phdesign.com.au

**Months Available to Speak:** 
January, February, March and onwards...
,My talk evolved a little bit. Still mostly the same idea... just less about pseudo elements and more about handling iconography in UI.,## BrooklynJS Talk Submission

**Talk Title:** Deno a new JavaScript runtime

**Talk Description:** I will give an introduction to Deno: https://deno.land/

**Name**: Ryan Dahl

**Preferred Pronouns**: He

**Twitter Handle (optional)**:

**Website (optional):** https://tinyclouds.org

**Months Available to Speak:** January 17
,## BrooklynJS Talk Submission

**Talk Title:**
How to read GLSL code for JavaScript Developers

**Talk Description:**
GLSL is a shader language that can send instructions to the graphics card. It is a performant way to render 3D graphics and primitive shapes and you can even run it in a browser via WebGL! This talk will teach folks how to read GLSL so they can copy and paste the relevant parts for their WebGL projects.

**Name**:
Amy Cheng

**Preferred Pronouns**:
she/her

**Twitter Handle (optional)**:
@am3thyst

**Months Available to Speak:** 
December
January
February
,## BrooklynJS Talk Submission

**Talk Title:** Solved With Pseudo Elements

**Talk Description:** Unleash the power of pseudo elements to build complex UI without relying on images or JavaScript. Content will be similar to this CSS Tricks post, but updated for 2018: https://css-tricks.com/pseudo-element-roundup/

**Name**: Cory Etzkorn

**Preferred Pronouns**: He / Him

**Twitter Handle (optional)**: coryetzkorn

**Website (optional):** https://www.coryetzkorn.com/

**Months Available to Speak:** Dec 2018, Jan 2019, Feb 2019
,## BrooklynJS Talk Submission

**Talk Title:** How to (Mostly) Maintain your Sanity as a Front-end Engineer

**Talk Description:**
The JavaScript ecosystem, _e.g._ the language itself, libraries, packages, frameworks, etc, seem to evolve at a lightning pace. It’s practically impossible to stay up to date on every single new feature, and it seems like there’s a new hot framework or library every few months, _e.g._ TypeScript, MobX, Next.js, Prisma, Hooks, Suspense, etc. This talk’s thesis is that you don’t actually have to stay up to date. On the other hand, the goal isn’t to become front-end ostriches, _i.e._ bury our heads in the sand and ignore every new feature. Rather, we can try to cultivate a balanced approach to continuously learning about the ecosystem, and thoughtfully adopting specific features.

I'll share the system I’ve developed to determine what’s worth learning at a surface level, and what is worth learning deeply; resources to actually learn a topic; and how to play catch up when needed. I’ll also talk briefly about strategies for adopting newer features in production codebases at work.

**Name**: Saimon Sharif

**Preferred Pronouns**: He / Him

**Twitter Handle (optional)**: saimonsharif

**Website (optional):**

**Months Available to Speak:** December 2018, January 2019, February 2019,## BrooklynJS Talk Submission

**Talk Title:** Building SpaceCraft: A Real-Time, Collaborative REPL

**Talk Description:**  SpaceCraft is an open-source, real-time, collaborative REPL (Read-Eval-Print-Loop) that allows users to write and execute code in the browser. Currently supported languages are Ruby, JavaScript, and Python.

The goal of this project is to provide a tool which developers can use to easily experiment with a programming language while removing the burden of downloading and configuring the languages on their local machine.

In this talk, I will present our team's project and discuss the many challenges we faced, along with the solutions we engineered to address them. The topics my presentation will touch upon include:
- Multi-user collaboration on the same REPL
- Client-server communication with HTTP vs. WebSockets
- Pseudo-terminals
- Security and containers with Docker
- Reverse proxies to connect users to our application

**Name**: Ying Chyi Gooi

**Preferred Pronouns**: He

**Twitter Handle (optional)**: @yingcgooi

**Website (optional):** https://github.com/spacecraft-repl/SpaceCraft

**Months Available to Speak:** December 2018, January 2019 and February 2019
,## BrooklynJS Talk Submission

**Talk Title:**
How To Open Source Your Body

**Talk Description:**
An educational tutorial / post mortem of sorts describing the process of 3d scanning my body, turning that into a web accessible format, and then distributing myself through the npm ecosystem as the package "manny". I will also probably touch on my background in web based art and how developer tools can be used creatively.

**Name**:
Manny404

**Preferred Pronouns**:
He/Him

**Twitter Handle (optional)**:
@mannynotfound

**Website (optional):**
http://art404.com
http://mannynotfound.github.io/


**Months Available to Speak:** Maybe December depending on date but definitely January, February, March
,very indebted to willman for making BrooklynJS what it is. and very excited for Justin to be an official part of things!,,we really should get this up-to-date for BrooklynJS's birthday this THU. @brianloveswords, can you take an hour to get this in order by THU so we can go through it a boroughgramming?,## BrooklynJS Talk Submission

**Talk Title:**
Community Building as Self Care 

**Talk Description:**
How can we take better care of our communities and ourselves?  Everyday, we participate in so many communities, whether it be work, family life, social circles, shared interest groups, or even just the local neighborhood coffee shop.  Our needs are filled by these interdependent bonds, and as such, taking care of ourselves and our communities is one and the same question.  This talk goes into how we can build a greater sense of belonging and ownership in our communities as a means for self-care, and what that specifically can look like in our tech communities.

**Name**: 
Gwendolyn Weston

**Preferred Pronouns**:
 she/her

**Twitter Handle (optional)**: 
purpleyay

**Website (optional):** 
gwendolyn.io

**Months Available to Speak:** ~November, December, January~ April, May, June,## BrooklynJS Talk Submission

**Talk Title:**  DevTools just got a DVR!

**Talk Description:**

The year is 1999 and DVR, a magical device that gives you the power to pause and rewind live TV, was just released. You can now get a snack, rewind, and not miss a thing. 

This past summer, Firefox landed the ability to record and replay tabs in Nightly, which lets you rewind in real-time and jump to console messages. I can’t wait to share it with you!

**Name**: Jason Laster

**Preferred Pronouns**:  He/Him

**Twitter Handle (optional)**: jasonlaster11

**Months Available to Speak:** November, December, January. We're trying to figure out our MVP and it'd be great to get feedback.
,## BrooklynJS Talk Submission

**Talk Title:**
JS in relation to life

**Talk Description:**
The basis is this: a satire related to modern day JS. I will predominantly relate modern day problems/politics with the ecosystem of JS. The focus will be on encapsulating how the community of JS and code can be a catalyst for global change in the politics/problems of society in general but in a subtle way.

**Name**:
Jerry Muzsik

**Preferred Pronouns**:
He/Him

**Twitter Handle (optional)**:

**Website (optional):**
Check out some of my past medium posts to get a feel for my voice:
https://medium.com/@muzsik33

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
November (I will be in South America December and many months afterward) - I have been in NYC for a while, been to Brooklyn JS the past 6 or so months straight,## BrooklynJS Talk Submission

**Talk Title:**
Single source of truth: How I tried to write docs and built a compiler instead

**Talk Description:**
It all started out so innocently. I just wanted a way to easily document our new Atomic CSS library at work. But the more I thought about the docs, the more I realized I could do if I was just able to capture that naming convention in code. Over the course of two years I slowly worked on building an ecosystem of tools powered by a single config that could do everything from generating docs, to generating CSS, to filtering out old unused code and way more.

This talk is about the power of naming conventions, the delightful wonder that are config files and my journey from barely knowing how to write a console.log() to kinda building a compiler, all because this idea was so juicy and so exciting that I couldn't let it go.

**Name**: Kilian McMahon

**Preferred Pronouns**: He/Him

**Twitter Handle (optional)**: [kilmc](https://twitter.com/kilmc)

**Website (optional):** [kilmc.com](http://kilmc.com)

**Months Available to Speak:** November, January, February
,## BrooklynJS Talk Submission

**Talk Title:** Software Evolution and Other People's Ideas

**Talk Description:** How to make changes to a running (model of) a microservices-based architecture without breaking it (probably) and how taking care of other people's ideas is crucial to software evolution.

**Name**: Johnicholas Hines

**Preferred Pronouns**: he/him

**Twitter Handle (optional)**: @johnicholas

**Website (optional):** www.johnicholas.com

**Months Available to Speak:** November, December, January
,## BrooklynJS Talk Submission

**Talk Title:** Building Open Source Communities

**Talk Description:**

```
We talk about community a lot in open source. Communities can make or break any open source project.

There are some common traits–universal lessons that can be taken from working with open source communities–that any open source community can benefit from understanding and approaching thoughtfully.

So what are common traits amongst successful–and not so successful–communities? How can you begin to apply the lessons others have learned, instead of re-inventing the wheel? Most importantly, how can you help ensure _your_ community is successful?
```

**Name**: Tierney Cyren

**Preferred Pronouns**: He/Him

**Twitter Handle (optional)**: @bitandbang

**Months Available to Speak:** November, December, January, Feburary,## BrooklynJS Talk Submission

**Talk Title:** Sure, Buy a Drill Press

**Talk Description:** A look at drilling 55 holes in my MacBook Pro just to fix the keyboard, what I learned about the global supply chain, and why you should consider metalwork as a hobby.

**Name**: Phil Calvin

**Preferred Pronouns**: he/him/his

**Twitter Handle (optional)**: pnc

**Website (optional):** https://philcalvin.com

**Months Available to Speak:** November, January, February,Fixes emoji in speaker info and stops not lining up by setting a line height.

Before (Chrome):

![image](https://user-images.githubusercontent.com/607807/47237519-598cc200-d3ad-11e8-8142-0c6d98e00c9b.png)

After (Chrome):

![image](https://user-images.githubusercontent.com/607807/47237533-627d9380-d3ad-11e8-87e5-faef2756c37c.png)

Before (Firefox):

![image](https://user-images.githubusercontent.com/607807/47237580-91940500-d3ad-11e8-8e51-35490370c653.png)

After (Firefox):

![image](https://user-images.githubusercontent.com/607807/47237599-9ce73080-d3ad-11e8-929a-49e40f88012a.png)
,## BrooklynJS Talk Submission

**Talk Title:**

Spook your friends with Electron 👻 

**Talk Description:**

In the spirit of halloween, I'll be showing the wild learning/exploring process of building an electron app that simulates a cracked screen. It involves finding out how to make a fullscreen always-on-top electron app running in the background (and its limitations), attempting to figure out how to generate cracked LCD patterns (if that fails or I give up have image fallpacks), and then setting a timer so that it isn't obvious.

To be clear, I haven't built it yet, I am just typing up a talk idea on the subway, but since I have a bit of free time between job interviews, I can work on this over the next week. The end result will be open source on GitHub. 

(PS if accepted, this is my first time I have spoken at any BoroJS meetup in NYC, and fun fact, also the first tech talk I've given outside of a _cough_ my little pony convention this year! I also live in Philly, so travel assistance would be nice.)

**Name**:

Melody Starling

**Twitter Handle (optional)**:

https://mobile.twitter.com/pixelyunicorn

**Website (optional):**

https://melody.cool/

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

It makes the most sense to do it in October

- October 2018
- November 2018
,## BrooklynJS Talk Submission

**Talk Title:**
Beyond `animation: fadeIn .2s`: Building Non-Trivial Layout Transitions for the Web

**Talk Description:**
Thoughtful UI transitions can be surprisingly difficult to implement once you want to augment or move beyond the capabilities of CSS. JavaScript libraries that seem like they might help you implement complex animations can end up revealing limitations in real-world situations.

I'll focus on two React libraries that I think do a good job of lowering the barrier to entry by simplifying the process of creating advanced transitions: [React-Pose](https://popmotion.io/pose/) and my own project [React-Flip-Toolkit](https://github.com/aholachek/react-flip-toolkit). While my focus will be on React, the challenges posed and solutions discussed should be somewhat relevant irrespective of framework.

The final part of my talk will walk through implementing a practical example using `React-Flip-Toolkit`, probably using a condensed version of [this presentation](https://alex.holachek.com/rft-tutorial).

**Name**:
Alex Holachek

**Website (optional):**
https://alex.holachek.com/

**Months Available to Speak:** 
November
December
January
,Reverts #507 (with some conflict fixing), restoring the site to "normal",## BrooklynJS Talk Submission

**Talk Title:**

CRDT: conflict-free data types for collaborative editing and offline-first

**Talk Description:**

What technologies could replace GraphQL in the future? How can we mix ideas from Redux and long-standing ideas from the 80s to make the better user experience for our web applications?

I will show how forgotten ideas from the 80s can improve UX of simple ToDo app right now and make the Internet more accessible for next billion users.

**Name**:

Andrey Sitnik

**Twitter Handle (optional)**:

[@sitnikcode](http://twitter.com/sitnikcode)

**Months Available to Speak:**

* October
* November
* December
,## BrooklynJS Talk Submission

**Talk Title:** The Federation Needs You

**Talk Description:** Some social commentary on the potential benefits we (as developers, designers and users) can bring to the [federated Web](https://indieweb.org/federation) and why for those more aligned to social communication issues may want to step in _now_.

**Name**: I go by Jacky.

**Twitter Handle (optional)**: https://twitter.com/jackyalcine but I use [Mastodon](http://playvicious.social/@jalcine) more often.

**Website (optional):** https://jacky.wtf

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

- October 2018
- March 2019
- April 2019
,## BrooklynJS Talk Submission

**Talk Title:**
Spooky Action at a Distance

**Talk Description:**
One of the hardest challenges with working in an older codebase is dealing with invisible dependencies between components. CSS rules and event handlers are particularly notorious for this; every developer has horror stories of some seemingly innocuous stylesheet changes breaking their site, or impossibly tangled event handler spaghetti. Many of the "trendiest" libraries promise to solve these specific problems for us (e.g. CSS-in-JS, Redux, MobX). This is no coincidence, as CSS and event handlers fundamentally share the same problem: they create many-to-many indirect relationships between otherwise unconnected components. Likewise, the solutions share similar properties -- they make the implicit relationships explicit, and prevent common causes of conflict.

This talk is a literal horror story: a tale of "refactoring" a haunted house filled with spirits who behave like JavaScript event handlers, and the mayhem that ensues when their order is disturbed. I discover the "spells" that have conjured these ghosts, and realize that they are not malevolent, per se; much like some CSS rules and event handlers, they just respond poorly to changes in their environment. In the process of taming these ghosts, I discuss the theory of indirection and its problems outlined above, and how I can uses the principles espoused by trendy javascript libraries to live in harmony with my spectral companions.

**Name**:
Justin Falcone

**Twitter Handle (optional)**:
modernserf

**Website (optional):**
https://justinfalcone.com/

**Months Available to Speak:** 
**Ideally** October, since this is a "spooky" talk, but also November, December
,Hello, 

I noticed the link to the EmpireJS website was broken; it was linking to http://brooklynjs.com/empirejs.org.,Take all the stuff away and tell people we won't be doing our thing this month,my second talk at Brooklyn JS. I'm excited! :D 

## BrooklynJS Talk Submission

**Talk Title:**
The Goldmine of thi.ng/umbrella

**Talk Description:**
With [thi.ng/umbrella](https://github.com/thi-ng/umbrella) [Karsten Schmidt](https://twitter.com/toxi) single-handedly implemented most of the functional ecosystem in Typescript with mouthwatering code quality and documentation. Go read some of the [code](https://github.com/thi-ng/umbrella/blob/master/examples/crypto-chart/src/index.ts#L13), it's as beautiful as it is terse and functional. In this talk we'll compare a few example apps with current approaches in frontend development. We'll talk about hiccup vs jsx, async await & resolving promises.

Side-note: I'm not some promoter, just a fan of his amazing work.

**Name**: Dennis Heihoff

**Twitter Handle (optional)**: https://twitter.com/denik

**Website (optional):** https://duct.cloud

**Months Available to Speak:** 
September (preferred), October, maybe November
,## BrooklynJS Talk Submission

**Talk Title:** 
Creating an In-Browser Database with JavaScript

**Talk Description:**
For most web applications, Internet access is taken for granted. Of course, this means that when applications lose their connection, they lose almost all functionality and user experience.

"Offline-first" or "offline-ready" is a paradigm that seeks to maintain functionality for applications, even when clients are offline for extended periods.

The primary challenge is storing data on clients, particularly for applications that feature lots of data and collaboration between users. Data changes have to be synchronized between clients and a remote server, and conflicts have to be resolved.

More specifically, this talk will cover:
- In-browser options for persistent data storage
- Writing a Promise-based wrapper to work with the asynchronous IndexedDB API
- Tracking JSON document changes in a tree data structure
- Synchronizing database changes to a MongoDB backend over HTTP
- How to handle conflicting changes between users
- Using existing libraries to make your applications offline-first

Throughout the talk, I will draw on my experience working on [turtleDB](https://turtle-db.github.io/), an offline-first framework written in JS, to discuss these challenges.

I have a slide presentation ready and can email on request.

**Name**:
Andrew Houston-Floyd

**Website (optional):**
https://www.linkedin.com/in/andrew-houston-floyd/
https://turtle-db.github.io/ (project website)

**Months Available to Speak:** 
September, October, November
,## BrooklynJS Talk Submission

**Talk Title:**
Post-Hardcore JavaScript

**Talk Description:**
In this talk I walk through how I made this interactive article, [The D-I-Y Data of Fugazi](https://mathisonian.github.io/diy-data-fugazi/). I can speak to the design process for this particular piece and talk more broadly about the landscape of tools available for creating fun web things that combine words, data, graphics, and interactivity.

@willmanduffy [suggested](https://twitter.com/willmanduffy/status/1031600028723421184) this would be a topic of interest, and I'm happy to tailor to what the bk.js audience will find most interesting.

**Name**: Matthew Conlen

**Twitter Handle (optional)**: [mathisonian](https://twitter.com/mathisonian)

**Website (optional):** https://mathisonian.com/

**Months Available to Speak:** September, or some vague month in the future. I'm west coast-based so its slightly tricky, but will definitely be around for September 3rd Thursday, and travel to NYC relatively frequently. ,## BrooklynJS Talk Submission

**Talk Title:** gluing webassembly and javascript together

**Talk Description:**

There are a lot of WebAssembly guides focused on writing libraries in [some language Not Javascript] and ending up with a bundle of JavaScript that you can call from your browser or Node and it *just works* and you might never know WebAssembly was involved unless you peeked at the source files. While this is actual literal magic, it leaves a lot unexplained, and this mystery left me hesitant to try WebAssembly until I figured out what the magic compilers were doing and why.

This talk is about the boundary region between a blob of WebAssembly bytecode and the Javascript environment that calls it. Specifically:
* a quick summary of WABT, the [web assembly binary toolkit](https://github.com/WebAssembly/wabt)
* how WebAssembly exports functions for Javascript to call
* how WebAssembly imports and calls foreign functions
* what data WebAssembly can and can't represent
* what data can be shared across WebAssembly and Javascript environments
* how to represent complex structs in allocated memory
* how to deal with strings
* an example that wraps all of that ^^ together

In other words, I'm going to talk about all the glue code that a programmer needs to implement for WebAssembly to be conveniently usable, which should help explain what the magic bundlers are doing behind the scenes.

**Name**: Jesse Kipp

**Twitter Handle (optional)**: @toomanybees

**Website (optional):** toomanybees.com

**Months Available to Speak:** September, November, December
,## BrooklynJS Talk Submission

**Talk Title:**
Organizing Code for Cross-Platform Web and Mobile Development

**Talk Description:**
For teams that deliver code for the web, android, and iOS, we want to avoid writing all of our logic three times, in three different languages, across three different platforms. We will share how our team was successful in developing features of our platform that realized 70% business logic code re-use between web and mobile and even more re-use between Android and iOS. We will discuss the motivations for when it is right to code-share, how to organize your React and React-Native code and build configurations to accomplish code sharing, and how we approach integrating React components into native Android and iOS app.

**Name**:
Robert (Bob) Scarano

**Twitter Handle (optional)**:
@scarano

**Website (optional):**
squarespace.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
August, September, October,## BrooklynJS Talk Submission

**Talk Title:**
Ask your dumb question

**Talk Description:**
Have you ever been in a situation where you didn’t ask a tech question at work because you were scared people would think it was dumb? 
In this talk we’ll examine how many of us may hold an unhealthy idea of what the perfect developer is and how this ideas can cause us to devalue ourselves and hinder our abilities to perform our jobs. We’ll explore together how we can foster a culture of psychological safety that can lead to healthier team dynamics and more productivity.

**Name**:
Zainab Ebrahimi

**Twitter Handle (optional)**:
zainab3brahimi

**Months Available to Speak:** 
August 2018
September 2018
October 2018,## BrooklynJS Talk Submission

**Talk Title:**
What We're Doing When We're In a Daily Standup

**Talk Description:**
Every day, many of us get together with our teammates and talk about what we did yesterday and what we're doing today. If you're in a standup, there's a good chance, you're waiting on your turn to talk, tuning out other people, and trying to actually remember what you did yesterday. These 10 minutes can make or break your day. And with a few added techniques, you can start looking forward to your standup as much as you look forward to your first cup of coffee of the day.

This talk will cover the intention behind the daily standup, ways to ensure you're communicating well with your teammates, and wacky ideas to get the rest of your team connecting better in your standup.

**Name**:
Dan Ubilla

**Twitter Handle (optional)**:
dubilla

**Website (optional):**
www.danubilla.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
August, September, December,## BrooklynJS Talk Submission

**Talk Title:** Building a peer-to-peer video game with WebRTC!

**Talk Description:** While WebRTC has been around for a few years, most people only know it as technology that powers voice or video chat, or _maybe_ something seen once in a file transfer demo. But it turns out it's also a great technology for building multiplayer networked browser games, without involving a central server!

This talk includes a _very_ quick introduction to what WebRTC is, some code snippets showing how to establish peer to peer data connections, a very small proof of concept demo, and then a larger demo of a work in progress game (currently online at http://sledgehammer.surge.sh/).

**Name**: Thomas Boyt

**Website (optional):** https://thomasboyt.com & https://disco.zone

**Months Available to Speak:** August, September, and October are all free for me.
,## BrooklynJS Talk Submission

**Talk Title:**

Adventures in Ethical Computing

**Talk Description:**


Machine learning algorithms can infer gender when translating from gender neutral languages to english due to bias in training data.

Hardware designed to control airbag release have resulted in the deaths of Short-stature drivers and children passengers due to bias.

An engineer from Volkswagen was recently sentenced to a 40 month prison term for their part in producing software that cheated at emissions tests for diesel automobiles.

You are responsible for the software and hardware you help to create. Ethically responsible, and potentially legally responsible. Through an examination of academic literature and case studies this talk will discuss the types of bias that can enter into the systems that we manufacture, and suggest ways that we can avoid bias to create better user experiences (and avoid jail time).

**Name**:

Myles Borins

**Twitter Handle (optional)**:

@MylesBorins

**Website (optional):**

https://mylesborins.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

August, Sept, Oct,## BrooklynJS Talk Submission

**Talk Title:** Improving Lighthouse Scores for Your React Apps

**Talk Description:** This talk walks through Chrome's Lighthouse performance monitoring tool, and how it applies to React apps. Lighthouse scores are a great proxy for user experience, high scores mean users see “fast” and low scores mean users see “slow”. We'll dissect reports for a few apps, explain how to tackle each recommendation in a React world, and talk about how to reach the golden 90+ score for maximal user delight.

**Name**: Kurt Mackey (I'm submitting on his behalf :))

**Twitter Handle (optional)**: @mrkurt

**Website (optional):** n/a

**Months Available to Speak:** August, September, October

Thanks! ,**Talk Title**:
An Introduction to Building Decentralized Systems (with a case study)

**Talk Description**:
"Decentralized file storage systems solve multiple problems inherent in a centralized storage service, related to data security, data privacy, user anonymity, and even data availability.

With great interest in p2p decentralized systems such as Storj, IPFS, and Sia, a team of three developers built Layr: a decentralized file storage system built atop the Kademlia DHT that enforces data retrievability and provides a cryptocurrency-based incentive.

This talk covers the following:
1. A comparison of the core principles of decentralized and centralized systems.
2. An explanation of the core challenges encountered in decentralized systems related to:
- Efficient peer lookup and routing
- Efficiently distributing data loads
- Ensuring cooperation without central authorities with incentives
- How incentive-based transactions can be engineered with smart contracts
- Ensuring data integrity and availability in a network of untrusted peers
- And how these become more difficult when you can't trust peers to be regularly connected, non-malicious, or even in possession of powerful devices and high bandwidth.
3. A walkthrough of the iterative development process of Layr, in which I describe:
- How we went from an extremely simple proof of concept prototype to a sophisticated network of nodes
- Why data integrity is a problem and how we solved it
- Why privacy is a problem and how we solved it
- Why cooperation is a problem and how we solved it
- Why large files are a problem and how we solved it


**Name:**
Wilfred Tannr Allard
**Twitter Handle (optional):**
TannrAllard
**Website (optional):**
www.tannrallard.tech
**Months Available to Speak:**
- August
- September
- October,This PR removes Jenn from "Find an Event Staff" list on CoC page.
Thank you Jenn for helping us keep great community for the past 2.5 years🙏,## BrooklynJS Talk Submission

**Talk Title:** Details on details

**Talk Description:** 
In GitHub our JavaScript team thinks about "what more can we do without JavaScript" a lot. We strive to use as little JavaScript as possible so we can make sure the JavaScript we do _need_ performs the best. 

This is where `<details>` comes in. In this talk I'll cover how we came to start using `<details>` from HTML 5.1, what we use `<details>` for, and how with just a few tricks `<details>` can be very powerful.

**Name**: Mu-An Chiou

**Twitter Handle (optional)**: @muanchiou

**Website (optional):** https://muan.co

**Months Available to Speak:** July/August/September,,## BrooklynJS Talk Submission

**Talk Title:**
Making Self-Generating Hip Hop using JavaScript

**Talk Description:**
Ready to take your hip hop career to the next level and simultaneously apply some of those JavaScript skills at the same time?  Using a little mixture of markov chains, basic music theory and JavaScript you can let your computer generate some beats and grooves for all of your sick verses.

In this talk, I'd like to bring some of the concepts I've written [a few blog posts about](https://www.omardelarosa.com/posts/markov-chain-rhythms.html) into JavaScript and expand on how they can be done perhaps in even a live coding context without too many lines of code required.

**Name**: 
Omar Delarosa

**Twitter Handle (optional)**: 
@omardelarosa

**Website (optional):** 
https://http://omardelarosa.com/

**Months Available to Speak:** 
July, August, September
,## BrooklynJS Talk Submission

**Talk Title:** 
SMAAAASH!! Generating Earthbound's SNES data from JavaScript

**Talk Description:**
The Super Nintendo is humanity's greatest video game console, an accomplishment achieved by being the only system worthy of playing the greatest video game of all time, Earthbound. 

In this talk, I'd like to go over a project I've been working on for a couple of years, [Earthbound-Battle-Backgrounds-JS](https://github.com/gjtorikian/Earthbound-Battle-Backgrounds-JS), which reads SNES cartridge data and generates content in a `canvas`. 

**Name**:
Garen Torikian

**Twitter Handle (optional)**:
@gjtorikian

**Website (optional):**

**Months Available to Speak:** July, August, September 
,## BrooklynJS Talk Submission

**Talk Title:** Babel: Beyond the Repository

**Talk Description:**

There might come a point where you look (back) and you realize you are a maintainer.
There might also be a point where you look beyond the project to understand it's place within the ecosystem.
Let's explore viewing a project not just as infrastructure for a specific app or company but it's role in the language, ecosystem, and open source itself.

**Name**: Henry Zhu

**Twitter Handle (optional)**: [@left_pad](https://twitter.com/left_pad)

**Website (optional):** https://www.henryzoo.com/

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

June, Sept, not sure

> Looks like it's been 2 years since my meetup first talk!,## BrooklynJS Talk Submission

**Talk Title:**
Mind-controlling the Web

**Talk Description:**
What comes after the keyboard and the mouse? More advanced interfaces that allow more effective communication between human and machines, specifically those that tap into the brain. So, let's plug in the human brain to the browser and build a better web. 

The human body is an ocean of electricity. Billions of neurons are constantly engaging as our thoughts go from one state to the next. Come see how we can tap into this data generated by human cells in JavaScript, and how to get started in the NeuroTech community. 

**Name**:
Alex Castillo

**Twitter Handle (optional)**:
castillo__io

**Website (optional):**
https://castillo.io

**Months Available to Speak:** September, October, November
,## BrooklynJS Talk Submission

**Talk Title:**
A Map of the JavaScript Ecosystem

**Talk Description:**
Module bundlers! Package managers! Superscripts! Polyfills! Frameworks galore! A multitude of JavaScript-based frameworks and tools make up the “JavaScript ecosystem”. This talk groups the tools into a taxonomy, based on what problem each tool is trying to solve and the tool's approach to solving the problem. Armed with this map of the JS ecosystem, front-end enthusiasts of all levels should be less overwhelmed by the ever-expanding landscape of modern front-end development.

**Name**:
Sarah Lohmeier

**Twitter Handle (optional)**:
@slohmes

**Website (optional):**
https://slohmes.wordpress.com/

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
June,## BrooklynJS Talk Submission

**Talk Title:** Creating an effective and inclusive technical interview process

**Talk Description:**

An empathetic and effective interview process impacts not only the growth of an organization, but also its health, diversity, and the values that its members come to adopt as their operating principles. Yet the industry is rife with interview practices that are remnants of an older time--frameworks that are seldom effective, usually exclusionary to minorities (or those with a non-traditional background), but have somehow become the norm.

In this talk, I'll first explore some common technical interview practices that are ineffective and exclusionary. Then, by stepping through the interview process, I'll give you actionable advice on how to adapt and improve your technical interviews at each stage.

**Name**: Arshia

**Twitter Handle (optional)**: [@arshia__](https://twitter.com/arshia__)

**Website (optional):** [arshiamufti.com/about](https://arshiamufti.com/about)

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

June, July
,## BrooklynJS Talk Submission

**Talk Title:**
Designer to CTO in less than two months!

**Talk Description:**
I founded a company called @TokenTax being a product designer and wound up being the most technical one of the founders (I'm okay but meh). I'll walk the audience through going from 0 to building a tech company in two months or less. I'll talk about how we managed to stay afloat, how we managed to hire great people, and how we managed to scale to meet the demand.

**Name**:
Alex Miles

**Twitter Handle (optional)**:
@milesalex

**Website (optional):**
https://tokentax.us

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
June-July-August!
,First, the website for this meetup is awesome.

Second, I just noticed this:

![image](https://user-images.githubusercontent.com/64050/39495226-7dd8d42c-4d67-11e8-9b34-da1a36ca1042.png)

Devtools suggests some CORS issue:

![image](https://user-images.githubusercontent.com/64050/39495247-884e2970-4d67-11e8-9358-1d41eb8c15da.png)

I think you'd want to also [enable SSL for GitHub Pages](https://help.github.com/articles/securing-your-github-pages-site-with-https/#enforcing-https-for-your-github-pages-site) since this is not a custom domain.,## BrooklynJS Talk Submission

**Talk Title:** 
CSS Custom Properties: What Do They Know? Do They Know Things?? Let's Find Out!

**Talk Description:** 
This is one of those CSS features that always seemed like it would be great to have in the year 3000. Turns out the year 3000 is now. CSS Custom Properties are available now and have been for some time. They aren't variables as you're used to, they're their own thing. And they're somethin' else. In this talk we'll look at what they are, what they aren't, day-to-day usage examples, how to feature detect for them, and wrap up with a future-facing, super neato example. This talk will be light on JS, but heavy on way cool CSS.

**Name**: 
Tyler Gaw

**Twitter Handle**: 
[@tylergaw](https://twitter.com/tylergaw)

**Website:** 
https://tylergaw.com

**Months Available to Speak:** 
May, June, July
,## BrooklynJS Talk Submission

**Talk Title:** 
Restoring our privacy in a time of none

**Talk Description:**
Privacy is coming to the forefront of national conversation (again) and many non-EU sites are discovering late in the game they need to comply with the EU privacy laws like the GDPR - or block all EU traffic. California is pondering similar laws, Canada might follow Europe’s approach and the ad industry scrambles to adapt.

We are all responsible for the state of internet privacy. Whether you are adding “_that one line of JavaScript_” as requested by the marketing team, or the Instagram embed in your article. We are allowing our visitors (which includes us too) to be tracked across the internet in ways we don’t know about or very often can’t explain.

This talk will have code, approaches, strategies, and simple low level ways in which we as developers can ethically and actively minimize and stop the exploitation of our users.

**Name**: 
Michael Donohoe

**Twitter Handle (optional)**: 
[@donohoe](https://twitter.com/donohoe)

**Website (optional):** 
https://donohoe.io

**Months Available to Speak:** 
June, August, Sept of this year, and Dec 2028
,## BrooklynJS Talk Submission

**Talk Title:**
I'm afraid your browser has been talking to the robots again

**Talk Description:**

The browser’s capabilities have snuck up on us over the years, and it’s turned into a full blown operating system! "But wait," I hear you protest, "it’s not like the browser can talk to stuff I have plugged in to my USB ports!". Ah! But it can!

The new WebUSB spec has arrived, and is already supported in at least one browser today. The previous hacks of connecting browsers to robots and other hardware will soon be a thing of the past. WebUSB as a first class API citizen opens up some great opportunities to create new and delightful experiences with robotics.

I’ll introduce you to the WebUSB API, its history, and compare it to previous ’hacks’ to demonstrate why this is such a big deal for you, as a web developer. There will be hardware shown ~IRL~ ready to inspire you to think outside of the box of what browsers are really meant to be used for.

**Name**:
Suz Hinton

**Twitter Handle (optional)**:
@noopkat

**Website (optional):**
noopkat.com

**Months Available to Speak:** 
May 🌷 
,## BrooklynJS Talk Submission

**Talk Title:**
Building Layr: A p2p decentralized file storage system designed for retrievability, with a cryptocurrency-based incentive scheme

**Talk Description:**
"Decentralized file storage systems solve multiple problems inherent in a centralized storage service. Namely, a decentralized system does not take for granted that a data host is inherently trustworthy, available, or resistant to failure.

With great interest in p2p decentralized systems such as Storj, IPFS, and Sia, a team of three developers took a month and a half to build Layr: a decentralized file storage system built atop the Kademlia DHT that enforces data retrievability and provides a cryptocurrency-based incentive.

In the course of building Layr, we encountered many technical and system-design challenges. For example, how does a decentralized system logically distribute and locate files? How does a decentralized system decouple file retrievability from failures on the part of the node hosting that file? How does a decentralized system detect and respond to data loss or corruption to maintain the file's retrievability? How do we provide incentive to encourage ethical behavior of all parties involved? How do we do all of this in a no-trust environment? In this presentation you will learn how we used techniques such as file sharding, proofs of retrievability, cryptocurrency-based transactions and contracts, and extending the Kademlia protocol to solve some of those problems.

**Name**:
Wilfred Tannr Allard
**Twitter Handle (optional)**:
TannrAllard
**Website (optional):**
www.tannrallard.tech
**Months Available to Speak:** 

All of May
All of June

,## BrooklynJS Talk Submission

**Talk Title:** 

End to End Testing With Cypress vs. Selenium

**Talk Description:**

Ever written an end-to-end test for a website? 
It’s hard! 

The current go-to tool for these tests is Selenium. It lets you issue commands to your browser to automate any actions a user might take - which is awesome! Unfortunately, it’s not the most robust system. Selenium tests can be extremely flakey, slow, and hard to debug. 

But now there’s a new kid on the block: Cypress! It’s an open source tool that takes a different approach in hopes of making end-to-end testing faster, friendlier, and more reliable. 

In this talk, I’ll dive deeper into the differences between Cypress and Selenium, such as time travel debugging, live reloading, and automatic waiting. Through this exploration, I hope to show off how fun and easy end to end testing can be! 😍

**Name**: Harold Treen

**Twitter Handle (optional)**: @haroldtreen

**Website (optional):** https://haroldtreen.com

**Months Available to Speak:** May, June, July
,Talk Title: From "Hello, world" to The World's Best Crossword Maker in 8 weeks

Talk Description: I write crosswords for the New York Times. But crossword software sucks. It's clumsy, slow, and expensive. So I taught myself JS and built Phil, the World's Best Crossword Maker, in 8 weeks. It's fast, fun and free. This is how I did it.

(Topics: JavaScript, WebAssembly, Python, Google, web scraping, data analysis, SAT solvers, logic)

Name: Keiran King

Twitter Handle (optional): keiranwking

Website (optional): keiranking.com/phil

Months Available to Speak: May, June, July 2018,## BrooklynJS Talk Submission

**Talk Title:** WebGL2: World Beyond the Triangle 

**Talk Description:** This roller-coaster ride through the WebGL pipeline teaches you everything you'll need to know to venture beyond the boring "hello, world" of points and triangles, into bountiful and beautifully illuminated worlds. Along the way you'll discover the wondrous new features of WebGL2 that will likely unlock your secret desires to explore... the *third* dimension.

**Name**: Earle Castledine

**Twitter Handle (optional)**: @mrspeaker

**Website (optional):** https://www.mrspeaker.net/

**Months Available to Speak:** April... but maybe whatever the month after that is too.
,## BrooklynJS Talk Submission

**Never write styles again - Building components that style themselves**

**Talk Description:**
If I move a `<Headline />` into a `<Panel />`, I expect it's font size to adjust. If I move a `<CallToAction />` into a different section on a marketing site, I expect it's colors to adjust. That's always been cumbersome in React, requiring the developer to thread through styles.

No more! Chameleon JS is a set of tools that allows you to build components that style themselves. Components are styled with the help of a style context, and that style context is updated using a style reducer. The result: when you move a `<Button />` into a `<Panel />`, the context it receives changes, and it knows to style itself differently. You can focus on only writing business logic - never write styles again.

I'd love to share this library that I'm working on :)

**Name**: Robert Balicki

**Twitter Handle (optional)**: statisticsftw

**Website (optional):** https://www.chameleonjs.com/

**Months Available to Speak:** All of them, in general,## BrooklynJS Talk Submission

**Talk Title:** Building Fictional Worlds in Javascript: How I built a text adventure game in React.

**Talk Description:**  When I set out to build a game in JavaScript, I expected that I might learn a few new things about browser APIs. Instead I learned how to create my own game engine in React and develop a framework for choosing new libraries, all while having fun creating an immersive game.

**Name**:  Nick Beattie

**Twitter Handle (optional)**:  nicktweattie

**Website (optional):**  nickbytes.com

**Months Available to Speak:** April, May, June
,## BrooklynJS Talk Submission

**Talk Title:**

Scaling Visualization for Large Data Sets with WebGL

**Talk Description:**

Creating legible, effective, and performant visualizations of large datasets is notoriously difficult in both design and implementation. Yet in an increasingly data-driven world, visualization practitioners frequently need to tackle this challenge. As the data scales, designers and developers must find novel methods to reduce visual complexity and optimize rendering.

Recently at Datadog we were faced with the challenge of scaling our visualization of customers’ deployed infrastructure, a component of our mission-critical monitoring product. Some customers have tens of thousands of hosts reporting data, and there’s no perfect way to aggregate them in an overview. Furthermore, browser rendering technologies start to degrade when rendering tens of thousands of elements. We needed to find a solution that would scale with our customers, especially as we added support for containerized infrastructure.

In this talk, I’ll recount our journey of leveraging WebGL to scale beyond what d3 and SVG could handle. The talk will be partly technical and partly design-oriented, with enough real-world lessons learned to engage any audience member. I’ll explain how to decide if WebGL rendering makes sense for your visualization, describe the pitfalls we encountered and how to overcome them, and how we ultimately found success incorporating this new and challenging technology into our large, rapidly-evolving frontend codebase.

**Name**:

Mark Hintz

**Twitter Handle (optional)**:

`@MarkHintz`

**Months Available to Speak:**

March, April, May
,## BrooklynJS Talk Submission

**Talk Title:** Developing a Language Teacher with Natural Language Processing

**Talk Description:** In November I started learning Esperanto on Duolingo. I wondered, could I write a Natural Language Processing script that could help teach me the language and correct my mistakes?

In a talk based on my blog posts (parts [1](https://medium.com/@mapmeld/esperanto-nlp-part-1-generating-text-with-tensorflow-f498180ad6bf), [2](https://medium.com/@mapmeld/esperanto-nlp-part-2-finishing-sentences-4f0f15e91b82), [3](https://medium.com/@mapmeld/esperanto-nlp-part-3-correcting-grammar-6d34f93bded1))  I will show how to build a TensorFlow model which makes realtime corrections to my typing in the browser, and found errors which I fixed on Esperanto Wikipedia.

JavaScript parts: scraping Wikipedia text, passing text data between the browser and the TensorFlow model on the server, building a custom text input to type Esperanto, highlight errors, and make suggested changes

**Name**: Nick Doiron

**Twitter Handle (optional)**: mapmeld

**Months Available to Speak:**  March or April,## BrooklynJS Talk Submission

**Talk Title:** UI Design for engineers who are scared of design, but have to do it anyway

**Talk Description:**
Most of us have found ourselves, at some point in time, building a UI without the help of a designer. Maybe you're short-staffed at work, or you're spinning up your own personal project. Never fear! Your friendly neighborhood UX Engineer is here with some practical advice for how to leverage established patterns and libraries to build effective UIs on the web. I'll also touch on some common traps that engineers fall into when designing UIs and how to avoid them.

**Name**: Grace Kwan

**Website (optional):** https://medium.com/@gckwan

**Months Available to Speak:** August,Finally got around to updatin’ that budget.,## BrooklynJS Talk Submission

**Talk Title:**
Unlock the Power of JavaScript Decorators

**Talk Description:**
Decorators are powerful but sometimes misunderstood language features of JavaScript. 
In this session you will learn what decorators are, why they are used, and how take advantage of them in practice. We will explore the use of decorators in libraries, and how to create our own decorators.

**Name**:
Nir kaufman

**Twitter Handle (optional)**:
@nirkaufman

**Website (optional):**

**Months Available to Speak:** 
February, March, April,## BrooklynJS Talk Submission

**Talk Title:**
Developer Privilege & How To Use It

**Talk Description:**
Devs are in huge demand, and there's huge crossover between tech and pretty much all other industries. This puts us in a really lucky position to work on stuff we care about and often on products we believe in without sacrificing much pay (especially straight white men). Don't be miserable in what you do if you don't have to be.

With that privilege, we also have an obligation to improve the industry for everyone. Will provide ways to do this (at work, in the community etc...)

**Name**:
Adam Pirani

**Twitter Handle**:
https://twitter.com/aplikesbikes

**Months Available to Speak:** 
March/April/May,## BrooklynJS Talk Submission

**Talk Title:**
SaaS: Shitposting as a Service

**Talk Description:**
This is a talk about shitposting, programming, and love! I'll show you how to transform your images and gifs with glitter crowns and laser eyes by using some geometry and a few handy APIs. You'll leave being able to show your friends you care with artisanal pics of their faces in a ham (or other vegan options)!
![brianjbrennan](https://user-images.githubusercontent.com/2334514/35655871-2eb7bd22-06c2-11e8-8562-239b46aac7fd.gif)

**Name**: Samantha Goldstein

**Twitter Handle (optional)**:
@samantha_gold

**Website (optional):**
http://samanthagoldste.in

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
Feb/March! 
,## BrooklynJS Talk Submission

**Talk Title:**

Building a Modern CMS with Apollo, Emotion, Draft and Redraft

**Talk Description:**

Building UIs has never been easier - and with tools like React, Apollo, and GraphQL, interacting with data has never been more pleasant for front end devs. DraftJS and Redraft make managing and rendering content painless across your web and native apps, and in the editing experience within your CMS. This talk will walk you through this data flow, and show you how to share components and styles using a modern CSS-in-JS toolkit like Emotion.

**Name**:

Scott Taylor

**Twitter Handle (optional)**:

@wonderboymusic

**Website (optional):**

https://nytimes.com
https://highforthis.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

All
,## BrooklynJS Talk Submission

**Talk Title:**  Differential Programming in JavaScript

**Talk Description:** I will present a new mathematics library called Propel. Propel provides a GPU-backed numpy-like infrastructure for scientific computing in JavaScript. JavaScript is a fast, dynamic language which, we think, could act as an ideal workflow for scientific programmers of all sorts.

**Name**: Ryan Dahl

**Website:** http://propelml.org/

**Months Available to Speak:** February, March
,## BrooklynJS Talk Submission

**Talk Title:** The backpack - an intuitive guide to closures

**Talk Description:** Closure is used throughout JavaScript frameworks, in professional code and for interviewing. Yet the vast majority of developers do not have an intuitive under-the-hood grasp of the concept. In this talk I'll introduce the notion of the state backpack to make understanding closure effortless 

The talk is drawn from my Frontend masters workshop - https://frontendmasters.com/courses/javascript-hard-parts/

**Name**: Will Sentance

**Twitter Handle (optional)**: willsentance

**Website (optional):** willsentance.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time! March, April, May 2018
,## BrooklynJS Talk Submission

**Talk Title:**
Hello Smol Maps

**Talk Description:**
Do you like maps? I like maps, and I also like to make my own maps. I am writing software that helps more people make maps and I would love to share my progress with BrooklynJS!

**Name**:
Dan Phiffer

**Twitter Handle (optional)**:
@dphiffer (I am also on Mastodon: @dphiffer@social.coop)

**Website (optional):**
https://phiffer.org/

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
I'm actually pretty sure I couldn't make the Feb 15 one, but Mar 15 and Apr 19 are looking good. This is all assuming it happens on the third Thursday, please correct me if that's not right.,## BrooklynJS Talk Submission

**Talk Title:** 

Homograph Attacks, a History

**Talk Description:**

[Homograph Attacks](https://en.wikipedia.org/wiki/IDN_homograph_attack) on the internet date back the 1996, so why are they still relevant today? We'll dive into some internet governance terminology, review a decades-long debate about the worldwide nature of the internet, and take a look at the ways ICANN, browsers, and app developers continue to combat this attack. 

Layout:

I. Definition of terms and players: ICANN, punycode, homograph, scripts, gTLDs,  and ccNSO
II. Short History 1996 - 2017
III.  Where ICANN stands with dealing with the attack
IV. What major browsers do to combat the attack (cool demo!)
V. What YOU (an app developer) can do with UI to prevent the attack (cooler demo!) 

**Name**:

Logan McDonald

**Twitter Handle (optional)**:

@loganmeetsworld

**Website (optional):**

https://loganmeetsworld.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

February, March, April 
,## BrooklynJS Talk Submission

**Talk Title:** Overengineering Media Queries: here is a thing you can technically do!

**Talk Description:**
Once upon a time, we were building a website. Through a fun confluence of design and technical goals, we wanted it to be not only responsive, but modular—we would build a bunch of different widgets that could be squished together in all kinds of crazy unforeseen ways. Media queries let you restyle your content based on the width of the browser's viewport, but for our use case that was only _part_ of the problem: sometimes, a widget's "viewport" was just a slice of the browser's, which meant that the browser viewport–based queries didn't really help.

Well, as the saying goes, when your problem isn't a nail but your only tool is a hammer, you might as well attack your problem with _a whole lot of hammers_. Viewport-based queries did totally solve our problem—we just had to have _enough_ of them. 😎

Our progression was something like this:
1. Despair.
2. The Really Stupid Idea of just using _a bunch_ of media queries to fake "virtual viewports" within the browser viewport.
3. A terrible Ruby script that wrote some CSS.
4. The discovery that no one in their right mind would implement this as a Less mixin. (I tried. I still have nightmares.)
4. The world's gnarliest Sass mixin.
5. Nirvana: normal-looking source CSS, achieved through some custom PostCSS plugins, one of which provided a rule that was _conceptually_ equivalent to a normal media query but in practice compiled to, like, a bazillion of them.

The punchline is, of course, that while all this _somehow actually worked_, we ditched it in the end because the problem it set out to solve never wound up being a real problem. And so we just replaced our fancy custom rule with normal media queries, which worked Just Fine, after all.

**Name**: Adam Lloyd

**Twitter Handle (optional)**: [@jugglewheels](https://twitter.com/jugglewheels) (but set your expectations low—I've barely tweeted since the good ol' 140-character days.)

**Website (optional):**

**Months Available to Speak:** February, April, May,## BrooklynJS Talk Submission

**Talk Title:**

Experiences on creating an Arabic programming language

**Talk Description:**

In the Summer of 2015, while at the [Recurse Center](https://recurse.com), I started working on creating an Arabic programming language that could potentially be used by Arabic speaking people to learn programming. For this talk I want to go over,

* My inspirations for wanting to build an Arabic programming language
* My (failed) attempts at converting existing English programming languages to use arabic
* Awesome JavaScript tooling I used for creating a programming language (PEG.js)
* Things I expected to learn and things I didn't expect to learn but still learned
* Small demo of my programming language [Noor](https://github.com/SimplyAhmazing/noor)
* Next steps, my plans for version 2 (and the more awesome JS tooling I came across)

**Name**:

Ahmed Abdalla

**Twitter Handle (optional)**:

[@simplyahmaz1ng](https://twitter.com/SimplyAhmaz1ng)

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

February, March, April
,## BrooklynJS Talk Submission

**Talk Title:** Empathy Driven Development: Making the Web Accessible to All

**Talk Description:** Can a blind user use your web app? How about a keyboard only user, or someone with color blindness or a slow 3G connection? This talk will offer practical advice for how, as developers, we can share the experiences of our users, thus allowing us to empathize with them during the development process.

**Name**: Vincent Abruzzo

**Twitter Handle (optional)**: thoughtbyte

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

February, March, April
,,## BrooklynJS Talk Submission

**Talk Title:**

Cutting-Edge Retro

**Talk Description:**

This talk will demonstrate how to use TypedArrays and the Canvas API to create pixel art and games. It covers TypedArray basics, drawing shapes and sprites, animating them, and using a collision map to facilitate user interactions. The talk will conclude by discussing how to combine the aforementioned techniques with WebWorkers using `SharedArrayBuffer`.

If that’s all too much for 10mins, I can just go over my journey creating [pixel8](https://github.com/jozanza/pixel8) (<- latest fork), which relies on all the stuff mentioned above :space_invader: 

**Name**:

Josiah Savary

**Twitter Handle (optional)**:

@jozanza

**Website (optional):**

pixel8.vsmode.org

**Months Available to Speak:** 

Jan / Feb / ~~Mar~~ Apr
,## BrooklynJS Talk Submission

**Talk Title:**
Vimsical!

**Talk Description:**
Today a minority of educators creates the majority of educational content. That makes education narrow and specific. What if we could learn from *everything*? Vimsical is a tool that turns regular coding session into interactive tutorials. Under the hood it's a full-fledged version control system.

Try it [here](https://vimsical.com/vims/5969777d-8dae-48a6-8b6c-838928b59382)
And read the hackernoon article [here](https://hackernoon.com/running-and-debugging-aws-lambda-functions-locally-with-the-serverless-framework-and-vs-code-a254e2011010)

**Name**: Dennis Heihoff

**Twitter Handle (optional)**: @denik

**Website (optional):** vimsical.com

**Months Available to Speak:**
Jan, Feb, March,,## BrooklynJS Talk Submission

**Talk Title:** A Flock of Functions (Condensed): Lambda Calculus Way Too Fast

**Talk Description:** Lambda calculus means that all computation can be done with functions. No booleans, numbers, control flow or data structures – just functions! The foundation of functional programming languages can be explained in just a couple hours… but forget that, we'll demo it live in ten minutes instead.

**Name**: Gabriel Lebec

**Twitter Handle (optional)**: g_lebec

**Website (optional):** https://github.com/glebec/lambda-talk

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

January, February, March

---

*Note for submission reviewers: this talk will be more for entertainment than clarity. It's based on a [2-hour talk](https://github.com/glebec/lambda-talk) I give, but cut massively down until it's basically a rapid-fire reconstruction of some programming concepts from scratch, done live in a Node REPL. I hope this sounds appealing, but if it is a little too flippant then no worries.* :-),## BrooklynJS Talk Submission

**Talk Title:** NPM & Lockfiles: A Love Story

**Talk Description:** Anyone that's developed with open source has probably been burned by a dependency issue of some sort. The time spent (minutes? hours? years?) debugging dependency-related code adds up- but it doesn't have to be like this! I'd like to discuss the ins and outs of dependency management, and how `lockfile`s give us our valuable development time back.

**Name**: Danielle Adams

**Twitter Handle (optional)**: [@adamzdanielle](https://twitter.com/adamzdanielle)

**Website (optional):** [Medium](https://medium.com/@adamzdanielle)

**Months Available to Speak:** December and/or 2018!
,## BrooklynJS Talk Submission

**Talk Title:** How the Bloomberg Graphics team approached the "build system problem"

**Talk Description:** Two years ago, we revamped our project scaffold system and, in the process, designed and built a new, lightweight build system called [wsk](https://github.com/bloomberg/wsk). This talk will walk through our process in assessing other build systems (Gulp, Webpack, npm scripts, etc.), discuss how we thought through the design process and go over some of its features that have helped us in our projects. The build system problem is currently a plague. And while this may not be the exact solution for you, walking through our thought process may help in how you set up your workflow.

**Name**: Michael Keller

**Twitter Handle (optional)**: @mhkeller

**Website (optional):** 
Library: https://bloomberg.github.io/wsk
Starter scaffold: https://github.com/bloomberg/wsk.example
Notification library: https://bloomberg.github.io/wsk-notify

**Months Available to Speak:** April, May, June
,@willmanduffy to review,@willmanduffy to review,## BrooklynJS Talk Submission

**Talk Title:** Testing React Applications with Enzyme 

**Talk Description:**
React continues to grow in popularity, especially with the release of React 16. Developers who love using React may be at a loss of how to test their React applications. In this talk we will explore how to use Enzyme to test your modern React applications. We will dive into Enzyme testing and explore how to test both the DOM and virtual DOM by using Enzyme's core methods: shallow, render and mount. 

**Name**: Mary Snow 

**Twitter Handle (optional)**:

**Website (optional):**

**Months Available to Speak:** November, December, January, February 
,## BrooklynJS Talk Submission

**Talk Title:** WebComponents for regular developers.

**Talk Description:** This talk is about building reusable libraries and UI components that are distributed as custom elements. This talk isn't about the various standards under the "WebComponents" umbrella but instead is about what you can use today to build and distribute isolated framework independent code.

**Name**: Mikeal Rogers

**Twitter Handle (optional)**: mikeal

**Months Available to Speak:** January.,## BrooklynJS Talk Submission

**Talk Title:**
Talk Submission: The Technical Interview, Why is it so awful?
**Talk Description:**
After all this time we still have not made this particular aspect of our profession much better than when I got started. Why is this?
**Name**:
Glenn Hinks
**Twitter Handle (optional)**:
@2roses2
**Website (optional):**
Glennhinks.com
**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!,## BrooklynJS Talk Submission

Origami Software from Scratch

I've been doing origami since I was young and recently as a hobby project I've been building origami software to discover novel approaches to origami design. I'll bring some origami that was designed using code and we can chat about 2D planar graph geometry and why software tools can be useful to origami artists.

Robby Kraft

twitter.com/robbykraft

http://origami.pw

Sure! I'll be in town Nov, Dec, January, all 3 of those are good!
,## BrooklynJS Talk Submission

**Talk Title:** Great ideas React brought to UI development

**Talk Description:** The idea of this talk is to briefly discuss the best ideas React has brought to the table in my opinion. I've seen quite a few talks on the technical aspects of different features the library offers but I want to analyze the outcome of the ideas and how we can benefit from them while working on user interfaces. The component API, the virtual DOM, great abstraction to favor composition over inheritance, great first contact with functional programming and so forth.

**Name**: Rafael Rinaldi

**Twitter Handle (optional)**: [rafaelrinaldi](https://twitter.com/rafaelrinaldi)

**Website (optional):** [rinaldi.io](https://rinaldi.io)

**Months Available to Speak:** November, December, January
,## BrooklynJS Talk Submission

**Talk Title:** Computational Furniture
**Talk Description:**
Using code to design and fabricate furniture.
https://medium.com/@olapdesign/design-for-a-rocking-chair-8a1a1e109d7f
**Name**: Amit Nambiar

**Twitter Handle (optional)**:

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
Nov Dec Jan,## BrooklynJS Talk Submission

**Talk Title:** From "Hello, world" to The World's Best Crossword Maker in 8 weeks

**Talk Description:** I write crosswords for the New York Times. But crossword software sucks. It's clumsy, slow, and expensive. So I taught myself JS and built Phil, the World's Best Crossword Maker, in 8 weeks. It's fast, fun and free. This is how I did it. 

(Topics: JavaScript, WebAssembly, Python, Google, web scraping, data analysis, SAT solvers, logic)

**Name**: Keiran King

**Twitter Handle (optional)**: keiranwking

**Website (optional):** keiranking.com/phil

**Months Available to Speak:** November (best), December
,definitely doing this right on time and not at all late @willmanduffy to review,## BrooklynJS Talk Submission

**Talk Title:** How to use dongles to migrate your codebase

**Talk Description:** We have all dealt with bad code written in a library or framework that doesn't suit our needs. It's hard to have the time to do a full rewrite. So how do we migrate to better libraries like Redux or React? :confetti_ball: **Dongles** :confetti_ball: ! I'll share strategies for writing code to inter-operate between your legacy code and new code. After this talk, you'll be ready to build more dongles than Apple would know what to do with.
 
**Name**: Henry Millson

**Twitter Handle (optional)**: @hmillison

**Website (optional):** henrymillison.com

**Months Available to Speak:** October, November, December

,## BrooklynJS Talk Submission

**Talk Title:** "Why can't we just use /usr/bin/node?!" --- An introduction to Javascript in Debian

**Talk Description:** What is the Debian project? Why does it matter? How does Debian package and distribute Javascript code? And why are its policies so seemingly outdated and opaque? In this talk, I'll introduce the audience to Debian and the Debian Javascript team, share some of the history and challenges of the team, and invite community members to get involved with the project.

**Name**: Elana Hashman

**Twitter Handle (optional)**: @ehashdn

**Website (optional):** https://hashman.ca/talks

**Months Available to Speak:** November, but I'm happy to try to figure out other availability if that doesn't work,## BrooklynJS Talk Submission

**Talk Title:** Frontend vs Backend and the Artificial Boundaries We've Constructed

**Talk Description:** Introduction of an alternate approach to building web applications that seamlessly blend client and server-side development. By introducing asynchronous abstractions over browser APIs and node modules, Mobius is able to execute code in lock-step across multiple machines and simplify the process of building complex applications. We'll take a brief tour through compilers, determinism, network protocols, server-side rendering, security and reactive programming as we tear down the client/server wall. 

**Name**: Ryan Petrich

**Twitter Handle (optional)**: @rpetrich

**Website (optional):** 

**Months Available to Speak:** Oct / Nov / Dec,## BrooklynJS Talk Submission

**Talk Title:** Leveraging AWS Lambda as a distributed system

**Talk Description:** Using AWS Lambda functions as the backend for distributed jobs. Hivemind is a library that leverages AWS Lambda functions so you can process or gather data quicker than you can locally at an incredibly low cost.

**Name**: Madeline Cameron

**Twitter Handle (optional)**: Madamelic

**Website (optional):** https://github.com/littlstar/hivemind

**Months Available to Speak:** Oct / Nov / Dec
,## BrooklynJS Talk Submission

**Talk Title:** Building a dog-themed file uploader that can survive browser crashes

**Talk Description:** Recently I’ve been working on a cool file uploading widget for the browser called [Uppy](https://uppy.io). It’s modular (everything is a plugin), supports resumable uploads, picking files from external sources, and yes, uploads can even survive browser crashes. My talk plan:

* Choosing `yo-yo` (which later inspired `Choo`) as a lightweight view library for our user interface. What else is out there? Briefly on: `Hyperx` vs `JSX`, `Preact` and `Hyperapp`;
* The Golden Retriever plugin — how we are using `Service Worker` and `IndexedDB` to make uploads survive browser crashes;
* Redux without Redux;
* Building the user interface with plugins and extensibility in mind;
* Open source early on: bonuses and challenges that come with it;

**Name**: Artur Paikin

**Twitter Handle (optional)**: arturi

**Website (optional):** http://arturpaikin.com

**Months Available to Speak:** October, November, December,## BrooklynJS Talk Submission

**Talk Title:** Promises are a monad, and why you don't need to care (but can if you want)

**Talk Description:** What are monads? Are they useful? And most interestingly, why do some people care so much, and other people care so little? We'll answer these questions by comparing monads to another everyday concept, the brapple.

**Name**: Aaron Sikes

**Twitter Handle (optional)**: @courajs

**Website (optional):**

**Months Available to Speak:** Anytime! Let's say October, November, December,## BrooklynJS Talk Submission

**Talk Title:** More Than Music with MIDI, JavaScript & Tiny Computers

**Talk Description:** We're living the halcyon days of tiny computers and JavaScript, but MIDI is a technology that's been around for much longer. In this talk we'll explore why it's implementation and prevalence in hardware makes for a uniquely intriguing and accessible platform for creative coding.

Tiny computers such as the [RaspberryPi](https://www.raspberrypi.org), [Arduino](https://www.arduino.cc/) and [C.H.I.P.](https://getchip.com/) have finally reached a level of  performance and affordability that makes hardware experimentation accessible to everyone. At the same time, JavaScript has emerged as the lingua franca of web programming and can be found in many places beyond just the browser. 

What if I told you there was a mature protocol that's been around since 1983 and was uniquely poised to take advantage of this development?

Well, wonder no more and [meet MIDI](https://en.wikipedia.org/wiki/MIDI)! 

Sitting at convergence of these two things is MIDI — a niche protocol that's been around since 1983 and was originally designed for musical instruments to communicate with one another. It's event-oriented approach to messaging feels right at home in the asynchronous world of JavaScript & Node, and the prevalence of MIDI support in older musical equipment means you can find unique, hackable and affordable hardware at your local pawnshop or Craig's List.

This unlikely tech stack — Tiny Computers + JavaScript + MIDI — can lend itself to creative programming beyond music. George's Talk will explain how to get started, walk through several examples and elaborate on the future of this stack, not only as a platform for experimentation but for education as well.


**Name**: George Mandis

**Twitter Handle (optional)**: georgeMandis
 
**Website (optional):** [george.mand.is](https://george.mand.is)

**Months Available to Speak:** November 2017, January & February 2018.
,## BrooklynJS Talk Submission

**Talk Title:** 

Mentorship + Sponsorship

**Talk Description:**

To grow our technical leadership skills, it’s critical to lean on one’s network of support. We often find mentors: people who can give us helpful advice. But what can be even more valuable is finding “sponsors”, who help us find new opportunities and improve the visibility of our work. As sponsorship is especially important for members of underrepresented groups in tech, we’ll walk through tactics you can employ today to be a sponsor for those around you, too.

**Name**:

Lara Hogan

**Twitter Handle (optional)**:

@lara_hogan

**Website (optional):**

http://larahogan.me

**Months Available to Speak:**

October, November, and 2018!,## BrooklynJS Talk Submission

**Talk Title:**

Skin and Bones - Skeletal Animation in your Browser via WebGL

**Talk Description:**

If you've ever watched a movie or played a video game where there were 3D characters that moved around, you've seen skeletal animation!

But.. how does it work?

A lack of beginner resources on the web will have you thinking that it's black magic, but it turns out that there are only two key concepts at play:

A skin and some bones.

In this talk we'll learn how skeletal animation works by talking through some WebGL and JavaScript powered interactive slides that I'll make for BrooklynJS. 

We'll render a skeletally animated character and some other helper visuals and dive into what's going on (explained at a beginner level).

**You'll walk away with**:

- A better understand of how it all works because you've gotten a combo of interactive visuals and me describing said visuals with no background knowledge assumed.

- A GitHub link to the source code powering the interactive slides / the skeletal animation implementation & visuals

- A sense of where to find more resources to keep the ball rolling after this 10 minute introduction of skeletal animation

**Name**:

Chinedu Francis Nwafili

**Twitter Handle (optional)**:

[@chinedufn](http://twitter.com/chinedufn)

**Website (optional):**

http://chinedufn.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

January 2018 | February 2018 | March 2018 in no particular order

---

Thanks for reading!,Fix header on brooklynjs.com/coc

before:
![screen shot 2017-09-08 at 4 55 56 pm](https://user-images.githubusercontent.com/938722/30230950-aaecb04c-94b6-11e7-8a83-2e4567519c78.png)

after:
![screen shot 2017-09-08 at 4 54 55 pm](https://user-images.githubusercontent.com/938722/30230958-b9e8f060-94b6-11e7-8591-ba8994e31ed3.png)
,## BrooklynJS Talk Submission

**Talk Title:** Mindful Communication in Code Reviews

**Talk Description:** Mindful communication means to listen and speak with compassion, kindness and awareness. This is easier said than done, so this talk provides examples of how to apply mindful communication to reviewing code.

**Name**: Amy Ciavolino

**Twitter Handle (optional)**: @imightbeamy

**Website (optional):** [amy.tech](http://amy.tech)

**Months Available to Speak:** Any upcoming month! Sept, Oct, Nov.
,@willmanduffy to review,## BrooklynJS Talk Submission

**Talk Title:**
Bringing components to legacy code

**Talk Description:**
Not all systems allow the code to take over the entire rendering of your app. Sometimes you want to modernize and scale your code using libraries such as React on systems that already have a lot of legacy interactive code, or a CMS that must controls what is rendered in the page.

This talk shows techniques to adapt an existing environment so modern libraries can coexist with existing environments, where the DOM dictates the components it needs.

**Name**:
Wesley de Souza

**Twitter Handle (optional)**:
[@WesleydeSouza](https://twitter.com/WesleydeSouza)

**Website (optional):**
[wesley.so](https://wesley.so)

**Months Available to Speak:**
September, October, November,## BrooklynJS Talk Submission

**Talk Title:**

Synth-ier Things

**Talk Description:**

A crash course on subtractive synthesis with the goal of creating a web-based synthesizer that can only play the Stranger Things theme song repeatedly. We'll explore the fundamentals of sound and dive deep into what those cool vintage synthesizers are actually up to behind the scenes, all with some neat visualizations and cool noises.

**Name**:

Eric Wood

**Twitter Handle (optional)**:

[@eric_b_wood](https://twitter.com/eric_b_wood)

**Website (optional):**

[http://ericwood.org](ericwood.org)

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

Sept / Oct / Nov

(october is preferred because it'll be right before the new season of stranger things gets released 😬 ),## BrooklynJS Talk Submission

**Talk Title:**
From Barely Ready to Total Betty: How JS Picked Out My Outfit

**Talk Description:**
Star Trek's communicators and tricorders are often cited as the inspirations for the modern smartphone, but no science fiction has inspired me as deeply as [Cher's closet in Clueless](https://www.youtube.com/watch?v=XNDubWJU0aU). In this talk, we'll build a web app to put together cute, coordinated outfits, and along the way we'll learn a little bit about constraint solvers, relational databases, and the history of artificial intelligence.

**Name**:
Justin Falcone

**Twitter Handle (optional)**:
@modernserf

**Website (optional):**
https://justinfalcone.com/

**Months Available to Speak:**
Sept / Oct / Nov,## BrooklynJS Talk Submission

**Talk Title:** Building the Image Grid from Google Photos

**Talk Description:**

In 2015, I decided to take a picture of everything I ate. Every sandwich, every chip, and every square of chocolate. For 365 days, if I ate it, I took a picture of it. When December rolled around, I had over 1,800 pictures with nowhere to put them. I couldn’t upload that many photos to Facebook or Instagram, and I hadn’t found a photo service that I liked enough to put my food photos on.

[So I built a website.](https://feeding.schlosser.io/)

It turns out, in the course of making a website for viewing 1,800 photos I ran into a bunch of interesting technical challenges, and walked away from the whole thing with a JavaScript library called [pig.js](https://github.com/schlosser/pig.js), an image grid that is faster, more responsive, and easier to use than any other solution I could find. It's heavily influenced by the Google Photos image grid, and this talk explains how it works.

**Name**:

Dan Schlosser

**Twitter Handle (optional)**:

[@danrschlosser](https://twitter.com/danrschlosser/)

**Website (optional):**

https://schlosser.io

**Months Available to Speak:** 

September, November, December
,## BrooklynJS Talk Submission

**Talk Title:**
Learning from History: Architecture & Universal Design

**Talk Description:**
What can we learn from history to help us become better developers? The Universal Design movement, popular in 🏠 architecture 🏠  in the late 60's and early 70's, continues to inform some of the best designs across industries to this day. I'll go over how we can borrow from the Universal Design movement to write clean code that works for everyone. I'll also go over some basic concepts of accessibility and why every application should keep accessibility in mind!

**Name**:
Emily Plummer

**Twitter Handle (optional)**:
@emplums (on & off twitter rn)

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

September! 
,## BrooklynJS Talk Submission

**Talk Title:**  
`gcloud create-todo-app` and other such magic

**Talk Description:**
Google Cloud Platform is an amazing tool chalk-full of features, but can be a bit intimidating at first glance. This talk will walk through some of the tools provided by GCP with the time tested strategy employed by the coolest frameworks: the TODO list app.   
Will cover:
  
- deploying a node app to app-engine, versioning and debugging
- persisting data with DataStore and how to manage it
- using DataStore in your node app
- helpful `gcloud` commands (create-todo-app is not one of them, I made that up)

**Name**:
Phoebe Stierhoff  

**Twitter Handle (optional)**:
@tychosdrunkelk  

**Website (optional):**

**Months Available to Speak:** September, October, November
,## BrooklynJS Talk Submission

**Talk Title:** The (re)Acts over, Vue to the Rescue!

**Talk Description:** After it's time in the sun, React has been more of a fatigue with 16+ versions. We discuss the similarities, differences and benefits of this lightweight framework and why it deserves the praise. Justin is an UI Engineer who's worked with javascript in his tool belt since the early 2000's.  

**Name**: Justin Michaliga

**Twitter Handle (optional)**: @jmichaliga

**Website (optional):** http://smartnode.codes

**Months Available to Speak:** October, November, December
,## BrooklynJS Talk Submission

**Talk Title:**
Choosing GraphQL for your API

**Talk Description:**
GraphQL is an interesting way of implementing API endpoints. In this talk, I will introduce GraphQL, show what does and what it does not do, with lots of live examples.

**Name**:
Wesley de Souza

**Twitter Handle (optional)**:
[@WesleydeSouza](https://twitter.com/WesleydeSouza)

**Website (optional):**
[wesley.so](https://wesley.so)

**Months Available to Speak:**
September, October, November,Screencap from ScriptEd donation
![image](https://user-images.githubusercontent.com/166258/28801696-b5fdac5c-7620-11e7-87c2-0cdbce30ee3b.png)

@willmanduffy to review,## BrooklynJS Talk Submission

**Talk Title:**
ContractPatch: Employment Advocacy for the Digital Laborer

**Talk Description:**
Many developers and tech workers sign employment agreements with their employers that include broad restrictions on their ability to contribute to FOSS projects — whether as part of their employment, after hours, or both. ContractPatch is an initiative to give digital laborers the words they need to make sure they can continue the work that’s important to them and to our community. Whether those words are negotiation tactics in the hiring process, or language to suggest for a prospective employment agreement, ContractPatch aims to help developers defend their own interests and property rights.

Negotiating a contract is a skill like any other. ContractPatch aims to give developers access to the soft skills and hard contract clause language necessary for effectively asserting your rights as a digital laborer.

**Name**:
Fred Jennings

**Twitter Handle (optional)**:
[@Esquiring](https://www.twitter.com/esquiring/)

**Website (optional):**
[Software Freedom Conservancy's ContractPatch page](https://sfconservancy.org/blog/?tag=ContractPatch)

[Fred's outdated lawyerly bio](http://torekeland.com/attorneys/fred-jennings)

**Months Available to Speak:**
August 2017, November 2017, December 2017
,## BrooklynJS Talk Submission

**Talk Title:**
From C to Not-So-Shining PHP: How The New York Times Story Team grew up on the Web

**Talk Description:**
I will detail how The New York Times emerged from the ashes of PHP, built a new and beautiful CMS, found itself in a sea of React components, crafted a weird AF responsive grid in scss and JavaScript (that works in IE11), and built a system that allows designers and programmers to work on something once and reuse it wherever and whenever the hell they want to! :^)

**Name**:
Michael Beswetherick

**Twitter Handle (optional)**:
@challuniverse

**Website (optional):**
http://michaelbeswetherick.com/

**Months Available to Speak:**
August, September, October
,## BrooklynJS Talk Submission

**Talk Title:**

Gerrymandering: a High-Stakes Geometry Problem

**Talk Description:**

Every ten years, everyone in the US is counted by the Census, and our congressional districts get redrawn. In 2020 it will be different: manipulating the district maps, known as gerrymandering, is now done with algorithms and "big data" collected on every voter.  [A recent study](https://www.brookings.edu/blog/fixgov/2017/07/19/supreme-court-to-scrutinize-partisan-gerrymandering/) concluded that “the severity of today’s gerrymandering is…unprecedented in modern times.”

This month I went to "[Gerrymandering Summer School](https://sites.tufts.edu/gerrymandr/)" by the MGGG (Metric Geometry and Gerrymandering Group) to help make web maps / GIS tools.

This talk will (in a tech-focused and almost-politics-free way) cover :
- what is "gerrymandering" even
- why we probably can't draw districts with one, unbiased algorithm
- open source maps and metrics that MGGG is making to challenge unconstitutional districts
- (with LeafletJS / D3.JS visualizations, of course)

**Name**:

Nick Doiron

**Twitter Handle**:

mapmeld

**Months Available to Speak:**

August 2017, or postpone to 2018 I think,## BrooklynJS Talk Submission

**Talk Title:**
Machine Learning, JavaScript, and Art

**Talk Description:**
My talk is about making an art with machine learning. I'll talk about the some concepts discussed in machine learning code implementations (like perceptrons!), as well as how and WHY we would do this in JavaScript. I'll end my talk with a demo of a JavaScript app that looks at a photo and tries to recreate it *creatively*.

Note: This talk is modified from the last section of my Nordic.Js and JSConf Iceland talk, [Create Art With Javascript](https://github.com/amycheng/create-art-with-js)
**Name**:
Amy Cheng

**Twitter Handle (optional)**:
@am3thyst

**Website (optional):**
amycheng.info

**Months Available to Speak:** 
- August, September, October, whenever 
,## BrooklynJS Talk Submission

**Talk Title:** From a Refugee to a CEO, the World of Connectivity and Digital Citizenship

**Talk Description:**
Coding is a language like any other language and a great tool for communicating. I love the creativity and problem solving aspect of technology, which helps you to become a better critical thinker.

Knowledge is power and technology is the tool for this empowerment. That’s what made me  become a citizen of the world without considering geographical boundaries. I founded Code to Inspire as the first coding school for girls in Afghanistan and made everything happens in Herat, Afghanistan literally online, starting from the fundraiser, shipping equipments, recruiting mentors, registering applicants, curriculum development and etc. This is the power and connectivity I am talking about which enabled a refugee born who was deprived to access education makes her dream come true and give free access of technical and digital literacy to her hometown women!
**Name**:
Fereshteh Forough
**Twitter Handle (optional)**:
https://twitter.com/f_forough
**Website (optional):**
http://codetoinspire.org/
**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
August, September, October,## BrooklynJS Talk Submission

**Talk Title:** JavaScript and Self-Deception: Why TypeScript is Not Enough

**Talk Description:**

JavaScript is often derided for callback hell and for quirks around equality, number handling, type coercions and the "this" keyword. This is largely a straw man argument. Developers work around these shortcomings through conventions, tools, and libraries and the problems caused by these kinds of quirks come up infrequently. This talk instead aims to explore the best ways that I know how to write JavaScript- using good conventions, using functional libraries, using types, using promises and immutable data- and motivate PureScript as a way of pushing the limits and bringing development in the JavaScript ecosystem to the next level.

**Name**: Nicholas Kariniemi

**Twitter Handle (optional)**: [@nkariniemi](https://twitter.com/nkariniemi)

**Website (optional):** http://blog.ndk.io

**Months Available to Speak:** July, August, September
,## BrooklynJS Talk Submission

**Talk Title:**

Scars: On handling adversity

**Talk Description:**

We all encounter setbacks. Whether we are victims of circumstance or unintentionally cause ourselves harm, facing consequences is something common to us all. Sometimes we're able to bounce back. Sometimes, our setbacks our permanent and what was once certain is no longer.

Last year, I suffered a deeply personal loss for which I was completely unprepared. In the aftermath, I almost left the tech industry altogether. But I got help and now I've returned; I'm coding again and I've learned a great deal about carrying on with the scars I've suffered. I'd like to talk about my loss and share three of things I've learned in a way I hope will be beneficial to all.

This is not a technical talk; it is accessible and applicable to all skill levels as I wish to connect with the audience on a more personal level. This talk is not even about JavaScript. However, it a story of a developer's mental health, a topic relevant to everyone in the JS community, and I hope may serve as a thought-provoking departure from the norm.

**Name**:

Ross Kaffenberger

**Twitter Handle (optional)**:

@rossta

**Website (optional):**

https://rossta.net

**Months Available to Speak:** 

September, October, November
,## BrooklynJS Talk Submission

**Talk Title:**
Vimsical - Process to the People

**Talk Description:**
We asked _What if everything was a tutorial?_ How much more could we learn if the knowledge of how we make things was just a click away? That's Vimsical. A highly granular process control system that integrates with your tools and automatically records your process, and a platform to share not just the result of your work, but the journey that led up to it.

We wrote the entire app in 3 months, as a team of 2 people, in Clojure(-Script).

**Name**: Dennis Heihoff

**Twitter Handle (optional)**: @denik

**Website (optional):** vimsical.com

**Months Available to Speak:**
July (preferred), August, September,## BrooklynJS Talk Submission

**Talk Title:** how what I learned study-hacking college helps me overcome javascript fatigue: tools and techniques to learn smarter

**Talk Description:** This past December, I decided to take my remaining vacation days (5) and see if I could learn enough react native to be reasonably productive in that time. Since then, using what I learned, I've been able to give two talks on React Native and to be pretty productive on a React Native side project. In this talk, I want to talk about learning, and how to learn, by demonstrating some of the techniques I used. I've used the same ones for almost every new framework I've come across in JS. These include:

- deep work (how do you change your environment and your habits to maximize for success)
- mind map (use this tool to test what you know to begin with, and make your learning easier by starting at the edges of your current understanding -- includes graphical diagrams)
- finding the best resources
- take better notes and organize your thoughts when you discover these resources
- using spaced repetition and koans to practice concepts
- picking a sample project
- ??
- profit

**Name**: Greg Samek

**Twitter Handle (optional)**: https://twitter.com/spacemanmd. 2 points if you can spot the 30 Rock reference.

**Website (optional):** 

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time! 

August, September, October
,## BrooklynJS Talk Submission

**Talk Title:** SPREADSHEETS ZOMG

**Talk Description:** Remember spreadsheets? They're awesome! In this talk we'll go over tools and ways to use spreadsheets for good and for giggles.

**Name**: Jessica Lord

**Twitter Handle (optional)**: jllord

**Website (optional):** http://jlord.us

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time! July, August, September
,**Talk Title:** 50 Shades of React

**Talk Description:** In Javascript, especially the land of React, there are plenty of wrong ways to do, well, anything. But many times, there's not one "right way" to go about doing it... it's all shades of gray. I'll talk about a few common cases of analysis paralysis and how to get over it.

**Name**: Dan Rouse

**Months Available to Speak:** august september october november whenember  🤷‍♂️,## BrooklynJS Talk Submission

**Talk Title:** The next wave of front-end frameworks

**Talk Description:** 🚨  NEW PROJECT KLAXON 🚨 I've been working for the last few months on a project called [Svelte](https://svelte.technology) ( <sub>adj</sub> /svɛlt/ — *lithe, urbane, suave, from the Italian 'svelto' meaning fast, agile, light*), which is an attempt to rethink how we approach the problem of building user interfaces.

We've gone from a world where people manually manipulate the DOM (imperative) to one where we describe the intended output (declarative), and our tool of choice translates that into a series of DOM updates. That's great for developer happiness but there are some significant trade-offs. Svelte changes all that by compiling your declarative components into JavaScript that resembles the targeted DOM manipulation code you'd write yourself — in other words, doing the hard work once at build time instead of *n* times at run time.

There's loads of different aspects I could focus on:

* your app gets much smaller, because you no longer need to ship a virtual DOM differ/data binding system/virtual machine/whatever
* your app gets much *faster*, because the compiler can aggressively optimize — no need to do complex diffing operations etc
* your app is easier on the garbage collector, because you're not generating a new copy of your entire view on every state change. Svelte uses less memory than any other framework, which is great for mobile
* your codebase is regret-proof — because there's no real runtime framework to speak of, you never have to worry about shipping two frameworks simultaneously if you decide to adopt a new tool in future
* because components are self-contained, it completely changes the game when it comes to interoperability. Web components finally make sense!
* SSR is a crazy amount faster — you just tell the compiler to output a string-generating function instead of a DOM-generating one
* the developer experience is beautiful. For example you can write normal CSS and it will be encapsulated/statically analysed etc
* simplicity/minimalism versus power/features is revealed to be a false dichotomy

**Name**: Rich Harris

**Twitter Handle (optional)**: [@rich_harris](https://twitter.com/rich_harris)

**Website (optional):** [svelte.technology](https://svelte.technology)

**Months Available to Speak:** July, August, September
,## BrooklynJS Talk Submission

**Talk Title:**
Disrupting the Developer Experience

**Talk Description:**
Building applications in the "modern age" requires acknowledgement and acceptance of paradigm shifts in many facets of a company's operations, and while resources are focused on tooling and technology, one critical component — the developer experience —  is often overlooked. Failure to see digital transformation as organizational and cultural change often means the transformation itself fails, not to mention the impact it has on developer morale, engagement, productivity and ultimately retention. In this talk I will talk about cultivating a developer experience that values training, knowledge transfer, educational support and professional development to fuel digital transformation, yield better products and build stronger technical teams. 

**Name**:
Owen Buckley

**Twitter Handle (optional)**:
@kenzanmedia
@thegreenhouseio

**Website (optional):**
www.kenzan.com
www.thegreenhouseio.blog

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
August / September / October
,## BrooklynJS Talk Submission

**Talk Title:**
The cost of unmoderated collaboration

**Talk Description:**

Hot off the tails of a successful presentation at dinosaur js this abridged version of "The cost of unmoderated collaboration" gets into the nitty gritty of why it is so important to have clear moderation rules in your community. It presents hard learned lessons from Node.js as well as some best practices for you to take home.

**Name**:

Myles Borins

**Twitter Handle (optional)**:

@mylesborins

**Website (optional):**

MylesBorins.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
July please!,## BrooklynJS Talk Submission

**Talk Title:** Flying the Feature Flag

**Talk Description:**
GONNA TALK ABOUT HOW I WAS WRONG TO HATE FEATURE FLAGS BACK IN THE DAY AND HOW THEY CAN DECOUPLE ROLLOUT FROM DEPLOYMENT.

**Name**: Daniel Cousineau

**Twitter Handle (optional)**: @dcousineau

**Website (optional):** http://dcousineau.sexy/

**Months Available to Speak:** July, August, September,## BrooklynJS Talk Submission

**Talk Title:** Deploying your own application with modern container tools.

**Talk Description:** Deploying applications has never been easier and as a result more and more developers are doing it themselves. The rise of [containers](https://www.docker.com/what-container) have allowed developers of all stacks and skill levels to develop, ship, and deploy their apps without any worries about dependencies or environment specific requirements. In addition, container orchestration tools like [Kubernetes](https://kubernetes.io/) (the biggest buzzword in tech) have made it simple to scale and manage entire ecosystems. We'll go over what a container is and how to completely package your node application into one. After that i'll be doing a demonstration on running that container using Kubernetes! 

**Name**: Grant Seltzer

**Twitter Handle (optional)**: [@grantseltzer](https://twitter.com/grantseltzer)

**Months Available to Speak:** ~~July,~~ August,we can tweak this later, but this is just to bring this letter up to present reality now that the bench project has completed [here](https://goo.gl/maps/cZEEe6BoGd72).,website has 8:15-8:30-9:00-8:45-8:00
now: 8:00-8:15-8:30-9:00,## BrooklynJS Talk Submission

**Talk Title:** JavaScript and the Rise of The New Virtual Machine

**Talk Description:** One day we woke up and things were different. Artificial Intelligence and Machine Learning powering swarms of cloud containers talking to browsers running apps originally written in C++, now compiled to JS. Augmented and Virtual Reality are happening in your browser! Join Scott Hanselman as he explores the relationship between the Cloud and the Browser, many Languages and one Language, how it might all fit together and what might come next in this upbeat and edutaining talk. How many animated gifs of Neil Patrick Harris can one man use in one technical talk? Let's find out!"

**Name**: Scott Hanselman

**Twitter Handle**: [@shanselman](https://twitter.com/shanselman)

**Website:** http://hanselman.com

**Months Available to Speak:** November 15th/16th
,## BrooklynJS Talk Submission

**Talk Title:** Adventures with TypeScript

**Talk Description:** TypeScript is a typed superset of JavaScript maintained by Microsoft. It's gained hugely in popularity over the past 2-3 years, largely because Microsoft has taken a "Switzerland" approach to JS: they try to support all the frameworks and all the workflows. I'll talk about why you might want to use TypeScript, how to migrate a JavaScript project to TypeScript, and some exciting new features that have been added in the past year which help TS faithfully model JS code that was previously hard to statically type.

These posts I've written about TypeScript are along the lines of what I'll talk about:

- [A Typed pluck: exploring TypeScript 2.1’s mapped types,1] (Medium)
- [A typed chain: exploring the limits of TypeScript,2] (Medium)
- [Why and when to use TypeScript,3] (StackOverflow Documentation)

Seeing TypeScript in action is the most compelling argument for using it, so I hope to show lots of examples in vscode during my talk.

**Name**: Dan Vanderkam

**Twitter Handle (optional)**: [@danvdk](https://twitter.com/danvdk)

**Website (optional):** [danvk.org](http://www.danvk.org/)

**Months Available to Speak:** June, July or August

[1]: https://medium.com/@danvdk/a-typed-pluck-exploring-typescript-2-1s-mapped-types-c15f72bf4ca8
[2]: https://medium.com/@danvdk/a-typed-chain-exploring-the-limits-of-typescript-b50153be53d8
[3]: https://stackoverflow.com/documentation/typescript/9073/why-and-when-to-use-typescript#t=201705300307297446437,## BrooklynJS Talk Submission

**Talk Title:**
Full CRUD Fast: Build APIs in Node in just 73 seconds!

**Talk Description:**
Let's blast through some live coding and build out CRUD APIs in Node.js together. In moments, based on our data model, we can quickly have RESTful endpoints with all the verbs one could possibly need. That willman literally take me 73 seconds, as you'll see in the 1920s video below before they had audio. The rest of the time, we could hook up a legit datasource, slap in some ACLs, maybe even develop some relationships between our models. If there be hecklers, we'll _develop_ some relationships there too. It'll be fun!

[![Rapid APIs in LoopBack](https://raw.githubusercontent.com/StrongLoop-Evangelists/workshop-band-app/master/workshop/assets/video.png)](https://youtu.be/iOMD27DjuO4 "Rapid APIs in LoopBack")

**Name**:
Joe Sepi

**Twitter Handle (optional)**:
joe_sepi

**Website (optional):**
leastbestbeast.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
June. It's got to be June. It could probably be July or August or any other month, but I'd really really like for it to be June. June is great. June is good.
,## BrooklynJS Talk Submission

**Talk Title:**
Programming in JavaScript Is magic

**Talk Description:**
This talk is shwowing how programming is more magical then what is it one focus language will be JavaScript and how I first encountered the language and how I interact with it now. Showing some good videos of before and after learning javascript/programming 

**Name**: Andre Garvin

**Twitter Handle (optional)**: __andreGarvin__

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
,## BrooklynJS Talk Submission

**Talk Title:** Approaching web standards scientifically

**Talk Description:** Looking at where science has gone wrong in the past, and how to avoid making the same mistakes on the web.

**Name**: Jake Archibald

**Twitter Handle (optional)**: jaffathecake

**Website (optional):** https://jakearchibald.com

**Months Available to Speak:** June,## BrooklynJS Talk Submission

**Talk Title:**
Using Serverless technologies to solve first world problems

**Talk Description:**
With a modern web development approach is there even a need for servers? I answer that question by exploring the implementation of into my front end web app that lets me know if there is a baseball game and when to avoid public transit. I explain the benefits of my server-less project, which includes speed, cost, and security. By the end of this talk, you will have a good understanding to build a fast, secure front-end that talks to a low-cost server-less architecture. You will also find out if there is a baseball game the night of the talk as well 😉

**Name**:
Brian Douglas

**Twitter Handle (optional)**:
bdougieYO

**Website (optional):**
https://briandouglas.com

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
August or September
,## BrooklynJS Talk Submission

**Talk Title:** The Excitement and Terror of a Successful Side Project

**Talk Description:**

I launched oTranscribe.com in October 2013 while still getting to grips with JavaScript. Almost four years on, it has approximately 90,000 monthly users — and that number is growing every month by word of mouth alone. Meanwhile, I have an unrelated full-time job and still host it on GitHub Pages.

In this talk, I’ll discuss my unsuccessful attempt at rewriting oTranscribe from scratch, what I learnt in a (more successful) refactor, and more generally what it means to have your open-source project blow up beyond your wildest dreams.

**Name**: Elliot Bentley

**Twitter Handle (optional)**: https://twitter.com/elliot_bentley

**Months Available to Speak:** June, August, September 2017,## BrooklynJS Talk Submission

**Talk Title:**
The Sound of Data

**Talk Description:**
What does my data sound like? A lighthearted exploration of musical composition through the humble JS object. 

**Name**:
Justin Moses

**Twitter Handle (optional)**:
@justinjmoses

**Months Available to Speak:** 
June, July 2017
,## BrooklynJS Talk Submission

**Talk Title:** B-arrow-ed: Hindley-Milner type signatures adapted for JavaScript

**Talk Description:** 

Hindley-Milner type signatures are easy to write and easy to read. Unfortunately, it can be hard to find a simple introduction to the Hindley-Milner system. Much writing on the topic ([1](https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system), [2](http://stackoverflow.com/questions/399312/what-is-hindley-milner#answer-399392)) invokes academic concepts that obscure the system's essential practicality. 

My talk has three parts. First, I argue that Hindley-Milner is an exceptionally efficient means of documentation by comparing the type signature for the identity function to four different plain English explanations. Then, I introduce the audience to the Hindley-Milner syntax by writing type signatures for familiar functions such as `concat`, `filter`, `map`, `partial` and `reduce`. Finally, I talk about ways in which Hindley-Miner doesn't fit JavaScript perfectly and review some of the [solutions proposed](https://github.com/ramda/ramda/wiki/Type-Signatures#ramda-miscellany) by the [Ramda](http://ramdajs.com/) team. 

I aim to leave the audience able to read Hindley-Milner type signatures and perhaps persuaded that this system provides a lightweight compliment to more comprehensive documentation systems such as JSDoc.

**Name**: Max Hallinan

**~~Twitter~~ Mastodon Handle (optional)**: https://oulipo.social/@maxhallinan

**Website (optional):** https://github.com/maxhallinan

**Months Available to Speak:** June, July 2017
,~~~ THE MOST PASSIVE AGGRESSIVE PULL REQUEST IN BROOKLYNJS HISTORY ~~~,## BrooklynJS Talk Submission

**Talk Title:**
 Debugging Google-React-Maps:  Pitfalls and Struggles from a Beginner Coder

**Talk Description:**
 Coding is hard.  Even harder when you can't just search StackOverflow for an answer.  Here are a few issues that were incredibly small but ate up ridiculous amounts of time while working with the google-react-maps and react-bootstrap.

1. Size Matters:  The div box needs to be greater than 0.  This is great, unless you're using react-bootstrap.  Then you've got flex containers that are 0 because it's waiting on google-react-maps, which is waiting for react-bootstrap, which is waiting for . . . . .

2. Custom Icons and SVG attributes:  google-react-maps is great for more customization.  Unfortunately, there's a large learning curve to get to that point.  Here I figured out how to use custom SVG icons and pass them into the component.  We'll also look at some attributes of SVG that allow you to customize size, offsets, and more.

**Name**:
Gee Li

**Twitter Handle (optional)**:
twitter: @Gee2789

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

Available May, July, August
,## BrooklynJS Talk Submission

**Talk Title:** DIY Element Queries with ResizeObserver

**Talk Description:** The concept of “element” or “container” queries has enjoyed universal support among front-end developers for years, but a standard solution hasn’t even been spec’d yet, never mind implemented in browsers. There are good reasons for that, which we’ll explore first-hand by rolling up our sleeves and attempting to be the Extensible Web Manifesto that we want to see in the world – with [ResizeObserver](https://wicg.github.io/ResizeObserver/).

**Name**: Eric Portis

**Twitter Handle (optional)**: @etportis

**Website (optional):** https://ericportis.com

**Months Available to Speak:** I’m going to be in town in June, [talking about Element/Container Queries @ SmashingConf](https://smashingconf.com/schedule). I’d *love* to speak at BrooklynJS a couple of days later!,## BrooklynJS Talk Submission

**Talk Title:**
CallParty - A civic engagement bot for Facebook Messenger

**Talk Description:**
After the past election, a group of developers and designers got together to build a Facebook Messenger app to help connect constituents with their Members of Congress. After a few months of process and development, CallParty was born. 

Using JavaScript on both the client and server, CallParty provides users with their representative's information and a script to help them get their thoughts across.

The talk will cover how we integrated the government data into our platform and then into Facebook Messenger, using their API.

**Name**:
James Ayres

**Twitter Handle (optional)**:
@CallParty

**Website (optional):**
http://www.callparty.org

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
May, July, August...
,## BrooklynJS Talk Submission

**Talk Title:** Who needs Javascript? How to Build an Entire App in WebGL

**Talk Description:** WebGL is most often used solely as the view layer, especially for 3D visualizations, but with a little magic we can have it handle all of our application logic. You'll learn how to use framebuffers to store and update state, textures to pass in user input, and a traditional WebGL presentation layer to render the result at a smooth 60 frames per second.

**Name**: Seth Samuel

**Twitter Handle (optional)**: sethfsamuel

**Website (optional):** https://github.com/sethsamuel/

**Months Available to Speak:** May, maybe June, July
,## BrooklynJS Talk Submission

**Talk Title:**
I said building a bot would be easy ( 🙈  )

**Talk Description:**
Everyone is excited about bot's and text based interfaces. As with any new technology the eco-system is changing rapidly and documentation isn't great.

To make matters worse, most providers and libraries give examples of bot's ordering Pizza or telling team members the weather. The point of my talk is to walk through a real use case and how I shipped a Slack bot into production. As well as give some background about the different providers I tested [BotKit](https://github.com/howdyai/botkit), [Api.ai](api.ai).

I had a few weeks of real pain and suffering so hopefully after this talk people can honestly say building a bot is easy!

**Name**:
- Clinton Halpin

**Twitter Handle (optional)**:
- https://twitter.com/clintonhalpin

**Website (optional):**
- Personal - http://clintonhalpin.com/
- Company - https://quotecatalog.com

**Months Available to Speak:** 
- May, June, July ( whenever honestly )
,## BrooklynJS Talk Submission

**Talk Title:**

Scrape It 'Til Ya Make It: Taking UNIQLO Mobile

**Talk Description:**

UNIQLO had just spent a ton of cash on its first e-commerce website in the US, but it had one serious flaw: half of its potential sales bounced because it was desktop-only. This is the true story of how two scrappy New York JavaScripters defied the odds to build an app that brought UNIQLO mobile.

**Name**:

Jed Schmidt / Michael Hart

**Twitter Handle (optional)**:

@jedschmidt / @hichaelmart

**Months Available to Speak:**

May,## BrooklynJS Talk Submission

**Talk Title:** Programming for Math, Science, and Fun with regl

**Talk Description:** Written by [@mikolalysenko](https://github.com/mikolalysenko), [regl](https://github.com/regl-project/regl) is a functional wrapper for the WebGL API that's effectively rewired the way I think about drawing graphics. I use it for fun and work, so I'll talk about how I've come to realize the scope of the API hits the nail on the head and why removing state makes small experiments enjoyable and large projects maintainable. And of course I'll show off some fancy things people have done with it.

I've never given a programming talk, so I'd love the opportunity to talk briefly about regl and try to pass on some great lessons I've learned from its design! Thanks for your consideration!

**Name**: Ricky Reusser

**Twitter Handle (optional)**: [@rickyreusser](https://mobile.twitter.com/rickyreusser)

**Website (optional):**
- regl: http://regl.party/
- My experiments: https://github.com/rreusser/demos#regl

**Months Available to Speak:** April, June (July not strictly impossible, but not the best),## BrooklynJS Talk Submission

**Talk Title:**
Web Notifications Are Pretty Cool

**Talk Description:**
As a web developer, I was always jealous of the fact that native apps could send beautiful, actionable push notifications and I couldn't. But not any more! Chrome (on both desktop and Android) can receive push messages and display notifications, no matter if the original page is open or not.

We'll go through the Push API, the Notifications API, and how we can add interactivity though tags, notification click events and notification action buttons.

**Name**:
Alastair Coote

**Twitter Handle (optional)**:
_alastair

**Website (optional):**

**Months Available to Speak:** April, June, July
,## BrooklynJS Talk Submission

**Talk Title:**
Envious - run local code in real environments

**Talk Description:**
We have a problem. Data. Reproducing bugs that simulate complex data requirements - such as degraded performance - can take a lot of wasted time. One workaround is `chrome-envious`, a Chrome Extension we wrote to swap out live URL requests in a running site, allowing a developer to run their local assets against a deployed environment. 

**Name**:
Justin J Moses

**Twitter Handle (optional)**:
@justinjmoses

**Website (optional):**

**Months Available to Speak:** 
Apr 2017, May 2017, June 2017
,## BrooklynJS Talk Submission

**Talk Title:**
React-Charts: Declarative & deterministic data visualizations for React

**Talk Description:**
When I wrote Chart.js v2, I learned a lot of what people expect and need in a charting library.  But when attempting to achieve the same great usability in the React ecosystem, I noticed a massive whole in my heart that Chart.js could no longer completely fill.  I needed a charting library that works as easily as Chart.js (and looks just as great) but lets me take advantage of React's awesome power of composition, performance, and lifecycle. React-Charts is a data visualization library that embodies the spirit of Chart.js in a way that will make react developers swoon and sing praises to the visualization gods.

I plan on releasing the library live on stage, along with presenting its capabilities and how it stacks up to the competition (objectively of course).  I am also the creator/maintainer of Jumpsuit, React-Table, and React-Form, and still help maintain Chart.js, so I would hopefully be able to instill some learned wisdom from the open source realm and what it takes to build/contribute-to an open source library (and how rewarding it can be)

**Name**:
Tanner Linsley

**Twitter Handle (optional)**:
tannerlinsley (also my github handle)

**Website (optional):**
The react-storybook that I'm using to build the library is at react-charts.js.org.  Bear in mind this library is under construction, so let me know if you experience any problems or disappointments :( I will fix them immediately (yes, even your disappointments ;) )

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
I would love to speak at your upcoming BrookThursday, April 20th.
,## BrooklynJS Talk Submission

**Talk Title:** Node v. Element

**Talk Description:**

As JS developers, we tend to use the terms "node" and "element" fairly interchangeably.  These are different things though (hint: one is a type of the other) and they both are accessible to you.  I'll dig into why these both exist, the fun (unexpected) ways they differ, and how the things we do in our day to day work can actually be really confusing when we look closer at them!

**Name**: John Crepezzi

**Twitter Handle (optional)**: [@seejohnrun](https://twitter.com/seejohnrun)

**Website (optional):** http://seejohncode.com

**Months Available to Speak:** April (4), May (5), July (7),## BrooklynJS Talk Submission

**Talk Title:**
Interventions (internet and otherwise)

**Talk Description:**
As someone who can’t stand modern technology and can’t stop using it, I decided to be the change I wanted to see in the world. By creating technology that is flawed/useless/regressive/frustrating/etc, I attempt to create unexpected experiences that resist the homogenization of tech and the hegemony of the screen.

This talk will cover a few of my recent physical and digital interventions and how JavaScript and I came to be.

**Name**:
Chino Kim

**Twitter Handle (optional)**:
@chjno_

**Website (optional):**
http://chino.kim

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
April,## BrooklynJS Talk Submission

**Talk Title:** Streetmix: the BrooklynJS talk

**Talk Description:** In 2013 an urban designer started a civic tech project that changed the face of urban planning forever. 3.5 years later we are still a scrappy open source project, but we built it in Node.js and JavaScript back when no one believed it could do what we're doing with it. Sure, we might have launched with a single 10,000+ line JS file instead of a module bundler and we're still on MongoDB, but in the past year we've migrated large parts of it to ES2015 and React/Redux, and maybe we will switch to PostgreSQL? Who knows? Despite JavaScript hijinks, it turns out a ton of urban planners and local bike/pedestrian mobility advocates depend on us to create change in their community. And I'm still not being paid to do any of this. Listen to me rant about that for 10 minutes.

**Name**: Lou Huang

**Twitter Handle (optional)**: saikofish

**Website (optional):** https://streetmix.net/

**Months Available to Speak:** April, May(?), June, July, etc
,## BrooklynJS Talk Submission

**Talk Title:**

CSS Art History 101


**Talk Description:**

For centuries the visual arts have been used to tell stories, warn people about dangers and invoke emotion. Today we use the internet for all those purposes and more. Just as the Vatican employed painters to spread their message – it will be the developers and designers who will lead us into the next Renaissance. But there is still a lot to learn from the great masters. In this talk, we will flexbox the Golden Ratio with Leonardo DaVinci, up the pixel ratio for our devices with the Impressionists & ”inspect elements” of some iconic works of art to make the web a more beautiful place.

(aka the talk i gave at CSSConf EU earlier this month)


**Name**:

Patricia Realini


**Twitter Handle (optional)**:

[@patriciarealini](twitter.com/patriciarealini)


**Website (optional):**

patriciarealini.com


**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

![giphy](https://cloud.githubusercontent.com/assets/7608497/26011881/0daaf994-3753-11e7-88dc-49655c25d15b.gif)
![giphy 1](https://cloud.githubusercontent.com/assets/7608497/26011887/0fd72030-3753-11e7-8808-8e9c8d33721d.gif)

,## BrooklynJS Talk Submission

**Talk Title:**

WebAssembly: A New Frontier

**Talk Description:**

WebAssembly is a way to run code on the web that's not JavaScript, so that your existing and future JavaScript code can be better. For example, maybe you're a bank who has a lot of C# or Java code you've worked hard on to calculate mortgage rates, and you want to make that available to developers who are writing JS. Now you can -- effectively, efficiently, and compactly!

In this talk, we'll discuss what WebAssembly is, how it works, and how it can team up with your JS to make your applications much more powerful.

**Name**: John Feminella

**Twitter Handle (optional)**: [@jxxf](https://twitter.com/jxxf)

**Website (optional):** http://jxf.me

**Months Available to Speak:** 2017-05 (90% certainty), 2017-07 (90% certainty),## BrooklynJS Talk Submission

**Talk Title:** Hybrid Static: Making Static Websites Dynamic

**Talk Description:**

As javascript gets better, the number of devices we use multiplies, and speed becomes more important, many companies are moving towards splitting their APIs off from their front ends. As a result, a variety of new architecture styles have emerged to attempt to tackle this new pattern, from entirely static pages to heavy client side apps to isomorphic single page app rendering.

I work at an agency and have had the opportunity to experiment with a number of them across different projects, and have landed on a pattern we call "hybrid static" as the most efficient and least confusing. In this pattern, data and templates are shared between compile time and runtime, so you can decide which parts of the app are rendered as static pages or sections, and which parts are rendered dynamically at runtime. For example, if you were building a blog, you might render the first 10 posts on the first page as static html, then dynamically load the next 10 from the same API into the same template using javascript on the client side if the user goes to the next page. Webhooks allow dynamic rebuilds if data changes in the API so that static pages are always up to date.

The talk would discuss this pattern in depth as well as how it can be achieved using [Spike](https://github.com/static-dev/spike), an extension of webpack 2 made specifically for advanced static site generation.

**Name**: Jeff Escalante

**Twitter Handle (optional)**: [@jescalan](https://twitter.com/jescalan)

**Website (optional):** http://jeffescalante.com

**Months Available to Speak:** April, May, June, July
,## BrooklynJS Talk Submission

**Talk Title:**
CSS styling with React/Redux

**Talk Description:**
CSS styling with React is a hot mess. Let’s discuss! OOCSS vs. BEM vs. inline CSS vs. React styled-components etc.

**Name**:
Christina Entcheva

**Twitter Handle (optional)**:
@christinaent

**Website (optional):**
http://christinaentcheva.com/

**Months Available to Speak:** 
March / April / May
,## BrooklynJS Talk Submission

**Talk Title:**
All I Really Need to Know About Minimalism I Learned from Tiny House Hunters!

**Talk Description:**

Many programmers consider "minimalism" to be a virtue, but few can agree on exactly what it means; should we strive for code that's simple, elegant, or efficient to compute? In this talk I'll discuss my attempts to reconcile these definitions, and how Tiny House Hunters helped me put it all together.

**Name**:
Justin Falcone

**Twitter Handle (optional)**:
@modernserf

**Website (optional):**
https://justinfalcone.com/

**Months Available to Speak:**
Mar / Apr / May,## BrooklynJS Talk Submission

**Talk Title:**
Snapshot Tests are Your Friend (or something)

**Talk Description:**
Snapshot testing was made recently popular by Jest, the React-friendly test tool. But hey guess what it's not just for React. Let's build a simple snapshotter so I can show you what it is, how it's different than other tests, and why it's PERFECT for functionally testing your API responses, no matter what language you use. 

**Name**:
Jason Rhodes

**Twitter Handle (optional)**:
@rhodesjason

**Website (optional):**

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!
April 2017 (best if possible)
May 2017,## BrooklynJS Talk Submission

Biohacking, Cyberpunk & You :  The Future is Now

This talk goes over embedded (in you!) hardware, talks about some rad cyberpunk stuff, and then goes over Augmented Reality with JavaScript

Rachel White

ohhoe

http://rachelisaweso.me

MARCH / APRIL,## BrooklynJS Talk Submission

**Talk Title:**

poetic computation w/ javascript

**Talk Description:**

I will talk about two recent art projects -- an online experiment for exploring geography (https://lines.chromeexperiments.com/) and an interactive public art installation for seeing your face in new ways -- that use JS under the hood.     I am pretty new to javascript so I will talk about what I learned along the way and share some of the tools I found helpful.   

**Name**:

Zach Lieberman

**Twitter Handle (optional)**:

zachlieberman
https://twitter.com/zachlieberman

**Website (optional):**

http://sfpc.io 
https://www.instagram.com/zach.lieberman/

**Months Available to Speak:** We recommend selecting multiple months (up to 3) that you are available to speak. We'll keep your PR open throughout those months if you aren't accepted the first time!

March is good -- later on (may or later) is OK too! ,## BrooklynJS Talk Submission

**Talk Title:**  
"Hacking" Twitch with JavaScript

**Talk Description:**
[Twitch](https://twitch.tv) is a great place for people to watch others play games, cook food, draw, code, and much more. Some viewers are passive, but most are excited to interact with the person running the channel they're watching. Using the in-channel chat box is a great way to converse with your favourite Twitch creator, however this can sometimes feel limited and the response is often delayed. 

Since Twitch chat is run by IRC, we can use NodeJS to listen in the right room and do some really fun things with just a little bit of imagination. In this talk, I'll share my experiences with creating highly entertaining Twitch chat bots that augment the audience's interactions into something much more fun. Expect some laughter, a little bit of hardware, and some fuzzy feelings abound. You'll walk away inspired to explore beyond the face value of the interfaces you are familiar with.


**Name**:  
Suz Hinton

**Twitter Handle (optional)**:  
[@noopkat](https://twitter.com/noopkat)

**Website (optional):**  
[noopkat.com](http://noopkat.com)

**Months Available to Speak:**  
June, July, August would be lovely if you think my talk would be suitable 🤗 
,## BrooklynJS Talk Submission

**Talk Title:** The Olympic Games, visualized through all 5000 Gold Medal winners

**Talk Description:** During the Olympics of Rio 2016 I created a visualization of all 5000 gold medal winners since the very first Olympic Games of 1896, called [Olympic Feathers](http://www.datasketch.es/august/code/nadieh/). In this talk I'd like to take you through the process of data gathering, sketching and coding; the lessons that I learned along the way and how a simple sketch of a feather shape turned into an interactive data visualization.

**Name:** Nadieh Bremer

**Twitter Handle (optional):** [@NadiehBremer](https://twitter.com/NadiehBremer)

**Website (optional):** [VisualCinnamon.com](http://www.visualcinnamon.com/)

**Months Available to Speak:** I'll only be in NY during April
,## BrooklynJS Talk Submission

**Talk Title:** Visualizing Hamilton

**Talk Description:** 
[An Interactive Visualization of Every Line in Hamilton](http://polygraph.cool/hamilton/) is a visual analysis of the relationships between the musical's main characters, and the recurring phrases they're associated with.  The analysis is done via a custom filter tool of every line in the musical, and it's a labor of equal parts blood, sweat, tears, and love.  In this talk, I will talk about the labor that went into it, the mistakes I made, and the insights I found.

**Name**: Shirley Wu

**Twitter Handle (optional)**: [@sxywu](https://twitter.com/sxywu)

**Website (optional):** [sxywu.com](http://sxywu.com/)

**Months Available to Speak:** I will only be in town **April 2017**.
,## BrooklynJS Talk Submission

**Talk Title:**
(Mis)adventures with JS Compilers

**Talk Description:**
This talk will use a small personal project (a simple AI) to explore the usefulness of different JavaScript compilers in meeting various project requirements. It will include a survey of several popular JavaScript compilers (Babel, Emscripten, and TypeScript in particular) with an analysis of their benefits / tradeoffs.

**Name**:
Nathan Epstein

**Twitter Handle (optional)**:
@epstein_n

**Website (optional):**
nepste.in

**Months Available to Speak:** 
March, April, May,## BrooklynJS Talk Submission

**Talk Title:** I Don't Deserve to Be a Developer

**Talk Description:** 10x programmer. Ninja. Rock star. These images of what a software developer should be are widely mocked — and widely shared. If coding is your career, we assume that it must also be your passion; our industry is set up to uplift and celebrate people who fit these stereotypes. What do you do if you’re someone who doesn’t? The truth is that the explosion of software as an industry has created unique distortions in our field. Come hear about the history of programming as a career — it may help you make a place for yourself in an industry that insists you must love what you do, or leave.

**Name**: Sarah Saltrick Meyer

**Twitter Handle (optional)**: meyerini

**Website (optional):**

**Months Available to Speak:** March/April/May,J E R S E Y S C R I P T,Jewelbots are tiny computers that live on your wrist! This open source wearable (the first of its kind!) is full of super powers that are waiting to be unlocked. In 15 minutes we will learn about the different ways to code Jewelbots and awesome things that people are building.,10x programmer. Ninja. Rock star. These images of what a software developer should be are widely mocked — and widely shared. If coding is your career, we assume that it must also be your passion; our industry is set up to uplift and celebrate people who fit these stereotypes. What do you do if you’re someone who doesn’t? The truth is that the explosion of software as an industry has created unique distortions in our field. Come hear about the history of programming as a career — it may help you make a place for yourself in an industry that insists you must love what you do, or leave.

yeah i know this isn't what i submitted last month drag me,Doesn't have to be this month or anything but submitting if people are interested

- Why
- What is it/how it's used
- Call for help

I can also do one for Babili (babel-minify), and babel-preset-env,I'm one of the contributors to the Yarn project. This talk would be about the motivations of Yarn, what it has to offer, and an example workflow of using it in a production environment.  

More specifically:  

- npm, Yarn... why do they both exist?
- What does Yarn aim to accomplish and why should I use it?
- How packages are installed through Yarn
    - What is a lockfile?
    - Where do my packages live?
- Using Yarn inside of AWS,I've been an iOS Developer for most of my professional life, but I had a late start compared to other developers I've interacted with. I was fairly content living in England managing a team of mobile engineers, when one day, I had the good fortune of being offered the opportunity to come back to the USA to focus on Node.js full time.

It was difficult to choose between broadening my horizons and my knowledge, or continuing my path of going deeper into mobile. I chose to take a leap of faith back across the ocean, embarking on an entirely new path of Node.js evangelism/engineering. There have been many challenges and obstacles, as well as rewards. I'd like to share my story about how I've transitioned and what I've learned.,Before I did Javascript, I did Ruby. I've seen the hellish landscapes of godforsaken Rails applications that had been clumsily patched to within an inch of their lives.

This talk will teach you how _not_ to do that.

A few core tenets:

* Never modify or delete; only add.
* Favor modifying the prototype of a _single object_ rather than the prototype of a core data structure.
* Subclass whenever possible.
* Poop in the middle of the floor. (All will be explained.)
* Patch functionally. Side effects will hurt you.
* Think _really hard_ before modifying `Object.prototype`. If you think you know what you're doing, think again.

Thanks! Looking forward to the event!,Hello BrooklynJS!

My name is [Owen Buckley](https://www.linkedin.com/in/owen-buckley-91393447) and I am a software developer and currently a Director of Engineering for [Kenzan](http://kenzan.com/) where  I have been writing and developing JavaScript applications (iTV, web) for close to 10 years.

I have submitted myself for the second position, and would love a chance to present to you and your community!  My topic would be based on a presentation I have given before to a ProvJS meetup about how new language features in ES6 and supersets of JavaScript (like TypeScript) can be leveraged to write cleaner, more maintainable, and consistent JavaScript that can provide a more mature and stable development workflow and stack.

In addition to my job, I also run a small home music studio and try and promote open source through my personal Github and my Github [organization](https://github.com/thegreenhouseio).

Thanks for your consideration and let me know if you have any questions!,The power of diagrams as a tool for documentation and debugging is often overlooked. This talk will cover how and why to use diagrams to communicate with ourselves and others, including their value as a tool to support different learning styles.,A few of the pain points of a newbie to RxJS, discovered by using it to code a simple game.,Hi, I'm Scott Polhemus. I was an engineer on the tech team of the Clinton campaign for the last 5 months before the election. What I saw there was an insanely brilliant and diverse team of engineering and design talent brought together by a shared commitment to build something that would have a real impact on people's lives. It was a team built on trust, communication, collaboration, and love, which became all the more important when the focus shifted from developing and operating a modern campaign platform to coping with grief following the election and trying to find meaning in a confusing world.

This would be my first talk. I wasn't sure about submitting this given the timing of this month's event, but I think it would be nice to take the opportunity to look back on more innocent times and share some stories of what we built on the campaign and why the people I met there give me some hope for the future.,Working talk titles:
1. Let's not romanticize learning to code. It's challenging: mentally, emotionally and physically.
2. learningToCode == learningAboutYourself

I’m a self-taught developer, and the process itself was an exercise in learning about myself. At points I was miserable, experiencing bouts of depression and angst, and quitting multiple times. Following the last time I ‘quit learning to program’ I realized there was some part of me that was self-sabotaging, and I decided to quit that instead. So I left my job, got an internship as a junior developer and have been programming full-time since. 

Part of my angst came from this sense that programming was somehow this innate skill I needed to have been born with, or should be able to develop effortlessly. I now feel that’s insane. But, the reality is, there are other people who think the same and the media projects this idea of learning to program / being a programmer as some sort of romance story: You read an article about programming. You take an online class and you’re instantly hooked. It’s meant to be, happiness for everyone! NOPE.

I feel that we should be sincere and share what the reality of learning to program is really like, regardless of your path. No one experiences it the same way, and sharing mainly the stories of those who were fortunate to excel as programmers, can set others up for failure (or make them feel like they’re failing). Let’s stop romanticizing learning to program / being a programmer - it’s hard, but worth it, if it’s the right fit for you.,# NYC Space/Time Directory

The NYC Space/Time Directory will make urban history accessible through the 
kinds of interactive, location-aware tools used to navigate modern 
cityscapes. It will provide a way for scholars, students, and enthusiasts 
to explore New York City across time periods, and to add their own 
knowledge and expertise. 

Over the past five years The New York Public Library has worked on many 
digitization, crowdsourcing, and digital cartography projects, all aiming 
to make the collection of the New York Public Library more accessible. 

The NYC Space/Time Directory, a two-year project funded by the Knight 
Foundation, will build on top of those efforts, and it will create new 
connections between previously unconnected library collections and data 
sources, allowing people to tell new stories about the history of New York 
City. 

# Links

- http://spacetime.nypl.org
- https://github.com/nypl-spacetime
- https://www.meetup.com/historical-data-and-maps-at-nypl/,Hi Brooknlyn JS!

Im proposing an introductory talk about Elm, that interesting and new ML syntax front end language that compiles to JavaScript. I do React and Redux for work, so Im prepared to explain Elm in terms JavaScript folk understand. Im a regular at the NYC Elm meet up, and Ive done a ton of Elm projects. Ive even played around with Elm pretty deeply into its native JavaScript. I dont really want to evangelize Elm, but I would be happy to explain what its all about, how to use it, and its supposed advantages.,I'm in town on the 18th, so I thought it might be a good idea to meet some friends and speak at the event.

## abstract

At @nearForm, we like to scratch our own itch, and we build tools based on the needs of our customers and our own needs as consultants. @davidmarkclements and myself were in London conducting a performance training and consulting, and we noticed one notable pattern: the routes that were logging more were the slowest ones. Moreover, disabling logging allowed far greater throughput. We started a quest to assess the cost of logging. In the end, we ended writing down our own logger, https://www.npmjs.com/package/pino. This talk is the story of our journey.

# Seen at

http://www.nearform.com/nodecrunch/cost-logging/
https://vimeo.com/180476148
https://www.youtube.com/watch?v=zja-_IYNrFc,"Helping people" has always been my MO, but how do you do that without getting stuck in systems that perpetuate badness? In this talk, I'll take you on a journey through medicine, tech, and education to highlight how responsibly "nudging" systems in the right direction can be surprisingly effective, especially if you guide yourself with impact rather than revenue. It's an evidence-based journey, a journey I've lived, and one that speaks to one of the prime goals of most of us: making a difference with the work we do.

I will talk about:

- building a team intentionally and giving up privilege as a needed prerequisite
- setting company truths and KPIs to align social impact with growth
- navigating the (false!) for-profit/non-profit gauntlet
- Vue.js as a frontend router for a static website (no, really. it didn't go well.)
- leading from behind as a co-founder
- [tutors](https://www.hiclark.com),Hydra is a new microservices library (NPM) which allows you to build NodeJS microservices using very little code. Hydra was open sourced at EmpireNode 2016 

https://www.youtube.com/watch?v=j_yVf9Blcjo

This talk is focused on showing how quickly an express app can be turned into a full microservice.
,I wanted to play my qwerty keyboard as a musical instrument. I wrote the means to do so in node. I learned some things about MIDI and the MIDI libraries available in node. I would love to show you and share what I learned.,This is a talk about the Open Source movement and the Free Software movement it grew out of, about its disregarded heroes and its flawed prophets, about what it's doing for us and what it's doing to us. I'd like to examine how it empowers us, and how it exploits us, and to show you why it's really, really important that we figure out a way to make sure nobody can ever take it from us.,I'm baaaaack

Just launched a new project that I'm really excited about, would love to come and give my fifth talk if you'll have me: https://svelte.technology/ It's a new UI framework (yawn) that uses static analysis and codegen (yay!) to improve the load time/performance of your app.

It looks like you already have five PRs though so I'm happy to resubmit next month instead, just let me know. Thanks!,I'm pretty sure I got this right. Let me know if you want me to change anything,Dark Patterns is WebVR interactive narrative on the future of web surveillance. In this talk, Caroline & I will go over our process of conceptualizing and designing for VR game development, coding for WebVR, failures, frustrations and learnings in design & implementation.,This talk is about a project I recently completed using React Native. I've been working with React for about a year and this was my first experience using React Native. In this talk I will explain the entire project from beginning to end including:

- Project requirements and wireframes
- React Native project structure
- Using Navigator
- Implementing Redux
- Building and deploying

Hopefully, my experience will show you how to use React Native for your future projects.,Object-oriented programming, like frosted tips, slap bracelets, and Western democracy, may seem like a trend whose time has passed. But (almost) everyone's favorite cutting-edge JavaScript framework, React.js, actually makes it easy to program according to the fundamental principles of OOP. Listen in to learn how your React app can improve with the magic of object-oriented programming!,Space your face: spatialized audio for fun and profit

How does the human brain know where a sound is placed? How can we use that information to hack the brain into thinking recorded sound is coming from a certain place? OMG you can do this with the browser? All this and more when Myles Borins SPACES YOUR FACE,Many Open Source projects use `RFCs` to enable technical decision making in a distributed and asynchronous manner. This talk shares real world experience in implementing these processes in engineering teams of different sizes, the effects it had and recommendations on how to help your team use this tool for decision making in young teams, whether you're a manager or not.

,This talk is about a project I recently completed using React Native. I've been working with React for about a year and this was my first experience using React Native. In this talk I will explain the entire project from beginning to end including:

* Project requirements and wireframes
* React Native project structure
* Using Navigator
* Implementing Redux
* Building and deploying

Hopefully, my experience will show you how to use React Native for your future projects.,Blogs: we all love reading them and we all dread writing them. Technical blogging is one of the easiest ways to give back to the tech community, and it was the place that I started when I was fresh graduate of a coding bootcamp and had just started my first developer job.

But we all dread it for a reason: blogging is intimidating. It’s hard to feel like your ideas are valid, and to actually write something without doubting your own qualifications, let alone whether anyone is actually reading anything that you write. So how do we reconcile this with the fact that blogging is one of the best ways to level up your skills?

In this talk, I’ll share what I learned in my one-year project of writing a technical blog every single week. In researching and writing my series of [Technical Tuesday](http://vaidehijoshi.github.io) blog posts, I realized not only what makes blogging so hard, but also how to develop your own technical writing style and structure. We’ll look at the different types of technical blogs that are out there, what the most successful blog posts do well, and how to that pinpoint and then imitate that style in our own technical writing.,Imposter syndrome is something we all get sometimes--how can we not, when we see people who eat, breathe, and live code? As a Silicon Valley native who got into programming after leaving the Valley, I've realized how Imposter Syndrome pushed me to work harder, do more, and learn more. This talk will go over what you can do to stay sane, meet cool people (including mentors), make fun projects you actually look forward to working on, how to be a mentor, and more.,## Amateur radio, or the ~original world wide indie web~

I'd like to talk a little bit about amateur ("ham") radio: the history, the physics, how it enables you to communicate and do cool technology things, and how you can get involved!

Radios power nearly all wireless technology, and may be well known in the JavaScript community due to old packet radio software causing a [Debian name collision](https://packages.debian.org/jessie/node) with node.js.

Hoping to include some fun audio and video clips :radio: 
,The CSS Grid Layout module is expected to start shipping in all modern browsers early next year, and it won't be hiding behind vendor prefixes! So what exactly does that mean? In this talk you'll see examples of layouts previously only possible with JavaScript now made with pure CSS. I'll also introduce you to some of the basics like the new syntax (what on earth kind of unit measurement is "fr"?), how and why Grid is different than Flexbox (and how it's similar), and how it improves accessibility by separating source order from display.
,Undefined is not a(n) x and other things that make people throw their computers off of bridges. 

As developers/designers/humans we have all dealt with tools that have a poor user experience, and make us feel bad. However there is another way; there are compilers that can kindly guide us with plain spoken error messages written in simple language, and provides us with hits toward a path forward. Using Elm (and to some extent Rust) as a case study I want to talk about new tools that focus on making the creative process of writing code better. I believe that friendly tools can go beyond their proposed ease of use, and help us write easier to use software. Tools written with empathy are in a way contagious.

[This](http://elm-lang.org/blog/compiler-errors-for-humans) is my jumping off point , but I also want to pick up some ideas form a talk I saw called [Debugging Ember with Empathy](https://www.youtube.com/watch?v=CctE59nvXyw), and a bit about how these types of tools imfluence the work I do in healthcare.

Also, I didn't escape my & because I never know when to do that.
,I've realized that Engineering Management is actually kinda like Neko Atsume, with a little bit of Pokemon. While this was going to make an excellent [tweetstorm](https://twitter.com/zeigenvector/status/773942944445235200), I decided it would make a better BrooklynJS talk. I would like to talk through this metaphor for 10 minutes.
,[Beaker](https://beakerbrowser.com) is an experimental fork of Chrome. It's being created in collaboration with the [Dat project](http://dat-data.com/about) to integrate peer-to-peer protocols and APIs into the Web.

I'd like to demo the browser, share some of our ideals and ideas for the future, and talk about as many technical decisions as I can in 10 minutes. I'll discuss how Dat works, why we're not using blockchains, and how we can make the browser more OS-like, starting with breaking the host/client relationship.

Overview of the talk:
- Short history
- Demo & technical overview of Dat's protocol
- Ideas for our future
,I'd like to talk about how social code can be social - we can put things on github, and sometimes people will make pull requests, but code put on something like twitter can interact with people - and have both good and bad results.

Twitterbots like pomological or choochoobot are interesting and get a lot of re-tweets, but bots can also talk to people, classic examples like Stealth Mountain are great, whereas Red Scare bot is very divisive.

I'll also talk in depth about how one of my bots inspired someone on the other side of the world to turn it into a playable game: https://twitter.com/MarmiteJunction/status/729755483779813377
And my current process of automating my own twitter account: https://twitter.com/SwartzCr/status/730411807207129088
,I'm part of the AVA (https://github.com/avajs/ava) core team. It's a Node test runner that runs your files in parallel and tests concurrently—giving very good I/O performance. We also ship Babel built-in, have awesome assertion messages, and care a lot about dev experience. There's a ton of interesting technical stuff going on in AVA and its ecosystem that I can talk about.

That said, AVA was the first open source project that I contributed to (I started in November). The people that run AVA were very patient, inclusive, and nice through my many pull requests that led to me contributing enough to be invited to be part of the team. I've learned a ton about empathy and helping people make contributions. There's a lot of knowledge and experiences I want to share!

My talk will introduce AVA a bit from a technical standpoint but would mostly be about managing a welcoming open source community.

Thanks!
,Talk Summary:

We all have biases and they influence how we build products every day. I present a handy checklist that goes over some of these so you can at least be aware of them when making product decisions.  

Ben Hall
benjaminXhall@gmail.com
,# Talk proposal:

_How to use PubNub's [Project EON.js ](https://www.pubnub.com/developers/eon/)framework to easily make realtime charts and graphs._
,[Flow](https://flowtype.org) is a static type checker by facebook. My talk would focus on the practical aspects of typed JS - not the theory. I'd cover:
- 2min: What is flow? and what does the code look like?
- 1min: How to setup a flow project.
- 5min: IDE support and benefits (Atom+[Nuclide](https://nuclide.io/docs/languages/flow/)):
  - Autocomplete
  - Jump to definition
  - Type hints
  - Inline errors/warnings
- 2min: Refactoring code is easy when it's type checked.
,[Popcode](https://popcode.org) is an [open-source](https://github.com/popcodeorg/popcode) web-based HTML/CSS/JavaScript editor for novice web developers. It’s similar to JS Bin, JSFiddle, or CodePen, but with a strong focus on clear, immediate, and comprehensive feedback on mistakes in code. Popcode was developed in response to the lack of purpose-built tools available to students in the ScriptEd program, and is now the official code editor for the first semester of the ScriptEd curriculum.

Outline of the talk:
- Why Popcode exists; live demo
- Technical overview
- Challenges in creating the perfect editor for students

Full disclosure: I’d really like for the outcome of this talk to include some people in the audience getting interested in contributing to the project.
,NESpectre is a genuine 8-bit NES console that will be supernaturally influenced by YOU and the rest of the audience.
http://imgur.com/a/oUqEk

The project involves a dual-port RAM circuit that lets you access the entire 2KB of memory in an NES via a serial port and Node.js / socket.io to serve a user interface to devices. The audience can then modify the ram using a (spooky) currency to change the fate of the unsuspecting player. The main demo runs a 2 player game of Contra and lets the audience add/remove lives and weapons, corrupt graphics and sound, and a few other bizarre effects we found when exploring the game. 

If there's time we'll run a Track & Field demo where the audience is split into teams and the contribution of the audience's taps will make each player run. The results are usually hilarious since we push the speed beyond what's possible by a controller input and the long jump gets really long (off the top of the screen and wrapping around a few times before he lands).

Audience view / UI :
http://imgur.com/a/7vhQY

Technical details :
http://www.andrewreitano.com/2907125-nes-dual-port-ram-interface
,JavaScript code if often asynchronous and handling errors in asynchronous code is hard! Failures show up in aggravatingly arbitrary places with messages that seem to have nothing to do with what actually went wrong and it's way too easy to write programs that fail silently where other languages would helpfully explode with show-stopping exceptions.

But! All the assorted ways of writing async JavaScript (callbacks, events, streams, promises...) have their own unique flavor of effective and elegant error handling. Let's talk about how to pick the right tool for the way the job will probably go wrong.
,## "ECMAScript #FreeJewelry"...You Can Wear Today!

_Rashaun "Snuggs" Stovall_

Ecmascript is providing us with an assortment of new features to the Javascript language. Asyncs, Promises, Generators, Type systems and other deeper features. We can use them today but are a nice to have not a must have.

In this talk we will focus on a handful of new ECMAScript features you can use in the browser today! And if you act now you’ll get string templates, object literal defaults, destructors,
and variable swapping for free!
,A year ago, I had travelled 12 hours by bus to join a group of African developers at Andela, determined to make a difference through technology. Today my code is used by a publically-traded, US-based company and a leader in education software. My experiences growing up in Uganda and overcoming challenges have shaped me as a developer. I plan to share my journey, lessons learned, and the future I see for Africa in technology.
,With the release of _No Man's Sky_, Procedural Content Generation (PCG) has once again entered the Tech Journalism Lexicon™.

In this talk, let's explore PCG through the lens of JavaScript:
- What is Procedural Content Generation?
- Are there really infinite worlds in _No Man's Sky_?
- How does it work?
- How can I use PCG on my CRUD-based Node/React SPA?
,> "First they came for the Nest Protect, and I did not speak out—
> Because I did not have a Nest Protect.
> Then they came for the Aether Cone, and I did not speak out—
> Because I did not have an Aether Cone.
> Then they came for the Revolv Hubs, and I did not speak out—
> Because I did not have a Revolv Hub."

We are on the cusp of an unprecedented age of corporate control over our everyday, though Internet-enabled Things. Even as web developers, however, we often lack direct access to these same devices in our own homes. Terms like Zigbee, Z-Wave and Lutron may seem foreign to us, but these standards make up the backbone of the Internet of Things. If we call ourselves web developers, why should _this_ "Internet" feel so distant?

In this talk, let's explore _how_ the Internet of Things works today, and how we might be able to change it for the better.
,What does beatboxing possibly have to teach us about software development? Way more than you'd expect:
- How to do the Impossible
- Coaching vs Teaching
- How to Breathe
- Hydration, Hydration, Hydration
- Spittle is Gross, but Inevitable

How much of this can I cover in 10 minutes? We'll see! Come, _learn to beatbox_ (!), and let's get better as developers together.
,"Mapping the World in Crayon, Van Gogh, and Faces"

Clickable links:

Vector tiles and client-side canvas

<a href="http://crayonmap.herokuapp.com">
  <img src="https://pbs.twimg.com/media/ByifHGhIcAAseLv.png:large" alt="Crayon Map"/>
  Crayon Map
</a>

WebGL

<a href="http://art-maps.herokuapp.com">
  <img src="http://mapmeld.appspot.com/vangogh.jpg" alt="Van Gogh Map"/>
  Van Gogh Map
</a>

NodeJS-based canvas and command line

<a href="https://github.com/mapmeld/faces-map">
  <img src="https://raw.githubusercontent.com/mapmeld/faces-map/master/minifiedmap.png" width="300" alt="Faces Map"/>
</a>
,Designing in a vacuum is challenging. It’s more than challenging - it’s hard, painful, sad, depressing, defeating, pointless, infuriating, lonely - you get my point? It can potentially be debilitating for a creative to be working in a silo, which from time to time could happen on a project. To address this, I've been experimenting with some techniques to support pair designing that I'd like to share.
,Added in the missing 🔗. Thanks!
,After publishing my own npm and bower libraries with hundreds of downloads in the first month, I wanted to share the process of creating open source code and maintaining it for other developers to easily integrate into their own programs. Talk highlights include:
- Defining what a "library" is.
- Design considerations for easy npm/bower publishing.
- Important properties to know in your package.json.
- Writing "clean documentation"

I put myself as the 2nd speaker because I feel this talk would be better in a spot other than the first, but I am open to speaking at any time.

Thanks for your consideration!
,Oh hai. I want to talk about time and how it's garbage and how "time is a social construct" is more real than we want to believe it is. 

I opened this PR from my phone. The future is rad. 

---

No seriously, it's about time. The short description is I want to rant for 10 minutes on time and how it's a BS social construct. The long description is I want to talk about the complexities of time handling in applications. This is not a talk that ends with answers but more like it ends with a checklist and a reminder to really spend 3x the time you normally would have really cementing and thinking about anything related to time in your applications.
,JavaScript code if often asynchronous and handling errors in asynchronous code is hard! Failures show up in aggravatingly arbitrary places with messages that seem to have nothing to do with what actually went wrong and it's way too easy to write programs that fail silently where other languages would helpfully explode with show-stopping exceptions.

But! All the assorted ways of writing async JavaScript (callbacks, events, streams, promises...) have their own unique flavor of effective and elegant error handling. Let's talk about how to pick the right tool for the way the job will probably go wrong.
,shimming the node.js function `process.nextTick` in the browser would seem like a straight forward proposition, but when a module is popular enough there are enough corner cases to challenge straight forward assumptions like 'all functions will complete executing before other code runs' or 'you can cache a function in a local variable' fail to hold true.

In this talk we'll discuss the various corner cases, solutions, and mistaken assumptions I encountered helping maintain the process.nextTick shim for browserify
,When does process become art? When do tools become collaborators? Let's explore the world of procedural art -- both analog and digital -- through the wall drawing of Sol LeWitt. This talk teaches how to make art in the style of LeWitt's wall drawings with CSS and JavaScript, and along the way provides some insight into the history of procedural art, the nature of randomness, and how tools and algorithms for creating art lead to new forms of collaboration.

---

This talk was selected for NationJS and I want to beta-test it on the BrooklynJS audience before I take it on the road.
,The web has historically been a one-dimensional medium: start at the top and scroll down. Unexplored capabilities in the browser let us break out of the 1D world and into the 3D universe.

In this talk, we'll examine animating the SVG viewBox, giving us access to powerful three-dimensional motion effects. We'll use these techniques to provide spatial animations that are high-resolution, performant, and best of all, easily accessible to designers who don't need to learn how to program to deliver cinematic-quality animations on the web.
,Turns out you can write _any_ JavaScript using only the characters `!`, `+`, `[`, `]`, `(`, and `)`! I'll give an overview of how and why this works. I'll also do some small demonstrations using a JS console.

Has anyone done this talk before? If so I'll think of something else! Also, I didn't invent this stuff. I learned about this topic from other peoples' blog posts/projects. I'll cite!

Thank you,
Aaron
,For REASONS\* I forked [an existing JS in JS interpreter](https://github.com/NeilFraser/JS-Interpreter) to [make some modifications](https://github.com/thomasballinger/hotswapping-js-interp). Reading and modifying a simple (es3 or so) JavaScript interpreter in JavaScript taught me a lot about JavaScript! As I go over what I added and why (serialization of interpreter state for restoring previous states, a global namespace for functions for hotswapping, and AST diffing to detect what code a user changed) we'll see that interpreters aren't so scary and learn some JavaScript edge case trivia along with way.

*After writing my own interpreter for a made-up language for a [2d space game](http://jan14prototype.ballingt.com/) to write missile and ship AI with, I decided it wasn't fair to make players learn a new language for this and [switched to JavaScript](http://march8prototype.ballingt.com/?simulator). This time instead of [writing my own interpreter](https://github.com/thomasballinger/shiplang/blob/master/eval.ts) I started with Neil Fraser's JavaScript interpreter because it worked with his [Blockly](https://developers.google.com/blockly/) project, but later decided not to use it.
,Hi! I'll be in NYC for this splendid event and am happy to give a short talk about what I've learned about the sad state of the web as the creator of a browser-extension adblocker (Privacy Badger) and an adblocking browser (Brave). Many people use adblockers but relatively few know how the popular ones work, and what exactly each of them defends against. I'll also talk about alternative ways to fund content creators.
,"A perſonal caſe study in which Triangles are made to cavort and carouſe in the service of giving Earthly form to a Platonic Ideal."

A short introduction to Genetic Algorithms with an eye toward using them to make pretty pictures out of triangles on &lt;canvas>.
,Over the past six month, two designers and I built an SMS-based bot that facilitates games of Emoji pictionary between friends. How it works: Player A gets a phrase and texts out some emoji. Players B, C, and D try to guess what the emojis mean. Cue trash talking and verbal abuse.

Over the course of building the bot, we've learned a few things that might be of interest to fellow Javascripters:
- Our backend architecture supporting a meager-intelligence bot
- Handling emojis and dealing with the astral plane in Node.js
- Design-focused best practices for communication via text with bots
- Testing strategies for keeping bots sane
- Strategies for keeping costs down over SMS
,WebGL is increasingly being used to bring powerful 3d and 2d graphics to web applications. But why use something for what it's meant for when we can do something completely different?

We'll do a quick run through of how WebGL works under the hood to make fancy graphics so smooth, then see how we can take advantage of that same power to do some parallelizable math operations far faster than in just Javascript.
,In May, I released an interactive map as part of a small research project called [Property Praxis](http://propertypraxis.org).

This project is the result of a year of research into property ownership in Detroit, led by a small group of critical geographers and myself. Our research revealed that [one out of every five parcels in Detroit are owned by a speculator](http://michiganradio.org/post/land-speculation-helping-or-hurting-detroit). Beyond radically shaping Detroit's geographic and physical space, this has a profound impact on housing in Detroit–a majority African American city that was among the most heavily affected areas during the 2008 economic crisis.

Our hope is that this map can be used as a tool to increase transparency in Detroit's property market, inform policy makers and the media, and help support community activists fighting against housing injustice in Detroit and elsewhere.

This talk will briefly sketch how I became involved in this project, what I learned about my hometown, how I used [CartoDB](cartodb.com), [Ember](emberjs.com), and [Leaflet](leafletjs.com) to visualize the result of our research, and our hope for how the project can support housing rights activism.

This will be very loosely based on talks I gave at the [Allied Media Conference](https://www.alliedmedia.org/amc) earlier in June and [JS.Geo](http://www.jsgeo.com) last October.
,I hope I'm not too late to propose! I am planning a trip to NYC and would love to stop in to BrooklynJS while I'm there. And since it's the event that inspired me to do my first code cartoon, it seems only fitting that I do another one.

---

So many people talk about the virtual DOM, but how many know what it actually does? This talk imagines "what if code were people" and shows you how those people would build a virtual DOM together, plus what they would do with the virtual DOM once it's built.
,I have interviewed probably more than a hundred people, and have seen all sorts of responses.
I will show the common mistakes, the things I want to see before the interview, and what I expect
to learn during the interview. The presentation will reveal my secrets and answer the question
no one is asking: why would I not hire Albert Einstein to fill an open JavaScript position?
,I'll be attending the July 26-28th meeting of the TC39 JavaScript standards committee, where I plan to present [the case for nested `import` declarations](https://github.com/benjamn/reify/blob/master/WHY_NEST_IMPORTS.md). It would help my case immensely if I could do a dry-run of my presentation at BrooklynJS, one week before the real deal.

If you've ever wondered what those stuffy standards committee meetings are like, here's your chance to _be the committee_. Am I a madman, a dangerous heretic, or a prophet of incremental improvements to the ECMAScript specification? Your feedback could literally influence the course of JavaScript history. At the very least, it'll help me give a better presentation the following week.
,[AVA](https://github.com/avajs/ava) is a JavaScript test runner that runs your tests concurrently and your files in parallel, giving you maximum speed (especially when dealing with IO!). Other features include built-in Babel (including `async`/`await` functions), test macros, watcher, TAP output, great assertion messages through [power-assert](https://github.com/power-assert-js/power-assert).

My talk would be an introduction to AVA and how it can benefit your React and Node testing with its speed, developer experience, and isolated processes. There'll be a lot of code and theory to explain why and how concurrency helps and how atomic tests make your life easier. Lastly, I want to talk about managing and inclusive and inviting open source project like AVA and my experience with it.
,The "cloud" is a [mere construct in our minds](https://d21ii91i3y6o6h.cloudfront.net/gallery_images/from_proof/3442/large/1418280711/die-cut-stickers.png), but those wild kids are taking things further with "serverless" apps. Now you don't even have an imaginary server – you can run "serverless"!

Serverless is the ~~possible~~ solution to the monolith => microservices => **how do we run all of these things** problem. Using on-demand computation (ex. AWS Lambda), your code no longer lives on a box somewhere, but instead ... lives on a box somewhere **_but_** you only pay for the time it takes to execute. It's pretty neat!

In this talk, you'll learn what is serverless even, what various systems and terms people are talking about, and we'll deploy on on-demand function together, in Node.js bien sûr.
,Thanks for taking a look!
,Run a Node-based app on a thumb-sized device powered by a cellphone battery? Heck yeah! With microcontrollers becoming very inexpensive and communities growing around some of the devices, they've become even easier to work with.

This interactive talk will show how you can create an interactive web app using Javascript on just a $2 device. I'll explain what an ESP8266 is, how you can run Javascript on it, and a demonstrate a live interactive web app running on the device.

Outline:
- What's an ESP8266 — and what does it do?
- What is Espruino?
- Interactive live demo
- How to build your own.
,# Solving the JavaScript Problem with Elm

Ten minutes is not a lot of time to introduce an entire language; instead, the very least I can do is explain why I used to be completely unexcited about working on the front end, and now I find myself submitting a talk proposal to a JavaScript meeting.

The "JavaScript Problem" is the name I give the following three issues:
- Lack of function arity in JS, which is solved by technologies like TypeScript and Flow
- Lack of an enforced programming paradigm in JS, which is solved by frameworks like Angular, Ember and React/Flow
- Lack of a community consensus around the way to solve the previous two things, which results in "JavaScript fatigue" and is _sort of_ solved (but also compounded) by bundlers and transpilers like Browserify, Babel and Webpack

Elm is an incredible language that compiles to JavaScript for use on the client side while cleverly solving each these issues. In this talk I will demonstrate how Elm addresses them with its strong typing system, the Elm Architecture and a conscious philosophy centered around simplicity and user-friendliness. That may seem like a lot for a ten-minute presentation, but I think that small, illustrative examples will speak for themselves.

I will also show you where you can go for more juicy Elm deets and how you can easily get started on your own.
,,@willmanduffy saw my Twitter outline for this and asked for it to debut at BrooklynJS, so here it is!

**Inclusion is a Captain's Job** uses the fantasy lens of Star Trek to bring a fresh perspective to a well-worn conversation. Starfleet is a technical organization that lives or dies based on its diversity, which makes it every captain's job to include even the most alien of their crew mates. While examples abound across the Trek canon, the overall thesis is consistent: it's up to our leaders to create a workplace where all are welcome.

Two of my favorite topics, combined! More fun than a barrel of Bolians!
,About a year or two ago, I discovered Angus Croll’s wonderful If Hemingway Wrote JavaScript in the bookstore, and I became endlessly entranced. I studied music in college, and I started thinking a lot about what the equivalents would be between music and JS. 

A lot has changed in the JS world since Angus McAngusFace’s book came out, and maybe it’s time for a 2.0 on the intersection of art and JS, and JS as a language? What if Bach wrote promises and generators? How would Philip Glass use recursion? Let’s explore the possibilities.
,Front end testing in the browser is really, really (2 really's) hard to get right. If you do it, it likely gets unmaintainable quickly (people start ignoring those intermittently failing tests), or teams just avoid 'front end testing' altogether. Building on Martin Fowler's notion of the evil that is non-deterministic tests [http://martinfowler.com/articles/nonDeterminism.html], we sought out to test front end-components like unit tests, but still allow for interactivity (clicking around, filling in forms, etc.). I'll demo and explain why we did what we did, and offer some little rules-of-thumb for general front end testing.
,I've been working on a browser-based game, [Manygolf](https://manygolf.club/), for the past few months. Manygolf uses [TypeScript](http://www.typescriptlang.org/), a statically-typed language that compiles to JavaScript. In this talk, I'll discuss various features of TypeScript that helped me build this game (and could help others build their apps & games!), as well as some general tips for building games for the web. My hope is that it will inspire people to give TypeScript a shot and to try making a game :D

[This blog post](http://devlog.disco.zone/2016/04/18/manygolf/) has more technical background on Manygolf, and mentions many of the topics I'd like to (very briefly) cover, including universal JS, netcode, and state management.
,Submitted the same thing last month - https://github.com/brooklynjs/brooklynjs.github.io/pull/278

I think it will be about making babel plugins; if that takes too long then it'll be just some inspiration why on everyone should learn to make one!
,At its core, Atomic Design is a design methodology to create both simple and complex components which make up a website. I've been very interested in this design pattern after seeing it used by Warby Parker but it wasn't until hearing a really great talk on accessibility by Brian Sinclair that I realized it could also help us be better to the people using our software.

By never writing custom buttons, forms or even <img> tags, we can strive for and achieve better design for everyone using our websites. 

The talk will be a quick review of the component based design systems and libraries out there and then a dive into how React + propTypes + Atomic Design can make everyone's life better. At the end of the talk we'll have made(in the browser) a small site using components that are accessible by default.
,No seriously, it's about time. The short description is I want to rant for 10 minutes on time and how it's a BS social construct. The long description is I want to talk about the complexities of time handling in applications. This is not a talk that ends with answers but more like it ends with a checklist and a reminder to _really_ spend 3x the time you normally would have really cementing and thinking about anything related to time in your applications.
,React gives you all of the tools to completely eliminate CSS from your next project. Heck, React even encourages it, favoring inline styles to CSS. But it doesn't provide a great roadmap for how this should be done.
I'll explore a post-CSS world, showing you how I approach organizing and managing style objects and reusable components, how media queries like :hover and :focus can be performed without CSS, and how I build responsive elements using a declarative framework like React (hint: I don't use media queries for that).
After seeing how elegant life without CSS can be, you may want to abandon it in your next project too!
,Electron! The complete NodeJS and web browser APIs, together, in the same JavaScript file! Build (almost) any desktop application you can dream of.

Electron's simplicity in design benefits its authors and users greatly, but some native desktop functionality is sacrificed - like customizable drag and drop. The Neutrino in this talk is my patch (and hopefully merged PR) giving Electron developers more control over content dragged out of Electron.

Why? So I could build the app I wanted to see in the world! Working title "Clip Art Y2K".
,,the link on the site was directing to `http://brooklynjs.com/www.patriciarealini.com`
,In December we came across a massive ad fraud which was cloaking the real domain of a web page using client side techniques:

You can see more about it here:
https://github.com/fertel/cloak-pub

Here is a press release from when Comscore found it:
http://www.comscore.com/Insights/Press-Releases/2016/4/comScore-Labs-Discovers-Placement-Laundering-Attack-in-SafeFrame

During the talk I will go through the way in which they perpetrate the fraud. How they go about doing it by overriding some of Javascript's standard built in objects and functions. How one can/can't protect against this - and why it's hard to trust someone else's windows and scripts.
,…ct with Redux baked in)
,For a while, I wanted to be an Engineering Manager “when I grew up.” I figured I’d be good at it, but it took becoming one to really understand all that goes into it. In this talk, I’ll discuss the my transition from JavaScript Engineer to Engineering Manager, including what being an Engineering Manager entails— making sure her team is happy, healthy, communicating, growing, and, of course, getting their work done— and how it’s affected the way I interact with co-workers and other humans.

Bonus points (maybe?) because this month will be the two year anniversary of my first talk, which was at BrooklynJS! ✨ 
,In tandem with my EmpireJS talk — Jiro Dreams of Code: What Startups Can Learn From Chef Culture — I want to dig into what developers can learn from chefs as they write recipes for those who come behind them to figure out their code: documentation. My Empire talk will only graze on some of these points and so I would like to use this chance to delve a little deeper into this specific aspect of the commonalities between chefs and engineers. 
Feel free to shoot me an email or a slack message (i am in borojs slack as `patricia`) if you have any questions. 😁 
,Your World of Text, launched in 2009, is an interactive web art project that gets 100,000 visitors per month. The site is (realtime, infinite) wall where anonymous users can write and overwrite each other. I will talk about the history of the site and some implementation details.
,Data is omnipresent in your environment. Tiny pieces assemble into a larger meaning that your mind and senses can understand. Certain chunks of data can repel people, the same data can attract others. 

How can you use JavaScript to transform the context into something completely different? Can it pass through several machines of distortion and back out again, a better version?

In my latest art project, I take annoying audio from the NYC subway and attempt to endear others to it by hiding what it truly is, using JavaScript in the browser. I'll outline the technology used, the decisions I made on the data transformation/corruption, and most importantly, why you should be silly with code.
,As web-based data visualizations are becoming more sophisticated and data sets continue to increase in size, our favorite SVG is not always the right tool for the job.

In this short talk I discuss a simple technique to make SVG play nicely with Canvas and WebGL to quickly create performant interactives on the web.

I give examples of how to do this using either d3.js or React, and show live examples of how sites like the New York Times have used this method.
,I kind of just want a ticket to see Rich's Buble talk and Evan's Vue talk but if anyone wants to hear about Babel, 👍.

I'm thinking it could either be about how Babel works, how you can contribute (always appreciated), or making your own plugin?
,This will be mostly about the [recently announced Vue.js 2.0](https://medium.com/the-vue-point/announcing-vue-js-2-0-8af1bde7ab9#.x12emil1m), in which I will talk about templates vs. virtual DOM, why both are great for their use cases, and how combining them actually leads to some interesting low-hanging fruit in terms of performance optimization.
,When does process become art? When do tools become collaborators? Let's explore the world of procedural art -- both analog and digital -- through the wall drawing of Sol LeWitt. This talk teaches how to make art in the style of LeWitt's wall drawings with CSS and JavaScript, and along the way provides some insight into the history of procedural art, the nature of randomness, and how tools and algorithms for creating art lead to new forms of collaboration.
,So a couple of weeks ago I released a Babel alternative called [Bublé](https://buble.surge.sh). It has some very different design goals and constraints to Babel, which might be interesting to explore.

Mostly I'd like to talk about the approach to code transformation. Typically, the way that compilers work (as far as I can tell – certainly in Babel's case) is to generate an AST from the source code, analyse that AST, manipulate it, then generate code from it. Bublé skips the last two steps, modifying the code in place instead. This approach is _waaaay_ faster, and doesn't bork up your formatting and code style. And it's done in a way that you still get sourcemaps etc.

Unless you think that's too in-the-weeds in which case there are a few other angles:
- ES2015 footguns
- pragmatic vs ideological programming
- you say NIH, I say progress
- designing APIs around humans, rather than the implementation

Cheers!
,JavaScript is a very expressive language. See how it can inspire the whole range of human emotion - wonder, fear, joy, determination... Hear about success and failure from the greats. Feel free to pin any of these to your mirror :)
# quotestagram #js

(This is a mostly humorous talk. It doesn't really have any technical information, but does encourage using code as a language for personal expression. I gave this talk earlier this month at [BostonJS](http://www.meetup.com/boston_JS/events/228985404/) and it went over quite well)
,Cats love sitting in the boxes their expensive toys came in. Tasty’s Facebook page is putting Food Network to shame. Bob's Burgers is taking over TV.

What makes an idea worth building? Where is the line between simple and trivial? As engineers we can do amazing things with code, but it's just a tool—for all the bells and whistles we can build, we shouldn’t forget the amazing things code allows us to do with content.

At face value, the stuff mentioned above isn't that impressive…cats are just sitting in cardboard, Tasty is just telling us recipes, Bob is just a cartoon—but their _content_ makes them something different: Bob's Burgers chellenges how we think about storytelling, Tasty makes cooking more accessible, cats…are cats.

I want to talk about projects that aren’t all that impressive from an obvious technical standpoint, but are still really compelling because of their content. 

This talk will have 3 parts: 
1. Explore how appreciating content/concept can help frame our feels around both our own work and stuff we encounter
2. Look at some examples of ‘simple’ things that got a lot of traction, maybe a couple quotes cause who doesn’t love a good pullquote (there will be audio)
3. Wrap up with a couple personal projects that follow this philosophy of simple tech/interesting content
,i will talk about these things. this is fairly off the cuff but mostly what i would like to say
- "Your perfectly valid JS is not valid. Your code is not valid. Are you even valid?" is not a healthy question to have in your life. Linter test build failures make me feel this way. Are Trailing spaces, Spaces around infix operators, and semi colons more important than your mental health?
- Linters make the development process an authoritarian relationship where conformity is painful and each individuals responsibility.
- I thrive in spaces that promote creativity and as a human my primary skill is inconsistency. If we use robots to find creative syntax we should let the robot change it instead of telling us we are wrong. Lets use tools that are tools not overlords.
- Switching out eslint with esformatter. standard-format.  more work we need to do.
- Help me get rid of every linter in your life.
,myEyeSelfie is an art/tech project: we take a macro photo of a person's eye, upload it to myeyeselfie.com and my javascript code processes and analyzes the image, using Hough algorithm finds and crops out the iris (which later on is projected onto a dome: https://www.instagram.com/myeyeselfie/)
,While the rise of spaces like the Recurse Center is promising, much of my profession still doesn't do a particularly good job at teaching our skills to others.  As I move from being a journey-level developer to mentoring others, I've recently been reflecting on how I learned what I've learned. I'd like to talk about these three tools that helped me figure out how to code, become a software engineer, and now learn to teach what I've mastered.
,When it comes to team process there are a million variations of Agile, Scrum, Lean, etc. that engineering teams use to be productive and build good products. But no matter what process your team uses, how can _you_ be the best dev you can be? By collaborating, of course! In this talk, we'll go over some ways to apply engineering skills to collaborate better with designers and product people on your team.
,I head up "frontend ops", if there is such a thing, along with the frontend architectural decisions and implementation on the Hillary Clinton Campaign at our HQ in Brooklyn Heights. We use all the typical hipster bells and whistles such as React, Immutable, Flux, Isomorphic JS, Webpack, ESNext, etc...and I'd like to speak about how our build has evolved to be flexible in this rapidly changing ecosystem. 

Our build repo is open source and on my github https://github.com/dtothefp/build-boiler/tree/master/packages
,Use JavaScript to create and visualize a simple model for predicting the fastest growing and biggest programming languages/frameworks (using data from the Stack Overflow Developer Survey). 
,Three approaches to D3.js and React.js: their pros, cons, and use cases.  Slides [here](http://slides.com/shirleywu/deck#/).
,When available syntax and paradigms don't cut the mustard, web developers like to turn to new technology. Javascript not doing it for you? Try Coffeescript. CSS not working out? Try SASS.  But over time, people gravitate towards solutions which allow them to write code using syntax that will work natively in the future.  Why use Coffeescript when you've got ES6?! Why use SASS when you've got PostCSS+CSSNext?!

For the view, when concatenating a string doesn't work out, we rely on templating engines like Handlebars and Nunjucks, or on more recent approaches like React's JSX.  But do you expect browsers to have native support for these technologies?  

The solution?! https://github.com/maxogden/yo-yo! Combining [ES6 Template Literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) and intelligent DOM diffing, yo-yo uses syntax and language features that are already supported in some modern browsers, and with its 4kb footprint is easy to include client-side!  

In addition to explaining some of the library's features, I'll be demoing a small ToDo example to illustrate how easy it is to get started with `yo-yo`

![yo yes](http://img5.ph.126.net/yJJkVmfi7rypVOpTW0uenw==/6597324853353903245.jpg)
,Pokémon celebrates its 20th anniversary this year, so why not take some time off from getting fatigued over JavaScript to relax with one of the world's most popular games. Every developer starts their journey with a single framework, like the protagonist of Red and Blue started out with their first companion. But the path to becoming a champion involves exploring new frontiers, meeting new people, and learning that no option comes without weaknesses. Have you mastered 150+ JavaScript modules? There's lots to learn from Pokemon for those new and old to the series.

![](https://media.giphy.com/media/NxrM8cF5LUCiY/giphy.gif)
,So I launched mostbeautiful.horse a couple weeks ago from my phone while hanging out at a friends place and losing at Magic the Gathering. Bought a domain on hover.com and paid with paypal. Then codeded a static html/css site on github using their gh-pages branch trick https://github.com/byronhulcher/mostbeautifuldothorse/tree/gh-pages and pointed the DNS on hover to that with domain masking http://byronhulcher.github.io/mostbeautifuldothorse/. Boop, instant website in about 20 minutes, depending on how fast you can type out html on your phones keypad.

I'm not gonna demo this or anything but wanna just give a quick pitch to people cause i thought it was pretty fun to get a website from zero to live using just a tiny touchscreen. I'm hoping to run a workshop on this at some point in 2016 so hoping to see whether people would be receptive/spontaneous enough to go along with it. Maybe some people will be more creative than just an image and a link!
,We'd like to introduce our open sourced fully responsive video recorder and player.
,I love the explanatory power of gifs, and lately I've been chasing the notion of how to best write JS animations and automatically turn them into gifs without screen capture. I've worked through at least 10 different approaches to this, ranging from slightly convoluted to completely insane, mostly summarized here:

https://github.com/veltman/animation-tests/

My talk would set up the problem and go through some of these ideas and the tradeoffs of each one, plus the "what-ifs" that are still on my mind and how these techniques can be put towards making videos with JavaScript.
,_How to Print Your Own ASCII Art Selfies_

Everyone loves selfies and ASCII art. In this talk I will live code a simple Node.js app that will allow the audience to send a selfie via MMS and have it printed in ASCII art with a thermal receipt printer. The printer has bluetooth capabilities and is the same device that the meter maids in NYC use.
,I was hoping to give a talk about a project I'm working on -- webcoder -- which allows you to edit code remotely in a browser (github.com/mjlyons/webcoder, screenshot attached). Unlike Sublime, Atom, etc., which assume the editor runs on the same computer as the code, webcoder lets you work from any computer's web browser regardless of where the code lives/runs on. So you could store and run your code on a a Digital Ocean instance and and edit the code from any computer that can run a web browser. It's certainly not as full featured as pretty much any other code editor, but it does syntax highlighting for a bunch of languages (including JS), has a folder navigator, and Ctrl-P fast file search. It's good enough that I use it for my day job, and it's written in ES6 with React for the client and Express for the server.

Thanks,
Mike
,**What's in a Name? The story of Mullet.io** :neckbeard: 

This is the story of [mullet.io](www.mullet.io), [fireball](https://github.com/lynnaloo/fireball), [yacht-rock](https://github.com/lynnaloo/yacht-rock), [oran.js](https://github.com/lynnaloo/oranjs), [sock-puppet](https://github.com/pchinjr/sock-puppet) and many other open-source projects designed and named purely for learning and a few laughs. I want to talk about how I started taking open-source less seriously and how having some fun with your projects can lower the barriers and get people excited contributing and learning.
,My favorite technical interview question is "What's wrong with JSON, and how would you fix it?"

Recently I released a thing called ARSON which answers that question as thoroughly as I have ever dreamed it could be answered: https://twitter.com/benjamn/status/694319413353451520

If you accept this talk, I suppose I'll have to retire the question. At least it had a good run!
,My wife and I have been working on a project together called [Flight Lines](http://ellieirons.com/projects/flight-lines/). The most recent iteration, completed with support from a Turbulence.org commission, uses `<canvas>` and some fancy pixel stuff (similar to [pixelmatch](https://github.com/mapbox/pixelmatch)) to analyze our vast collection of sky videos and make portraits of the activity therein. There is more written about the project on that first link up above, and also at [this Turbulence page](http://turbulence.org/commissions/flightlines/).
,Will go through step by step how ad fraud is perpetrated on the client.

I will show how to take **advantage** of the browser security model. Also, I will demo/explain how fraudsters can and do go about polluting a windows global javascript objects and functions. 
,In my home automation talk I [mentioned](https://speakerdeck.com/arturi/koti-home-automation-robot#44) that one of the ways to control my apartment is to chat with a Telegram app bot. I’d like to explain how that bot works (spoiler: [Telegram Bot API](https://core.telegram.org/bots) is cool), how you can build your own, and what it can do. From weather forecasts to emergency notifications, ordering food, switching lights and opening doors at your house.
,The Sloppy Moose Running Club in Sacramento had an event check-in problem. Paper sign-in forms in small spaces caused long lines and a frustrating experience. This talk shows various ways that iBeacon technology can be used (and abused) to interact with a user's relative location which ultimately led to a quicker and more accurate check-in experience for the Moosers.
,Steven Sonnes - steve@nerdydata.com
Presentation on how search engines crawl, index and rank documents
,... in your workflow. this talk would be all the optimizations i waste my time on instead of actually coding
,Since its inception in 1982, MIDI has been the defacto protocol for musical instruments. Nearly every single electronic instrument (and many other weird creations) since then speak it.

...and for some inexplicable reason your browser does too...

So let's take this poster-child for browser bloat and build some cool stuff with it!

We'll use this simple, yet powerful protocol to explore the history of electronic music, all while building an arpeggiator (in the browser!) that talks to a real physical synthesizer.

Let's make some javascript music together!

(will require audio, I can route the synthesizer audio to my laptop, or we should be able to use the external speaker mentioned in the FAQ)
,In introducing people to our Flux/React architecture, I have found that the most challenging part of learning Flux is understanding Reactive programming.  Luckily, long ago [0] I read The Structure and Interpretation of Computer Programs and realized that reactive programming is very much like the rules to a certain card game [1].  I will explain how reactive programming is like Magic [2] by walking through some code where everything has been renamed to fit [3] this metaphor.  In the process I hopefully will clarifying why reactive programming is a great fit for JavaScript and make it easier for people to pick up reactive tools from Flux to RxJS and beyond.

[0] We can say that about the 90s now, right?
[1] Or at least, the version of that card game we played in the 90s.
[2] "Magic" like the game, not "magic" like Rails.
[3] "Fit" may be an overstatement.  Metaphors stretch, though, right?
,So I launched [mostbeautiful.horse](mostbeautiful.horse) a couple weeks ago from my phone while hanging out at a friends place and losing at Magic the Gathering. Bought a domain on hover.com and paid with paypal.  Then codeded a static html/css site on github using their gh-pages branch trick https://github.com/byronhulcher/mostbeautifuldothorse/tree/gh-pages and pointed the DNS on hover to that with domain masking http://byronhulcher.github.io/mostbeautifuldothorse/.  Boop, instant website in about 20 minutes, depending on how fast you can type out html on your phones keypad.

I'm not gonna demo this or anything but wanna just give a quick pitch to people  cause i thought it was pretty fun to get a website from zero to live using just a tiny touchscreen.  I'm hoping to run a workshop on this at some point in 2016 so hoping to see whether people would be receptive/spontaneous enough to go along with it.  Maybe some people will be more creative than just an image and a link!
,I'd like to talk about an open source side-project of mine: https://github.com/dmvaldman/samsara. Samsara grew out of my work at famo.us, where I was its Chief Architect. Its main goal is to think of layout as a stream, and to create user interfaces by composing streams. In the process I'll talk about FRP and how it can be used to achieve 60FPS on the web.
,Programming is all about efficiency: Don't repeat yourself, be succinct, follow best practices, etc etc. But what if we leave the DRY world behind, and forget about being the 10x programmer for a day? What can we learn?

Follow me as I do some truly preposterous things with CSS (physics-modelling particle systems? 3d compositing?), and share my experience in doing things the "wrong" way. I'll provide suggestions for how, by experimenting and exploring, we can become more creative and adaptable developers.
,(I utterly failed to come up with a good "work" pun, so please feel free to replace the promo text with something better. :smiley:)

Basically, I would like to give a talk on WebWorkers, why I think they're so awesome, and how they can save us from janky webapps that don't run well on mobile devices. I plan on mostly combining ideas from [this blog post](http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org) and [this talk](https://www.youtube.com/watch?v=okk0BGV9oY0), with maybe some details from [this post](http://nolanlawson.com/2015/09/29/indexeddb-websql-localstorage-what-blocks-the-dom/) if I have time.
,I've given a similar talk at Nodevember, but I'm going to distill the passionate part and excise the tech deep dive from it.
,I've spent the past two years studying social media algorithms, harassment, and online communities. I created a performance art piece called "Social Media Break Up Coordinator" where I give users advice about their social media practices. I'm part life coach, part SEO specialists. But the advice is all algorithmically driven. Users fill out a 21 point quiz, and depending upon what they say, I give them specific, automated responses. This project is also a way for me to collect data around how people use social media, and how connected people are to the privacy policies of social media. I was really interested in seeing what people would say and if they would pay me to be an emotional mechanical turk. The project is also inspired by the sharing economy with the wondering of should we outsource certain things, and emotional hardships to someone, and can we automate that? It's incredibly hard to automate emotion with an algorithm, but it's a lot easier to intervene as a human. This project fits in-between those spaces- part human, and part algorithm, but all designed to fit into the spaces where social media breaks down and falls us, and a new person or thing can step in and help mitigate- be it a work problem, family, friendship or romantic.
,We'll introduce our open source framework that we have used to build Ziggeo.
- Package management system that allows to play nicely with other frameworks
- Package management system that compiles only used modules into the final distributable
- Performant, extensible view engine
- Data synchronization layer 
,For the March Meetup:

Different parts of our brain are accessed by different activities.  This talk will show you images of brain scans demonstrating where our brains are being activated when we code and problem solve.  Explanations will be given as to what these areas are and how they relate to our daily activities
,Hi! My name is Dan Kass and I'm the developer and co-founder at a nonprofit technology startup called JustFix.nyc. We're working to help community organizations and legal services provide better support for people dealing with neglect and harassment in their housing situations by taking human centered design approaches and combining them with access to open data published by various city agencies. We recently won the NYC BigApps competition and are a member of Blue Ridge Labs, a civic technology incubator sponsored by the Robin Hood Foundation. We're working off of a MEAN stack and are really interested in data visualization, improving government services, and building accessible and inclusive technology for all New Yorkers.
,Let me know if my formatting is off! Thanks!
,,I noticed that the `speakers` and `attendees` links in the website footer are broken. I don't know if this is intentional (if it is, feel free to ignore this and apologies for the hassle!).

This PR does two things:
1) Points the speakers/attendees links to the corresponding markdown on Github (this seems to be what is intended).

2)  Minor editing of the speakers and attendees markdown. 
,We hear a lot about “diversity” but what if we could design products for inclusion? By practicing awareness and being conscious/open to feedback, we can all design products that embrace humanity as a whole.
,Absolute-ed for your convenience.
,,The talk I am proposing is a shortened version of the talk (How to Connect Everything You Own to the Internet) that I presented at JSConf Call. I'll go over some tools and code, that will allow a dog to gather information about its environment and send it to the Internet. 
,I'd like to talk about designing and sewing circuits to make twinkling wearables!
I'll focus a bit on how to plan out your dress or giant blinky tapestry, and then write the corresponding code to make a few different effects, so you can twinkle, shine, or pulse!
,What is beautiful code?  I believe the answer is code that expressively employs the power of architecture to clearly communicate with the reader, leaving minimal room for confusion or misunderstanding.  What is beautiful in C will be different than what is beautiful in Smalltalk, and both will be different than beautiful Haskell code.

Often the language itself imposes the paradigm, but Javascript is so easy-going we have to decide for ourselves what type of code we want to create.  Despite the extra work this makes for us, it also allows for innovations that would go against the grain in any other language.  We can write code that is beautiful the way functional code is beautiful, or code that is beautiful the way object-oriented code is beautiful, but it also leaves the door open to novel forms.

One such new approach is Flux, an architecture pattern that emerged from Facebook.  It is an example of reactive programming, and it can be a mind twist for people used to object-oriented or functional paradigms.  Unfortunately the documentation is expansive and at times obtuse, diving quickly into the weeds.  I offer instead a high-level explanation, involving fewer justifications and more pictures to demonstrate how Flux fits the ways JavaScript itself is structured, and how it supports writing beautiful JavaScript code.
,# you don't know npm

> a talk to take you beyond `npm install`
- github => https://github.com/ashleygwilliams/you-dont-know-npm
- slides => http://bit.ly/you-dont-know-npm
,There's a great deal of excitement around service workers, thanks to the speed and offline-first benefits they promise. In this talk, I'll explain how the "App Shell + dynamic content" pattern for structuring your web apps can lead to optimal cacheability, and talk about [two libraries](https://developers.google.com/web/tools/service-worker-libraries/) that can handle all the service worker caching details for you: `sw-precache` (for your App Shell) and `sw-toolbox` (for your dynamic content).

This talk would cover similar material to my recent [Chrome Dev Summit presentation](https://speakerdeck.com/jeffposnick/instant-loading-with-service-workers-chrome-dev-summit-15), but slimmed down to fit in the time slot.
,I gave this talk a few weeks back at the http://www.meetup.com/nychtml5/ meetup. The slides are at http://slides.com/glennhinks/deck#/ and there is some code etc at https://github.com/ghinks/ConvertingToES2015.git. The audience found it pretty useful and there were many questions asked.
,I'm a software engineer on wework's growth team. We manage [wework.com](https://www.wework.com), which is right now in the process of being converted over to a statically generated site (from what used to be built with Ruby on Rails). A few weeks ago -- around xmas, hence the goofy holiday theme ;) -- I gave the following [presentation](https://docs.google.com/presentation/d/1t7A5-U9cYor6pMfc6XS2fdVjFicTxClWFig5xQ02KuI/edit?usp=sharing) to wework's engineering team on how we were able to build a specific flow on our site using React Components to generate our html.

Using React doesn't immediately seem like an obvious choice when you're talking about static site generation, something typically done for simpler marketing websites. However, take a look at [airbnb's](https://www.airbnb.com/) help widget:

![screen shot 2016-01-02 at 2 00 33 pm](https://cloud.githubusercontent.com/assets/4423173/12075757/4080a174-b159-11e5-9981-31f0378eab5b.png)

You're looking at a simple static site, with now a super complex react component inserted onto it.

Given the 15 minute time limit, I'd like to reduce the presentation linked above and focus more on the advantages and disadvantages of using React when you're using a Static Site Generator. This will touch on how we're able to build these one of components like airbnb's help widget, make them statically render for SEO purposes (the equivalent to "server side render" for you React nerds), and most importantly make them work on all browsers (yes, including IE 8!). 

Also if you're curious, my colleague wrote a wonderful article on [why we embraced static site generation](http://engineering.wework.com/engineering/2015/12/08/why-wework-com-uses-a-static-generator-and-why-you-should-too/).
,In this talk I'll use exploring JPEG artifacts as an illustration of why we should and how we can move high-computational tasks off the main UI thread.
,It's a thing you can do!

You know how you can animate things like the position and color of elements on the web? If they are SVG elements you can also change their shape. It can be useful or useless, but it's always fun. 

https://twitter.com/chriscoyier/status/659170694404509697
,,Quick overview of reinforcement machine learning in JavaScript.
Explains what it is (software agents learning optimal behavior from
rewards and penalties) and how it can be implemented in JS (using short code samples).
,,What do "I think therefore I am" and "to be is to be perceived" have to do with programming? With JavaScript examples we'll show how object-oriented programming and functional reactive programming can be interpreted from two opposing viewpoints of the _nature of reality_.

I made a summarizing [gist](http://gist.github.com/dmvaldman/f957dd9a8ed3f6edf35d) about it as well.
,hi fronds
,This talk is a series of four micro-talks - Real-life anecdotes relating to writing code for a large, complex web app with a team. Drawing inspiration from the writing manual 'Elements of Style', the audience will find a recurring motif in the quote 'omit needless words'. Topics will include linting, es6 features, react+redux, and unit testing. Though these topics may seem broad, we'll outline a unified approach to modern web development.
,I'd like to offer a  talk on the Single Responsibility Principle and JavaScript. I would introduce the SRP and why it makes application easier to understand and maintain. And then go over some ways of approaching it when writing OO JS and Functional JS.
,This talk is an intro to mechanical keyboards for people who type for a living.
I will introduce the vocabulary around mechanical keyboards (and keyboards in
general), the options available to the professional typist, and the
considerations in choosing your typing technology. I will also try to have some
props available for sample at bevera.js.
,I'll give a very abridged version of my IoC / be nice in open source talk. Will dispense candy instead of cat food from automated feeder.
,,unless of course you run into ieee floating point rounding errors.
,I hope this is ok -- I looked at past brooklynjs.github.io indexes in web.archive.org for guidance.

/be
,Over the past year and a half I’ve being working on my home automation system called Koti (means “home” in Finnish): https://github.com/arturi/kotihome. It is powered by Arduino with multiple sensors, Raspberry Pi, node-serialport, Node.js, MQTT, Telegram Bot API, browser speech and voice recognition, and a control panel written in React. I’d like to go through the tech I’ve used and the challenges I faced both in hardware and software, and how your personal project can be a great learning tool, and a lot of fun.
,In this talk I'll describe the super-secret ideas that went into implementing [ProseMirror](http://prosemirror.net), which make it possible to create an in-browser WYSIWYM (what you see is what you _mean_) editor that's predictable, robust, and customizable.

(I thought I had submitted this weeks ago, but apparently I hadn't)
,,As a beginner using git, you're often told that amending commits should only be done locally, and that you should never, ever, ever force push. However, a lot of open source repositories on GitHub use a system for pull requests where you are _expected_ to amend commits and force push. In this talk, I'd like to talk about what they mean by this, and I want to talk about your options for updating a pull request when a repository maintainer asks you to. My talk is aimed at both beginners who have opened their first PR with a spelling error, and at maintainers who may not be aware that asking people to update their PR can be confusing. 

A full post about what I want to cover can also be found [here](https://github.com/RichardLitt/docs/blob/master/amending-a-commit-guide.md). 
,I'd like to give a talk about CoffeeScript. Since the solidification of ES6 and the introduction of Babel, a lot of JS developers have started looking down on CoffeeScript, somewhat unfairly. I'd like to explain why CoffeeScript is still viable; what advantages and disadvantages the language has; and how we use CoffeeScript in production at OkCupid to mitigate the disadvantages and reap the advantages.

Let me know if you need any other information, or if you have any feedback. Thanks!
,I'd like to talk about how quickly you can deploy massively scalable javascript with little effort.
,I'd love to talk about my current project: Code Lauren, a programming environment for beginners.  It's a web-based live programming IDE.  The user writes code that draws to a canvas element.  They can pause execution of their program and step forwards and backwards through the code to help them fix bugs.

I'd like to do a quick demo, then talk at a high level about how the code works.  I'll talk about:
- How I wrote the runtime that compiles the user's code to bytecode and runs it on the VM.
- How the runtime supports stepping forwards and backwards through the code. 
- How I wrote the parser and runtime to produce very specific, jargon-free, context-aware error messages.
- How I designed the programming language to avoid some of the pitfalls of JS.

Code Lauren is deployed at http://codelauren.com

Thanks!
,I’d like to talk about building cross-platform desktop apps with Electron, React, Flux, and Node. I just released [N1](http://nylas.github.io/N1/), an extensible [open source](https://github.com/nylas/N1) email client. We let developers build plugins in React, have a pretty cool component injection system to safely load them in the client, and make it all work offline with a local SQLite DB. I’d love to show what goes into building an app like this and some of the patterns we discovered to make it extensible with web tech.

I love Brooklyn JS and would be honored for a chance to speak. I’ve presented various tangentially related pieces of this at [React Europe](https://www.youtube.com/watch?v=Uu4Yz2HmCgE) and [React NYC](http://evanmorikawa.com/talks/scaling-flux), but this would be the first public speaking appearance of it post-launch.
,,I made a website once or twice. I used callbacks and promises and flux but I have no idea how to program missile launchers. Lets try to use web patterns to program missile launchers.

The hardware is for fun, I'll add some features to the launcher with the 3 patterns and hopefully something will click if you don't really know how to use any of these patterns or hardware.
,,- I guess this makes it Mr. Hyde?
,For a developer who’s constantly thinking about how to build the best UIs for users, I recently came to the conclusion that my own workflow’s UI(UX?) is disturbingly dysfunctional, especially when I’m researching and referencing. Every time I start a new project, I find myself drowning in tabs of Stack Overflow answers, blog posts, source code, search results, and YouTube tutorials.

I started wondering if we’re doing documentation completely wrong, especially in the JS world—trying to keep up with the now yearly new ES standards and proposals, and the Cambrian explosion of new frameworks released and old libraries updated (and the variations in how APIs are documented). Maybe it’s time to rethink how we design documentation, and how that fits into our workflow. Can we make one UI to rule them all? Or, are we doomed to ⌘F’ing and scrolling through inscrutable API references forever? 
,This talk is about how to use progressive enhancement to craft accessible, well-structured, and device agnostic code. As a junior developer, I found the world of endless JS frameworks intimidating and chaotic, with battles being waged between evangelists on Twitter. Using progressive enhancement creates a more Zen experience by keeping your codebase simpler and easier to reason about. In a world where new frameworks, libraries, and architecture styles are going in and out of fashion with the seasons, everyone could use a little more Zen.
,Ember 2.0 introduces a brand new component system that emphasizes a [data down, actions up] architecture that makes reasoning about your app's UI a breeze. This talk will introduce the concepts of Glimmer Components, how to use them in an Ember app, and how they fit into your app's overall app architecture.
,… Extension

This is the story of building [Beagle](https://github.com/BeagleLab/beagle) with the MIT Media Lab. Beagle is a PDF and HTML annotator in a Chrome Extension, using Browserify, React, Oauth, and PDFjs. I've learned a ton trying to jerry rig this project together, and would like to talk about how I problem solved some issues that came up - for instance, how do you deal with different React components for different types of documents? How do you get Oauth to work without a popup? How do you sync offline using Pouch and Couch and localStorage? How do you deal with Chrome's native PDF API (short answer; you don't, it doesn't exist). Instead of going through and answering these questions directly, I'll retell what I tried, what worked, and what didn't. 
,A lot of people are spooked out and frightened by the built-in node debugger.  They shouldn't be!  A live-exercise in debugging via the console for your node applications!
,This is likely going to be hard to do in 10 minutes, but I want to touch on Operational Transform and Differential Sync which are both strategies for keeping mutated state synced across multiple clients (like how google docs or, well, scripto! works)
,,I’d like to talk about the Bookshelf ORM, and share the experience I had using it on a recent side project (http://slime.io) and on an internal tool at Etsy. I’m a designer who hasn’t given a JS talk before, and wanted to use these learning as an excuse to get up and talk at Brooklyn JS! 😊
,My idea is to start with the most basic of a webpack config to get it compiling and then going from there adding loaders and hot swapping and more.  Explaining the config properties as we go along.
,Flux and Redux are interesting variants on a pattern for application state handling, but the jargon for talking about these patterns can verge on Seussian. I'll be using pictures to explain what they really mean.

I'm planning slides similar to:
- http://slides.com/linclark/webpack
- http://slides.com/linclark/npm-for-teams
,I want to share some culture secrets I've learned that will help people on the daily and the big picture stuff. It's the serious business of being silly. 
,By unpopular demand, I'd like to propose a talk about how using Vim can make you more efficient at Javascript, after making you way less efficient. But it's worth it. Vim makes you think modularly, and applies it to your every move in editing, which helps you write better code. I'd also like to talk about how you can customize Vim for Javascript.
,Feedback and edits welcome!
,Making crazy effects with GLSL shaders that work on the web, and on your phone.
,…derbrush
,First everyone just nested callbacks until they got sick of side-scrolling. Then came the promise of a better way, but that has its own chain of problems. Now, coming soon to a transpiler near you, is the future we've all been (a)waiting for!

But seriously folks, I thought it would be useful to show how the proposed ES7 async/await feature works, how it can make your code much easier to read, and how it's helped us build a better product.
,Show off the fun that is creating 3d webGL visuals with the three.js
framework. Look at the state of webGL support on browsers and mobile.
Example:  http://travisirby.net/three-js-3d-webgl-experiment/ and I'm
working on more.
,http://github.com/jennschiffer/pixelchat
I'm going to set up a private instance for BrooklynJS attendees to play with while i talk about it!

:santa: 
,By popular demand\* I'd like to change my talk to be about the recently released [React Relay](http://facebook.github.io/relay/)!

\* For certain definitions of popular... and demand.
,exquisite texts: an exquisite corpse poetic experiment
exquisitetexts.com
,Speaking about how you can start using certain ES6 features today in your code today along side any older JS that exists so you can be one of the cool kids writing all the future JavaScript code; Explaining features you can start writing today.

This talk is similar in nature to my TXJS talk from July but not exactly the same as will be a new slide deck and shortened for this time slot. :smiley: 
,With the recent release of systems like AWS Lambda (especially coupled with AWS API Gateway), webtask.io and recent changes to IFTTT, it's now become possible to build entire web apps and systems without running a single dedicated server/instance. Many of these systems also use Node.js as the mechanism for writing web hooks.

This talk will explore this idea in general and what it means for how we develop web systems going forward – and will also introduce LambCI – a continuous integration system built on AWS Lambda (and AWS ECS) – to the wider world (you heard it here first folks!)
,Chrome code snippets are powerful and under appreciated feature. Small code snippets are stored in the local storage, with full syntax highlighting and convenient editing. They can be executed in the context of the page, allowing one to easily profile, rewrite and hack the application. The code snippets are like bookmarklets on steroids! Here is a repo with lots of them https://github.com/bahmutov/code-snippets and a blog post describing using them http://glebbahmutov.com/blog/chrome-dev-tools-code-snippets/

Bonus: the code snippets can update themselves from a remote server, like github. Sick!
,The common pattern of syncing our UI with the database is through Ajax / XHR requests (or even full page refreshes) and reflecting the response once it's received.

But what if we didn't have to rely so heavily on that response? How do we reliably update the front-end as quickly as possible without asking the server first?

The same resources and patterns that are used in offline-first apps can be used for these "optimistic updates".

In this talk, I'll discuss how the idea works, the ideal and not-so-ideal use cases for this pattern, and what tooling is available to help us become Optimist Primes today. 
,I'd like to present a demo of Semantic UI and discuss how thinking in terms of Frederic Brook's principles of "[progressive truthfulness](http://semantic-ui.com/usage/theming.html)" can help alleviate many of the strains of maintaining UI for a website.

I plan on doing a quick code demo using this example GitHub mimic project
https://github.com/Semantic-Org/example-github

Will demonstrate fun things like
- How SUI and its build tools can be used to rapidly design & prototype. (Gulp, CSS pre-processors etc)
- How UI design can work through principles of progressive refinement. What if Google designed GitHub? What if you designed GitHub?

**About**
- I've been working on Semantic UI for last 3 years, used to do dev at Quirky and The New Republic. 
- Semantic UI is a top 30 most starred project on GitHub, top 20 for JS (~19,000 stars)
,What does it mean to write functional code versus object oriented code in js? Is there another "way" to write js code (or any code)? Let's talk about it, look at some examples, have some laughs.
,This is OBVIOUSLY a mistake!
,change README.md to include some basic information about the event for people who end up at the repository instead of the site
,,### Transpilers & You, Or Write Your Own Language & Compile for the Web

Do you love the web but hate Javascript syntax? Are there libraries you use everyday, whose boilerplate you dream of hiding away once and for all? Clearly the right answer is to create your own domain-specific language that compiles to JS, a personal Babel if you will, all in your own spare time.

No, wait, come back! 

In this talk I will cover the outlines of creating your own language, including PEGs (parsing expression grammars), the path code takes from the lexer to behavior, and tools attendees can use to create their own works, in particular PLTJS (and, permission pending, a new, not-quite-released tool).

I will also discuss the process around the development of [Data Monster](https://github.com/sarahgp/data-monster), my domain-specific language that compiles to d3.js and is hosted in Javascript.
,I'd like to discuss a few techniques, tools, and guiding principles for improving technical documentation for software projects, because THEY ALL CONFUSE THE HELL OUT OF ME but I don't think it's just because I am an idiot!

?

:/
,I want to talk a bit about the JavaScript Bridge, an iOS tool to run native code through JavaScript.  In the last two versions of iOS (8 and 9), Apple has been giving more power to JavaScript. I think I can find 9 other things that are interesting to go along with it.
,Modifications and updates to HTML to indicate Paul Ford appearance at BrooklynJS. Comments welcome.
,Hey folks. I've been working on a new project called [Rollup](https://github.com/rollup/rollup) that I'd love to debut at 61 Local.

It's basically like an ES6-native version of Browserify or Webpack, but with a crucial difference. Because ES6 modules are designed to be statically analysable in a way that's more or less impossible with AMD and CommonJS, it's possible to be incredibly efficient about what code gets included in your bundle - in some cases the result is a small fraction of the size of the equivalent Browserify/Webpack bundle. (Even in the worst case it will still be a decent amount slimmer.)

Reason I'm excited about this project is that it potentially eliminates some of the constraints we've imposed on ourselves. The whole 'every JS package should be a small, focused module' idea that's dominated for the last few years seems like a self-evident Good Thing, but falls apart on close inspection - among other things, it prioritises the needs of package authors over package consumers. ES6 modules will mean richer, more learnable libraries, that are significant enough to build communities around, and web development will become easier as a result. (I'll explain why in the talk.) But only if we start embracing ES6 modules soon.

So I'd love to talk about what the project does, how it works, and how people can help drive AMD and CommonJS into the past where they belong.

Just to prove that this isn't totally pie-in-the-sky, the next version of D3 is built with ES6 modules and bundled with Rollup. Some of the famous D3 examples can be made roughly 95% smaller as a result!
,Would love to share more about the platform! http://blog.codeclimate.com/blog/2015/06/19/code-climate-platform/ I'm very open to ideas on the kind of engine people would like to see built (jshint, emoji detection, etc.)
,,I've added my name & proposed topic description.
,I've been spending the past year getting really into learning human languages. Before that, it was years and years learning programming languages. While I still break away to read the ES2015 or Java 8 blog post frequently, most of my non-work time has been spent trying to learn Spanish, French and German. 

I'd like to talk to you about the odd parallels that I've found between learning human, natural languages and learning programming languages.
,in which i talk about using technology to make art-- specifically, an [exquisite corpse](http://en.wikipedia.org/wiki/Exquisite_corpse) poetry app i made for the internet that shows the user the last line of a poem and prompts the user to write the next line. the background of the page is a certain color based on the "progress" of the poem
,An introduction to the Chrome Extensions APIs, a few extensions we've built @ Genius, and how people can get started making their own today.
,You spend disproportionately more time _reading_ code than writing it. So why not make it easy for ourselves and others to understand what we have written? _Refactoring_ is your friend that can help immensely. The discipline of refactoring can make programming a joy and help breakdown complex looking problems into simpler parts. In this talk we will take a _fast-paced tour_ of various strategies and techniques to simplify your JavaScript code. We will also look at refactoring **AngularJS** code.

Let’s all make the leap from good-code to great-highly-readable-code!
,Before I head off to Oakland, I'd like to share some things I've learned drawing geometric figures in JavaScript. While this introduction can't be guaranteed to align your chakras, unlock the secrets of the pyramids or provide admission to the Illuminati, there may well be mention of the golden section, ten-fold symmetry and other such mathematical marvels.

E.g.

[Building a dodecagon with a ruler and compasses](http://rflow.github.io/geometry/examples/dodecagon/)

[Plotting a rose with pentagonal spirals](http://rflow.github.io/geometry/examples/golden-penta-rose/)
,Hey, I applied last month, but had to bail cause of reasons... Actually, I learned the week before that Etsy was going public on the same day and couldn't really say that. I'm actually really excited to give this talk, I think it'll be a lot of fun.

---

Here's what I wrote last time: I'd like to give some tips on how to contribute to JS developer tools. I'll start by walking through how to install and debug the Ember, React, and Marionette Inspectors. I'll then show how you can do the same with Chrome's DevTools (elements, sources, console). I'll try and touch on some of the these tools' magical internals as well.
,I'd like to share some work I've been doing on Chromium Embedded Framework bindings for the Go language (https://github.com/paperlesspost/cef2go) and how it enabled us to do some pretty awesome things. Basically what if you had a full chromium browser at your finger tips from Go and C?
,A quick primer on using Firebase to build rich web application not only capable of storing and retrieving data, but also propagate data updates in real-time. Ray will live-code a real-time chat web app without a custom backend. It's also super cool when used w/ Polymer (or Angular).
,[JSCS](https://github.com/jscs-dev/node-jscs) is a popular code style linter. In this talk, I'll give an overview of the tool and focus on the recently launched autofixing feature – how it works and where it's heading. 

The audience should walk away with an understanding of how the tool works, how it can help their projects, and how they can contribute to the project.
,,Presentation of a MongoDB shell extension that allows for virtual collections (think SQL Views) that persist queries, projections and inner joins, exposing them as cursors for full extensibility. This utility is particularly handy for anyone who often finds themselves querying mongo in the shell and manually cross-referencing data. https://github.com/mongodb-js/mongo-views
,In this talk I will describe a project I've begun working in cooperation with students and faculty from the University of Michigan-Dearborn to visually represent data documenting housing speculation in Detroit. This project aims to engage students, assist community organizers, and educate the public on the housing crisis in Detroit.
,because THIS. 
![img](https://cloud.githubusercontent.com/assets/4581495/6978216/b1b782a4-d99b-11e4-8720-3b609d2936d9.png)

:hankey: 
,Creating forms on the fly with React and JSON Schema.

With a few configuration options and custom validation errors, you can create forms on the fly with React.JS and JSON Schema. Forms should be, in most cases, derived from data, whether that is a model with empty attributes for a POST or with pre-set attributes for a PUT.  From there React can take over and render the form, validate, display errors and finally submit. 

Extra bonus(or extra points off?!?): Will try to get a view helper for Rails written to allow this to be rendered server-side.
,So you want to open source that library? There are dozens of "open source" licenses, how do you pick one? What do they all mean? A practical and opinionated guide for people who want to share their code, and maybe already are. Because it matters, but not that much.
,It'll be a short talk about different uses for looping animation and video.
,I'd love to give a lightning talk introducing the audience to the HTML-based Interactive Fiction engine Twine http://twinery.org/ http://en.wikipedia.org/wiki/Twine_%28software%29
At its simplest level, Twine can be used to build Interactive Fiction experiences without any coding knowledge whatsoever (perfect for kids!). But more advanced users can use a variety of story formats, and since Twine games are simply HTML pages, users can include their own custom CSS and JS.

In 10 minutes my plan is to talk about:
1. A Brief History of Twine
2. An explanation of Story Formats
3. Walk-through of a simple Twine project
4. Explanation of differences between Twine 1 and 2
,@jed gave feedback. 

A lot of us are engineers at companies that don't enshrine technology as their core product, or employ significantly more non-technical than technical people. If you're in that position, how do you create a place for technological transformation in the organization?
,Hey, I'd like to give some tips on how to contribute to JS developer tools. I'll start by walking through how to install and debug the Ember, React, and Marionette Inspectors. I'll then show how you can do the same with Chrome's DevTools (elements, sources, console). I'll try and touch on some of the these tools' magical internals as well.
,I'm using [agent-based models](http://en.wikipedia.org/wiki/Agent-based_model) to simulate a guinea pig village. My talk uses the simulation to explore emergent behavior. It is also very cute.
,Added a talk on debugging remote JavaScript
In this presentation, I'll discuss some tips & tools for debugging remote JS
,the fact that our repo is 95.4% postscript is embarrassing. we should port these logos to svg and save face.
,currently, merge conflicts for the `index.html` page are really annoying, since speakers will end up vying for the same slot.

we should have a system where instead of editing a five locations in a single file, all new PRs rename an existing file and edit it as needed. this file could even be JSON so that the front page could read it in in the browser without a build process.
,_intro: https://www.youtube.com/watch?v=UXjUQnSi9zE_

CSS is :hankey:, JS will [rule the world](https://www.youtube.com/watch?v=ST86JM1RPl0). 

This is a talk about why writing css is still important in a post css world
,This talk is a tour of techniques and tools (some existing, some new) to debug remote JavaScript!
,Talk proposal: A brief introduction to underline.js, and dive deep into the technical part and discuss how to optimize canvas animation to save render time.
,A quick primer on using Firebase to build rich web application not only capable of storing and retrieving data, but also propagate data updates in real-time. Will live-code a real-time chat web app without a custom backend. It's also super cool when used w/ Polymer (or Angular).
,A brief introduction to how fast you can create a participatory application in Meteor.js followed by audience participation with the app. The app will interact with a connected device powering some RGB LEDs.
,Conflict-Free Replicated Data Types ([Wikipedia link](http://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)) are pretty sweet. I'll talk about how they can help handle server-client sync in even the simplest single-page apps, using TodoMVC.
,When I've been able to get a ticket, I've seen an increasing number of talks about React.js and the technologies around the Component Lifecycle, Server-side rendering and Flux. 

I'd like to talk here about the nitty gritty of moving a codebase from "not-react", Backbone perhaps, to React in an incremental way. In doing so, I'll also introduce some strong points of React(hint, it isn't the diffing and some parts are non-technical, even) surrounding that provide compelling reasons for a business to consider an incremental migration.
,@brianloveswords you made me do this

There have been a fair amount of talks on hardware already I'm guessing (oh hai I'm new to this meetup), but I wanted to provide a slightly different angle, which is writing libraries for hardware rather than just using them. There are a lot of head-scratching moments when you begin, so a high level guide with some tibits to get the audience started on bare-metal bits and bytes via Javascript would be my aim. Presented in a highly entertaining, non-dry format of course.
,Never got around to learning AppleScript for interface automation on your Mac? That's ok, because Javascript has broken out of the DOM and into your native applications! I'll show you the key API's and make a simple script.
,At Shapeways we created a library, ShapeJS, to help developers use javascript to create 3d printable models. In just a few lines of code you can modify existing 3d model files, turn 2d images into 3d models, or even just use simply shapes and boolean operations to create 3d models from scratch (see example scripts: http://shapejs.shapeways.com/examples?li=dh_examples).

This talk will cover the basics of getting started with ShapeJS and how to create a simple client side web app to create customizable 3d models.
,A quick primer on using Firebase to build rich web application not only capable of storing and retrieving data, but also propagate data updates in real-time.  Will live-code a real-time chat web app without a custom backend.
,I love D3. I've used it lots. However, if I'm making a complex interactive visualization, my D3 code turns to soup. It doesn't produce the most maintainable code.

The last month or so I've been playing around with React and D3 together, making some visualizations such as this one: http://themusicmap.cfapps.io/. Using React for SVG rendering while leveraging D3's layout libraries for core calculations seems to be a winning combination. However, is this code more maintainable than pure D3? Is it just as performant as D3? There's only one way to find out!
,I want to be a hardware hacker but I'm scared of coding in C and accidentally blowing something up. Enter Tessel. Tessel is a node-compatible microcontroller with built-in WiFi. Now if I accidentally blow something up I can blame it on JavaScript.
,I would like to demo this [project](http://beautybreakup.amycheng.info/) that I made with three.js. I haven't shown it to anyone because only recently did I get a computer powerful enough to run the three.js code. 
,I'm the initiator of the process manager [PM2](https://github.com/Unitech/PM2) and would love to speak about process management and microservice architecture at BrooklynJS,
,So I have given this talk before at Future of Web Apps (slides here: https://github.com/cassidoo/talks/tree/master/Accessibility%20in%20the%20Browser), but it's an important topic.  

Plus, I'll probs change it to make it less serious and more fun.  

Because BrooklynJS is fun.
,If you're a good developer, there's probably a little voice in your head that says "this code I'm writing could be more efficient, more elegant, less bug-prone."

This is a great instinct if you're developing applications and tools. But it can hinder you if you're trying to do creative coding. I'm going to talk about when and where "bad" coding practices can help you. I'll use plenty of examples from coding [my various JS-based creative projects](http://tinysubversions.com/projects).
,Before I added a "dumb queue" process to TodaysMeet, every deploy managed to result in _someone_ seeing an error message. Then I fixed it. This is how.
,Updated index to include Ratmap presentation
,Remembering the people behind products and how we can work better together.
,Hey, I would like to present an updated and more technical version of one of my talks called [Server-Side Rendering of Isomorphic Apps at SoundCloud](https://github.com/zertosh/ssr-demo-kit). I'll be participating at [React.js Conf's "Flux Roundtable"](http://conf.reactjs.com/schedule.html#flux-roundtable), and since my talk proposal is along the lines of the roundtable, it'd be cool to use this as an opportunity to get some of the brooklyn.js communities' questions/concerns regarding Flux and server-side rendering ahead of it.
,Basic gist of the talk is that HTML5 isn't actually slow; it's just that nobody knows the tricks to make the performance really sing. So this talk is about those tricks.
,If you've worked for a great manager, or a lousy one, you know what a difference a manager can make.  If you're an emerging manager, maybe you've been leading a team for several weeks -- or for several years.  By now, you've seen that managing is its own distinct discipline, and craft.  We'll talk about management's foundational skills, and how you can gain and refine your expertise through practice, persistence, and the power of mentorship.
,Hi. I would like to do a quick demo of making a sparkly 3D particle system in Javscript using three.js. 
,Must avoid the hair.
,While most of us love building apps in JavaScript, we'd also love it if people used them, and if we're lucky, _lots_ of people. Problem is, then we really need to care about about how our app runs and scales, and it's best to think about that before that moment of fame arrives.

I'll show a few tools and services that can help you manage your infrastructure, and the pros/cons of different approaches, so spend more time building your apps, and less dealing with keeping your app running.

Some of the tools/platforms I'll be discussing are [Heroku](http://heroku.com), [AWS](http://aws.amazon.com/), [Digital Ocean](https://www.digitalocean.com), [Ansible](http://www.ansible.com), and a new tool I'm building, [Riker](https://github.com/jschementi/riker).
,holding a spot...
,The journey of a CSS developer through the world of d3. 
,A talk about how ASI works, the debate around it, and how I built [a tool that enables effortless switching between the styles](https://github.com/yyx990803/semi) by hacking jshint (and why AST-based transformations didn't work well for this particular task).
,``` js
alert(spoiler); // "Writing JS with Asian characters only."
```
,It is so often that designers, developers, and other members of the community focus on the technical skills and tools that allow us to do our jobs in the best way possible, but, in the wake of the hype, we lose track of our greatest assets as humans, empathy. 

Each time we take to social media because [latest pop culture change] happened and we grab our digital pitchforks to take down the beasts that caused this outrage. What can we do in the community to alleviate this plague of snap judgement and make us better people? 

I'm hoping to provide some insight and solutions to that concern with this talk. 
,This talk may or may not contain actionable material.
,Hope it makes sense!!
,Added a one-liner about my talk :)
,:santa:
,Looks like the release of MacOSX 10.10 this weekend broke part of js-emoji, which I vendored.  I submitted a patch to fix js-emoji at
https://github.com/iamcal/js-emoji/pull/19, but in the meantime, I manually fixed it here as well, and made a tiny cosmetic tweak to
shrink them slightly so the emoji don’t look quite so big and attention grabbing compared to everyone else’s titles.
,Still the same talk, different title :)

Also... all EEEEEEEEEEEEEEEEEEs
,Nice lightweight page you got here, would be a shame if someone tarted it up with an external library… :ok_woman: 

But hey, look, if I’m going to talk about emoji, I’m darn well going to use emoji in my talk description, and since this is a JS event we’d better use best practices to make sure it renders correctly in different browsers that may or may not support emoji natively.

I made notation so the extra cruft can be easily removed next month.
,Was reminiscing about old events, couldn't find a list of all the talks. Hard to bisect all the old git commits since they're not all merged pull-requests.
,I’d like to share some techniques I use for bending, chopping, folding, and hacking the DOM in my open source projects (e.g. [OriDomi](http://oridomi.com)).

I’ll explore manipulating CSS3 and the DOM with JavaScript in an efficient, responsive, and cross-browser manner (without using any external dependencies). I can also shed some light on creating a fluent interface that automatically queues asynchronous events like animations to keep things simple for the end user.
,A tour of Volt, a new Ruby framework that allows you to harness Javascript through an end-to-end Ruby implementation. Volt uses Opal, a powerful and popular Ruby to JavaScript compiler. Much like Meteor, user interactions automatically update through a persisted connection to the server.

We'll build [TodoMVC](http://todomvc.com/) app using Volt in 10 minutes.
,While most of us love building apps in JavaScript, we'd also love it if people used them, and if we're lucky, _lots_ of people. Problem is, then we really need to care about about how our app runs and scales, and it's best to think about that before that moment of fame arrives.

I'll show a few tools and services that can help you manage your infrastructure, and the pros/cons of different approaches, so spend more time building your apps, and less dealing with keeping your app running.

Some of the tools/platforms I'll be discussing are [Heroku](http://heroku.com), [AWS](http://aws.amazon.com/), [Digital Ocean](https://www.digitalocean.com), [Ansible](http://www.ansible.com), and a new tool I'm building, [Riker](https://github.com/jschementi/riker).
,There has been a lot of hype around this word "Reactive Programming" whether it's with the [Reactive Manifesto](http://www.reactivemanifesto.org/), [Reactive Streams](http://www.reactive-streams.org/), the [Coursera Course on Reactive Programming](https://www.coursera.org/course/reactive).  What does this word Reactive _really_ mean?  The dictionary describes it as "readily responding to a stimulus".  Yeah, that's useless.  Instead of a bunch of handwaving, let's break it down into some small concepts and how we can relate it to programming that we're already doing.  Maybe instead of "Reactive Programming", we just call it "Composable Event Processing" or something even better.  You help name it!
,Twitter flame wars. Open source project failures through contributor fallout. Bullying that leads to the bullying of bullies.

How do we maintain our communities? How do we grow them? How is anyone in their right mind stepping into the caustic social media environment of programming we have created for ourselves?

There are steps we can take with user groups, conferences, online worlds that can help support an inclusive environment that allows for debate, learning, growing, and excitement. The social sciences have 100 years of research that can provide us with tools to treat our fellow programmers with care. Much of this has been battle-tested in the organizations we run. The bubbles we live in. I'll share how we're creating a better world that is welcoming to programmers, new and experienced, so that we're leading by example. 

Oh and try not to soapbox because that's gross.

Your words are powerful, and “actions speak louder than words, but not nearly as often.”
,My excellent colleague @gscottolson has proposed https://github.com/brooklynjs/brooklynjs.github.io/pull/95 to talk about building the front-end of mix.fiftythree.com with React.

I'd love to also talk about our focused effort shipping the back-end, built on Node — in particular, how we dug into some performance issues and made it fast. Some very interesting discoveries and lessons learned. (E.g. around event loop blocking, and how significant that is given single-threaded-ness.)

It'll also be fun to share a bit about the tools and frameworks we've built on, e.g. Streamline.js.
,The web team at FiftyThree has spent the better part of two years working on [Mix by FiftyThree](https://mix.fiftythree.com/). The web service integrates with [Paper](http://www.fiftythree.com/paper), the award-winning iPad app, and allows creators around the world to collaborate directly on their devices.

The web front-end of Mix is built on [React](https://github.com/facebook/react). We launched Mix on September 16th, so this is our first chance to speak publicly about the engineering and technology behind the service. I want to share some of the challenges and benefits of building a large-scale web app using React components.
,code in node, package in node-webkit to make desktop app.
,Prototyping and building MVPs with simple, monolithic apps is great: you can use a single framework, they're easy to install and run and test. Service-oriented architectures are a lot more robust for mature applications. I used Node—and a bunch of other tools—to help todaysmeet.com from a big monolith to a collection of smaller, focused apps as it grew naturally.

Anyway I think it's super interesting, and I'd like to talk about how small teams and projects can evolve naturally into mature, SOA projects, instead of trying to make all sorts of crazy optimizations and assumptions from day zero.
,The ncolorpalette is a single page that applies a new, limited palette to a full-color image. It uses k-means clustering to determine how to apply the palette. I'd like to show how that works, and maybe demonstrate how nearly the same code is used as a revisit.link service.
- http://kirbysayshi.com/ncolorpalette/
- hub.revisit.link (Gameboy palette)
- https://github.com/kirbysayshi/revisit-ncolorpalette-service
,Write your own mini devtools using only APIs that are available to every web page. This means your tools can be passed around as a simple bookmarklet, and used on multiple browsers.
,Rendering vortex simulations in a web browser... we'll look at the physics behind vortices and demonstrate how to realistically render tornadoes in a browser using only JS, CSS and the DOM.
,I would like to give a talk on how to create a map guessing game using d3.js. It'll be a great intro to d3.js and games are always fun. :)
,Lets talk about SAX baby.
,Two things:
- We keep building elaborate traps for ourselves. We don't just shave yaks anymore, we spend time designing more elaborate yak-shaving equipment. Other craftspeople (chefs, painters, carpenters, whatever) are expected to maintain their own tools, but we programmers have become disconnected from our own work.
- We don't spend enough time talking about developer user experience. We _obsess_ over pixel-level details as far as end users are concerned, but don't apply the same level of attention when we're building things for other developers.

This talk is part sales pitch (I'm working on a new build tool called [Gobble](https://github.com/gobblejs/gobble), which is partly an attempt to address these problems), part rant about the state of software development in 2014, and part call to arms.
,Because I'm annoying
,Would love to talk about my sax based html->markdown converter and why sometimes sax-based HTML parsing is for the win!
,Avoid npm in production by packaging apps as tarballs using Docker (aka. Docker part Deux).
,A talk on combining JS accelerometer API with WebRTC to make your phone a Wiimote-like motion controller, using my stupid game [Flappy Arms](www.flappyarms.sexy) as an example.
,![](http://3-ps.googleusercontent.com/x/www.thehollywoodgossip.com/images.thehollywoodgossip.com/iu/t_full/v1376337048/xbaby-panda-picture.jpg.pagespeed.ic.NyRbMQzY55.jpg)
,How skills I learned and honed as a musician translated directly to becoming a boss lady in open source software development.
,,added my descrip + time slot
,This demo shows how to send gyroscope and accelerometer data from an iOS device to a web browser. I'll use the data to interact with natural simulations. It uses an iPhone, an Arduino w BLE shield, node-serialport and web sockets. Here's a repo..

https://github.com/vinceallenvince/BLESensor

This is a short video of just the iOS app running connected to the Arduino.

https://www.youtube.com/watch?v=Tu3zn0sqZpQ

Thanks!
,,I am Chris Williams, the maker of improbable things and known widely as Voodoo Tiki God. If you do anything with JS, you may know of me, but more than likely know of something I have created directly or helped to create including the JS logo, node-serialport, and the voodoospark firmware. I do many things but rarely known for them, but if you look hard enough, you will most likely find me hiding behind the scenes. I write articles on an almost glacial pace at http://voodootikigod.com
,Controlling individually-addressable LEDs with a Raspberry Pi and JavaScript is plenty of fun, but what if the Pi were also equipped with a camera, so that it could "watch" the LEDs as they blinked? The philosophical implications could be huge... or at least colorful.
,The Athlete 1 Rover is a custom, hobbyist robotics platform or, perhaps more precisely, an embedded electronics learning lab on wheels designed by Jameson Proctor and the team at [Athletics](http://athleticsnyc.com). It's gone through several different "brains", but we've finally settled on the Arduino Yún (though we do have a [Tessel](http://tessel.io) on the way so who knows?). As designers and web developers, we have a love of JavaScript and are much more familiar with it than languages like Python or C. Being able to interact with a microcontroller with JavaScript and a REST API allows us to bring ideas to life quickly and have a great time doing so. 

Note: We'd be providing source code, a parts list and reference designs for the laser cut base of the Athlete 1 Rover online to accompany my talk so that anyone who'd like to build their own could do so easily.

![a1r](https://cloud.githubusercontent.com/assets/1186162/3386597/1030e310-fc76-11e3-89bf-989a8f3713ab.JPG)
,Also Jed/Brian, here are the Vagina Git Logs we've talked about! https://docs.google.com/document/d/1jZfHC86DsnS_7iUIIj1qrwUaVjJ9531wSRxsGkFbY88/edit?usp=sharing
If you think they're appropriate, would love to perform them between speakers at a BrooklynJS. If not, we'll still hug it out the next time we hang.
,Lighthearted talk on confronting a monolithic Rails app by gradually replacing "sprinkles of jQuery" with components designed in Angular with TDD
,Live coding is all the rage recently. They even dedicated 15 minutes for a live-coding session in the keynote at WWDC. 
[fb-flo](https://github.com/facebook/fb-flo) is a live coding tool we made at Facebook. In this talk I want to go over:
- how live coding is useful in the real world and beyond demos
- why fb-flo was made to be hackable and why it worked while non of the other live-{reload, edit} tools worked for us.
- Talk about my plans for the tool and how it could make JS development even more fun
,Showing off new features of ES6 (aka "Hey, JS is good now!") while trolling against the use of transpilers... an enjoyable romp through the fields of nouveau JS, including some good-old live coding: a webgl-inspired demo entitled "functional rendering".
,The evolution of front-end build tooling is heading toward a state of zero-configuration. In this brief talk, I'll showcase the above trend across popular "build engines" (Grunt, Gulp, and Broccoli), talk about Yeoman as a stop-gap, and some of the problems tackled while building an experimental, Gruntfile generator called [YA](https://github.com/mrjoelkemp/ya).

The goal of the talk is to encourage thinking about meta-tooling (specifically around front-end build processes).
,My mind underwent a rollercoaster of emotions after experiencing a tragedy in 2006. For some time I have been thinking of how I could share my healing process with the JS community. Brian's talk at JSConf this year provided me with new ideas and I finally came up with one at the airport today. I may want to share this talk at a larger conference, but I'd like a test run at a local meetup first. I'd like the honor of presenting it at BKJS thanks to the inspiration provided by Brian's powerful speech. This talk will use javascript and data structure analogies to describe the strategies I use for healing the difficult problems we face in life.

 I understand if this doesn't fit the meetup format. 
,This is a talk about something I have to constantly remind myself and others. Often times we hit a wall and get stuck on a problem, only to realize much later and after lengthy and unnecessary pain the solution was simple _if we just reframed the problem as something else_.

This talk is inspired by, and talks about, one of my favorite "Ah-ha!" moments when getting my degree in CompSci, and that was learning to write a solver for the eight-puzzle (or sliding puzzle). When looked at concretely I thought we would spend all this time writing formulas and deriving some sort of mathematical solution. Instead our AI professor said "If you see the placement of the pieces as a Vertex and a move as an Edge, you've reframed and reduced the problem to something already solved: finding the shortest path between two Vertexes.
,So Jennscript's talk at EmpireJS inspired me to give a talk on a more serious Computer Science topic that actually turns out to be super useful and interesting. I had actually forgotten this fact until I retook Algorithm Analysis as the last part of my Masters degree this semester at Columbia.

I will quickly try to cover:
- Ok, seriously, what? Well: G = (V,E) not G = lines and dots
- Dijkstra's algorithm and shortest paths
- Minimum spanning trees _(maybe)_
- I got mad flow (networks) -- Ford-Fulkerson etc. 
- A wild application or two.

Seriously though: graphs are like everything. It's kind of wild. P ≠ NP and whatnot.
,Would love to talk about my sax based html to markdown converter Dr Sax (http://github.com/toddself/dr-sax)!
,Basically, I was structuring my SCSS files poorly; using an ID for each AngularJS partial. Because of this, I felt like I wanted to use a directive instead of using inline logic to switch IDs when I needed dynamic styling. So, I spent some time looking at ngClass, and hacked together ngId. Here, I'll talk about my process and how I did everything backwards, and how, in general, to think about submitting to open source projects.
,Promises, everybody's favorite way of sanely managing asynchronous code, have recently landed native implementations in Chrome and Firefox. I'll talk about what they are and why they're great, and how you can avoid ever having rightward drift like this:

```
   foo(function(){
     bar(function(){
       baz(function(){
         quux(function(){
           console.log('help me');
         });
       });
     });
   });
```

I'll talk about what the native implementations bring to the table, and summarize some of the popular promises libraries already out there.
,I'd like to talk to you about WebRTC DataChannels, in the form of interpretive arm flaps.

Basically I'd be covering what's discussed in [this blog post](http://blogging.alastair.is/webrtc-datachannels-or-how-i-learned-to-stop-worrying-and-flap-my-arms/) - creating a ridiculous [arm flapping game](http://www.flappyarms.sexy) with WebSockets, then converting it to use WebRTC DataChannels in a bid to reduce gameplay lag.
,I'd love to show off my sax-based html to markdown converter [dr. sax](http://github.com/toddself/dr-sax)
,The [skiplist](http://en.wikipedia.org/wiki/Skip_list) is a fun little data-structure that relies on randomness to ensure fast insertion and deletion of elements in a sorted list. [In January](https://twitter.com/mixonic/status/427511311933534208) I wrote a small, understandable version of a skiplist. In this (fast) talk I'll demonstrate and try to help visualize how a skiplist works, then walk through an implementation.
,I'd like to talk about [Marionette Behaviors](https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.behavior.md). If you're a backbone developer and haven't heard of Behaviors before, they'll blow your mind. In a nutshell, behaviors are Marionette's response to view Mixins like cocktail, but without the headache associated with mixin property clobbering. 

People are creating Behaviors for everything from tooltips to form validation. In the talk I'll show how you could build an RSS reader with Behaviors and touch on some of the principles behind Behaviors.

I'm a core-contributor to Marionette and one of the engineers who built Behaviors. We've been using Behaviors at Etsy for the past month.
,It's not functional reactive 3D transformational monads, it's testing. Because people should write tests for their JavaScript. Because it's cool.
,Technical writing is a soooper important skill for developers that's often overlooked. Even if you're not writing books or blog posts, your ability to provide clear instructions/documentation on your program is imperative if you want anybody to bother using the thing. We'll take a look at the current resources available for improving technical writing (or lack thereof), figure out what makes for readable & understandable writing on complex topics and maybe compare some examples and stuff. Mkay?
,Linguistic relativity, or the Sapir-Whorf Hypothesis, states that the language(s) you speak affect the way you think. I want to talk about if this applies to programming languages as well, (spoiler alert!) how it does, and the ways in which it's a little different because programming languages are just a little different than programming languages.
,Talk about Uncle Bob Martin's SOLID principles and how they apply to JavaScript. The SOLID concept came about during the day's where static Object Oriented languages reigned supreme. Do these principles apply to JS, A dynamic language that not only supports an Object Oriented style but Functional as well?
,[Sketch](http://bohemiancoding.com/sketch/) is a ridiculous good design tool. It has a boatload of the useful features I've been waiting for in a web/app design tool for as long as I've been designing. Not only does it kill in features, it's also possible to script the app with plugins written in trusty ole JavaScript. I'll talk through how they work and the endless possibilities for what can be done with them. :speedboat:
,Total and shameful duplicate of #50. As requested by @brianloveswords :+1: 
,How to make a binary executable that doesn't have the 
"install node.js" pre-requisite.  This also touches on some 
of the npm using pre-compiled binary add-on's  chatter.  

I also read my calendar correctly this time and will be in 
Brooklyn the 17th.

If you really hate surprises, checkout https://github.com/imlucas/lone
,A talk about how WebRTC and other hot HTML5 technologies are used to create cooperative animated gifs, on http://www.pozaic.com/, with minimal server resources.
,This is your life as a Javascript developer. You look at metadata all day long. You make decisions on it. Which package is right for me? If it has the most dependents or Github stars that means it is good, right? 

Play this game enough times and you learn there is more to choice than metadata. **There is code.** I've been conducting some research on static analysis visualization and indexing. The focus of this talk will be how to get the static analysis data with esprima (and maybe Manta for public npm packages) and how to search ASTs for a few meaningful patterns.
,Docker is the newest kid on the block regarding deployments. Previous meetups introduced the borough people to Docker itself.

However that's not all. Coupled with nodejs you can do pretty cool stuff, like launch multiple versions of your website at the same time in order to figure out when a visual bug was introduced.

I've been working on making that super simple with [spinup](https://github.com/thlorenz/spinup).

I will talk about that and other projects in addition to ideas that are now implementable to hopefully get more people on board with the docker/nodejs love affair. 

I'm open to speak in any slot.
,A short talk on building web applications on the new Koa stack, promises and generators to achieve "The Promised Land" of JavaScript.
,Impartial (and fun :D) look at JS semicolon debate + in depth look at how JS automatic semicolon insertion works.
,I would like to share how we implemented a/b testing in our microservice architecture, using a few node services to split up traffic and to gather the data from the experiments.
,,Backbone contains a lot of power. Its ecosystem contains everything you need to create scalable architectures powering large single page applications.

Its modularity also can let you implement pieces to refactor spaghetti code bases without embarking on The Big Rewrite.

Backbone's very unopinionated, so it can be dangerous and overwhelming to go alone. We'll discuss patterns for creating Single Page Applications, as well as strategies for rescuing legacy applications.
,Resubmitting from last month as requested:

Tips and best practices for helping make OSS better, including
- Writing test cases
- Fixing/improving documentation
- Tricks for Node.js/npm module bug fixing
,> both are true stories that happened around the same time.
- "You should just use go!"
- wanted node-webkit, but without the extra 50mb of webkit... few existing attempts were one-offs
- whipped up a little code for building standalone binaries called [lone.js](https://github.com/imlucas/lone)
- need help getting binary add-ons to work right
- swedish meatballs were enjoyed by all
#### timeline
- **thurs** project change. Instead of embedding JS and CSS into Cxx, the whole thing needed to be shipped in a single binary.  Oh and it needed a full rest interface, with auth, SSL, and ponies.
- **friday** wantonly start writing the server in go.
- **friday afternoon** narf. node actually fits much better for  the folks this project will help.  thinking hats and sublime text engaged...
- **saturday** discover node-webkit's trick for this.  have some initial code that works. 
- **sunday morning** swedish meatball reward
- **sunday afternoon** have it down to adding `{"scripts": {"dist": "lone"}, {"devDependencies": {"lone": "imlucas/lone"}` to le' package.json.  gleefully packing and sending binaries around.
- **monday** binary add-ons: not quite as simple as determined while on a meatball high
,I will talk about how to easily rewrite a Node app in Go so you can compile to a single binary. And other benefits. (Basically good for if you are writing Command Line Utilities or server scripting in Node.)
,This talk will cover what I learned while experimenting with a relatively simple multithreaded game engine. Topics include:
- interpolated rendering, allowing 60fps independent of game updates
- using webworkify to make web workers easier to... work... with...
- a 1:1 comparison of the same code running in single threaded mode
- ASCII art headings and diagrams
- an excellent way to lock up your browser in the pursuit of SPEED

The talk assumes people have knowledge of JS topics like rAF, setTimeout, postMessage, etc. but no specific game programming experience.
,AngularJS E2E testing with protractor. Protractor is a node testing framework for AngularJS applications built on top of webdriver js. I will give a quick overview to get you started.

The presentation will be a shorter version of a tech talk I gave at Google https://github.com/andresdominguez/testing-tech-talk
,I will talk about how I approached building a Spider Solitaire game. I will walk through the process I went through in building the game - how I thought it may work, how I pulled everything together, and challenges I ran into along the way.
,This talk propsoal is time-sensitive because, c'mon, who will remember [FlapMMO](http://flapmmo.com/) or Flappy Bird after a month? I wasted an afternoon making [a Greasemonkey userscript](https://github.com/dphiffer/flapmmo-bot) that plays the web-based Flappy Bird game using a very rudimentary vision algorithm in JavaScript. It kind of [works](https://vine.co/v/M7FmO0laP3Q)!
,Javascript is an extremely flexible language that loses some of its power when shoe-horned into a classical OOP mindset. While sometimes inheritance works in your favor (see Backbone.Marionette), I propose to remind ourselves to take advantage of dynamic context and use more composition in our objects.

This talk will relate experiences from a recently completed SPA project built on Backbone.Marionette. It will specifically use Backbone-based code as an example, but not specifically be about Backbone.
,Tips and best practices for helping make OSS better, including
- Writing test cases
- Fixing/improving documentation
- Tricks for Node.js/npm module bug fixing
,This is part of a talk I'll be co-presenting at Fluentconf in March.

> explore Accessibility Developer Tools, an open source library which allows developers to run a suite of accessibility checks on their webpage as part of automated testing. Look at some of the individual assertions, and then see some end-to-end testing workflows with tools that use the library.

http://fluentconf.com/fluent2014/public/schedule/detail/32587
,@nvite, we use Docker to manage our Node Web app, upcoming API, MongoDB and Redis instances. Talk will cover some of the problems we've had with deployments and communication between our product's components and our solutions. Will also go over some easy wins in terms of making your workflow better for a distributed team.
,Talk begins with gauging the understanding of node [streams](http://nodejs.org/api/stream.html) and goes through a brief demo to explain the abstraction if needed. Explain what [`godot`](https://github.com/nodejitsu/godot) is and how it builds on streams to easily write your own custom monitoring solution. 

I will explain the concept of [`producers`](https://github.com/jcrugzz/producer) (which can be ANY readable stream) to generate some standard [metrics](https://github.com/jcrugzz/memory-producer) from your node process and show how you can also use the `client.produce()` method to generate any application specific metrics. Dive into [`reactors`](https://github.com/nodejitsu/godot#reactors) which are simply `transform` or `through` streams that can be used to filter, aggregate or calculate various metrics from your data on the fly!

Along with the overview, I will be giving a live demo of how we can integrate monitoring into a simple `http` application and setup a [`godot`](https://github.com/nodejitsu/godot) server to begin monitoring it.
,**Untangling the Semantic Web**

Intro - What is the Semantic Web? What is Linked Data? Why is it important?
[DBpedia](http://dbpedia.org/page/JavaScript) - the coolest API you've never heard of
[Levelgraph](https://github.com/mcollina/levelgraph) and [Levelgraph-jsonld](https://github.com/mcollina/levelgraph-jsonld) - the DBpedia secret handshake
[AlchemyAPI](http://www.alchemyapi.com/) - Learn Deeply, find the missing links
Demo - Linked Data in action (haven't decided on a subject yet, probably something about politics or music, but maybe something else)
,I'd like to talk about [prerender](https://github.com/collectiveip/prerender), a project that I contribute to. It ensures that javascript-dependent applications are correctly crawlable by google et al.
,I've recently started a new project building a node-based API backend using generators and koa. I've learnt a lot about the approach and would love to educate others about the benefits of using generators in node 0.11.
,A few weeks, a few complimentary technologies, and a hard need. Demo and talk through using Grunt to horde together Angular JS, Phone Gap and the wizViewManager to get a mobile app out to the field, gather data on what folks were using and iterating quickly in a data driven product development environment.
,,Added proposal for final time slot, on a teaching model for JS.
,Computable images, Times Machine, hidden feeds, undocumented JSONP, abandoned HTML fragments from the Gray Lady.
,I am talking to my coworkers about whether I can do "Polyglot Web Programming at Prezi" or not.
,I'll go over techniques for making your mobile web touch interactions perform at a silky smooth 60fps.
,A talk about <a href="https://github.com/amasad/debugjs">debug.js</a>, an experimental pure JavaScript implementation of a JavaScript stepping debugger.

I'll briefly talk about the implementation then present demos like:
1. <a href="http://amasad.github.io/learnable-programming-demo/"> A Bret Victor-inspired code execution visualization </a>
2. <a href="http://debugjs.com/"> In-Browser stepping debugger, console etc. </a>
3. If I had more time I'll present more demos, like runtime analysis, heat maps etc.
,Am resubmitting a proposal from last month (#13), partly because @brianloveswords said I should, and partly because submitting a talk seems like the best way to get a ticket...

Having seen the talks on Wednesday though I'm revising the proposal to make it a better fit for the format - more conceptual and focused. The concept is that throwing HTML at the browser is no longer the best way to build web apps - that worked for static documents, and it kind of worked for apps that make heavy use of client-side string-based templating (e.g. Handlebars), but for a lot of modern apps we need something smarter.

Hence the idea of a UI library ([Ractive.js](http://ractivejs.org)) that parses HTML itself and creates a virtual DOM (a bit like React's) in order to do data-binding and event handling etc. Meteor are currently replacing their UI layer with something that takes a very similar approach, and Ember are replacing Handlebars with 'HTMLBars' which is also a very similar idea, so as counter-intuitive as it sounds, it's the future of UI libraries and MVC frameworks. I think it's a really important idea but I haven't really seen people talking about it yet.
,- Mary Rose Cook
- I'll explain the code for a simple Lisp interpreter in JavaScript.  I'll talk through the code that takes the string of raw Lisp code and parses it into a tree structure.  I'll talk through the code that walks through the tree structure and executes it.  The talk is ten minutes long.  Though we'll move fast, no prior knowledge of Lisp or interpreters is required.

Thanks!
,## Problem

We sold out 90 tickets in ~45 minutes this time. We should find a better way to mete out tickets.
## Potential Solutions
- [Raise ticket prices](https://github.com/brooklynjs/brooklynjs.github.io/issues/19#issuecomment-32180804)
- [Preferential access for those who submit speaker proposals](https://github.com/brooklynjs/brooklynjs.github.io/issues/19#issuecomment-32180757)
- [Preferential access for those who have not attended](https://github.com/brooklynjs/brooklynjs.github.io/issues/19#issuecomment-32181576)
- [Advertise the openness of the beer.js portion of the evening.](https://github.com/brooklynjs/brooklynjs.github.io/issues/19#issuecomment-32180931)
- [Better alerting e.g., email a waitlist](https://github.com/brooklynjs/brooklynjs.github.io/issues/19#issuecomment-32183570)
- [Ticket by Lottery](https://github.com/brooklynjs/brooklynjs.github.io/issues/19#issuecomment-32183570)
,@jed for code review
,Still says 12/16.
,,:)
,Will talk about how we did responsive development at Behance for behance.net
,> [Ractive.js](http://ractivejs.org) is a next-generation DOM manipulation library for creating reactive user interfaces, optimised for developer sanity. It was originally developed to create interactive news applications at theguardian.com

-blurb on [todomvc.com](http://todomvc.com/labs/architecture-examples/ractive/).

It takes a totally novel approach to interactive UI, one that bypasses the limitations of HTML as a language for building dynamic apps, without introducing a ton of hairy new concepts. This talk would give a quick overview of what it does and why it's needed, and why using it in your app is a lower risk than committing to a monolithic framework.

(would gladly take any slot btw)
,,In which I argue that the modern node/javascript tool chain encourages people to write software with beautiful API's.

I use the development of [benjamin](https://github.com/mathisonian/benjamin) -- a node BTC trading-bot/analytics library I just open-sourced -- as a lens for this process, explaining how I maintain a career as a software developer while being a bad programmer.

**The goal of this talk is to make the task of creating well-abstracted, reusable javascript libraries less intimidating**.
,Paragraph highlighting and linking that's totally client-side using unique keys derived from the paragraph.

However, its robust enough to withstand changes in the original content and still be traceable.

The pros of this approach are that it's all on the JS side and you NEVER have to worry about building a complicated CMS paragraph tracking system.

More info:
http://open.blogs.nytimes.com/2011/01/11/emphasis-update-and-source/
http://firstlook.blogs.nytimes.com/2010/11/30/a-few-new-features/?src=tptw
http://www.businessinsider.com/check-out-the-new-easter-egg-on-the-new-york-times-site-2010-11
http://maheshcr.com/deep-linking-and-winer-links/
http://snarkmarket.com/2011/6569
http://donohoe.io/img/preview/emphasis_screenshot_lrg.jpg
http://www.slaw.ca/2011/01/12/new-york-times-releases-emphasis-a-deep-linking-tool/
http://zachseward.com/emphasis/
http://andrew.hedges.name/experiments/levenshtein/
https://github.com/NYTimes/Emphasis
,,,I'm the primary author of https://github.com/facebook/regenerator, a library that converts generator functions from ES6 syntax to plain old ES5, meaning that you can use `yield` in any modern JS environment, be it Node, the browser, SpiderMonkey, or whatever. Let's pretend the future is here already, then talk about how to make that future happen for real, and soon!

More background here:
http://facebook.github.io/regenerator/
https://news.ycombinator.com/item?id=6594207
,,Updated the topic to focus more on what I'm doing here... http://www.bitshadowmachine.com
,you don't need any explanation? mikeal's written a blog about this, can't find it though:
- http.createServer is worthless if you've never actually created a server
- it is invaluable once you have

this is the canonical example of Node (on nodejs.org homepage) and yet it is incredibly confusing to newcomers, but it should be made clear why this is so incredible: the web server, HTTP and the thing most JS developers do day-to-day is no longer a mystery — the "java guys" don't need to write an API end point for you, _you can do it_!.
,I work at Branch.com/Potluck.it where we went from having an entirely Rails codebase to Node.js. I used to work for Twitter in backend and have kind of organized our code base using Futures/Direct Inject to enable easy and fast unit testing.

Basically I write javascript like its scala and im lovin every minute of it (kind of).
,just `node budget`!
,So if you renamed this repository to `brooklynjs.github.io`, you could just push to the `master` branch and I'm pretty sure the page will [still build](https://help.github.com/articles/user-organization-and-project-pages#user--organization-pages). Or feel free to close this issue and tell me to bug off.
